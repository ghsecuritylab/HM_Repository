<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\..\..\..\out_keil\mt2523_hdk\gnss_get_location\gnss_get_location.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\..\..\..\out_keil\mt2523_hdk\gnss_get_location\gnss_get_location.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Nov 27 09:28:28 2018
<BR><P>
<H3>Maximum Stack Usage =       5176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
gnss_driver_uart_irq &rArr; hal_uart_receive_dma &rArr; vdma_pop_data
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[115]">Flash_ReturnReady</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">Flash_ReturnReady</a><BR>
 <LI><a href="#[12f]">SFI_MacEnable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">Flash_ReturnReady</a><BR>
 <LI><a href="#[129]">DelayAWhile_UST</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">Flash_ReturnReady</a><BR>
 <LI><a href="#[59a]">uart_put_char_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59a]">uart_put_char_block</a><BR>
 <LI><a href="#[393]">bt_l2cap_state_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36d]">bt_l2cap_state_machine</a><BR>
 <LI><a href="#[3d0]">bt_notify_fsm_reqv_cmd_hldr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dd]">bt_notify_receive_data_fsm_int</a><BR>
 <LI><a href="#[3ed]">bt_notify_parse_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d4]">bt_notify_parse_header</a><BR>
 <LI><a href="#[3ce]">bt_notify_fsm_data_cmd_hldr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d4]">bt_notify_parse_header</a><BR>
 <LI><a href="#[3ef]">bt_notify_read_data</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d4]">bt_notify_parse_header</a><BR>
 <LI><a href="#[3da]">bt_notify_fsm_ext_data_hldr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d4]">bt_notify_parse_header</a><BR>
 <LI><a href="#[3f9]">bt_notify_send_ext_data_notify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ef]">bt_notify_read_data</a><BR>
 <LI><a href="#[3d6]">bt_notify_fsm_data_hldr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d4]">bt_notify_parse_header</a><BR>
 <LI><a href="#[9a]">bt_sm_master_pairing_proc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">bt_sm_master_pairing_proc</a><BR>
 <LI><a href="#[9b]">bt_sm_slave_pairing_proc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9b]">bt_sm_slave_pairing_proc</a><BR>
 <LI><a href="#[610]">rtc_reload</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[507]">rtc_write_trigger_wait</a><BR>
 <LI><a href="#[503]">rtc_read_osc32con2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[507]">rtc_write_trigger_wait</a><BR>
 <LI><a href="#[4fd]">rtc_read_osc32con1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[507]">rtc_write_trigger_wait</a><BR>
 <LI><a href="#[501]">rtc_read_osc32con</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[507]">rtc_write_trigger_wait</a><BR>
 <LI><a href="#[589]">uart_query_empty</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[589]">uart_query_empty</a><BR>
 <LI><a href="#[550]">insert_to_timer_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d8]">gnss_ajust_timer</a><BR>
 <LI><a href="#[ca]">atci_def_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca]">atci_def_task</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10e]">BusFault_Handler</a> from exception_handler.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[4f]">CachePreInit</a> from system_mt2523.o(i.CachePreInit) referenced from startup_mt2523.o(.reset_handler)
 <LI><a href="#[111]">DebugMon_Handler</a> from exception_handler.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[115]">Flash_ReturnReady</a> from hal_flash_mtd_dal.o(.ram_code) referenced 2 times from port.o(.ram_code)
 <LI><a href="#[10c]">HardFault_Handler</a> from exception_handler.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[59]">MapWindow</a> from hal_flash_mtd.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[10d]">MemManage_Handler</a> from exception_handler.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[10b]">NMI_Handler</a> from exception_handler.o(i.NMI_Handler) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[112]">PendSV_Handler</a> from port.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[116]">Reset_Handler</a> from startup_mt2523.o(.reset_handler) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[5d]">SF_DAL_CheckDeviceReady</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[5a]">SF_DAL_EraseBlock</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[61]">SF_DAL_IOCtrl</a> from hal_flash_mtd_dal.o(i.SF_DAL_IOCtrl) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[60]">SF_DAL_LockEraseBlkAddr</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[57]">SF_DAL_MountDevice</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[5c]">SF_DAL_NonBlockEraseBlock</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[5b]">SF_DAL_ProgramData</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[5f]">SF_DAL_ResumeErase</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[58]">SF_DAL_ShutDown</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[5e]">SF_DAL_SuspendErase</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
 <LI><a href="#[62]">SF_DAL_UnlockBlock_MXIC</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_MXIC)
 <LI><a href="#[63]">SF_DAL_UnlockBlock_None</a> from hal_flash_mtd_dal.o(.ram_code) referenced from hal_flash_mtd_dal.o(i.SF_DAL_Init_WINBOND)
 <LI><a href="#[110]">SVC_Handler</a> from port.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[113]">SysTick_Handler</a> from port.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[50]">SystemInit</a> from system_mt2523.o(i.SystemInit) referenced from startup_mt2523.o(.reset_handler)
 <LI><a href="#[10f]">UsageFault_Handler</a> from exception_handler.o(.ram_code) referenced from startup_mt2523.o(.isr_vector)
 <LI><a href="#[51]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mt2523.o(.reset_handler)
 <LI><a href="#[54]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[55]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[53]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[65]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[65]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[66]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[d3]">ao_domain_dma_interrupt_hander</a> from hal_pdma_internal.o(i.ao_domain_dma_interrupt_hander) referenced from hal_pdma_internal.o(i.vdma_init)
 <LI><a href="#[25]">atci_cmd_hdlr_test</a> from at_command.o(i.atci_cmd_hdlr_test) referenced 2 times from at_command.o(.data)
 <LI><a href="#[ca]">atci_def_task</a> from main.o(i.atci_def_task) referenced from main.o(i.main)
 <LI><a href="#[67]">atci_serial_port_data_callback</a> from atci_main.o(i.atci_serial_port_data_callback) referenced from atci_main.o(i.atci_serial_port_init)
 <LI><a href="#[6b]">ble_app_event_callback</a> from ble_app_common.o(i.ble_app_event_callback) referenced from ble_app_common.o(i.ble_app_common_init)
 <LI><a href="#[6a]">ble_app_gap_le_get_bonding_info</a> from ble_app_common.o(i.ble_app_gap_le_get_bonding_info) referenced from ble_app_common.o(i.ble_app_common_init)
 <LI><a href="#[68]">ble_app_gap_le_get_local_config</a> from ble_app_common.o(i.ble_app_gap_le_get_local_config) referenced from ble_app_common.o(i.ble_app_common_init)
 <LI><a href="#[69]">ble_app_gap_le_get_pairing_config</a> from ble_app_common.o(i.ble_app_gap_le_get_pairing_config) referenced from ble_app_common.o(i.ble_app_common_init)
 <LI><a href="#[6c]">ble_dogp_adp_read_evt_handler</a> from ble_dogp_adp_service.o(i.ble_dogp_adp_read_evt_handler) referenced from ble_dogp_adp_service.o(i.ble_dogp_adp_init)
 <LI><a href="#[6e]">ble_dogp_adp_update_connection_interval_timerout</a> from ble_dogp_common.o(i.ble_dogp_adp_update_connection_interval_timerout) referenced from ble_dogp_common.o(i.ble_dogp_adp_update_connection_interval)
 <LI><a href="#[6d]">ble_dogp_adp_write_evt_handler</a> from ble_dogp_adp_service.o(i.ble_dogp_adp_write_evt_handler) referenced from ble_dogp_adp_service.o(i.ble_dogp_adp_init)
 <LI><a href="#[dd]">ble_dogp_read_char_callback</a> from ble_dogp_service.o(i.ble_dogp_read_char_callback) referenced from ble_dogp_service.o(.constdata)
 <LI><a href="#[de]">ble_dogp_read_char_cccd_callback</a> from ble_dogp_service.o(i.ble_dogp_read_char_cccd_callback) referenced from ble_dogp_service.o(.constdata)
 <LI><a href="#[df]">ble_dogp_write_char_callback</a> from ble_dogp_service.o(i.ble_dogp_write_char_callback) referenced from ble_dogp_service.o(.constdata)
 <LI><a href="#[ff]">bt_avctp_l2cap_psm_callback</a> from bt_l2cap_config.o(i.bt_avctp_l2cap_psm_callback_ext) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[101]">bt_avdtp_l2cap_callback</a> from bt_l2cap_config.o(i.bt_avdtp_l2cap_callback_default) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[102]">bt_avdtp_l2cap_context_op_callback</a> from bt_l2cap_config.o(i.bt_avdtp_l2cap_context_op_callback_default) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[100]">bt_avrcp_l2cap_context_op_callback</a> from bt_l2cap_config.o(i.bt_avrcp_l2cap_context_op_callback_ext) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[103]">bt_aws_l2cap_callback</a> from bt_l2cap_config.o(i.bt_aws_l2cap_callback_default) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[104]">bt_aws_l2cap_context_op_callback</a> from bt_l2cap_config.o(i.bt_aws_l2cap_context_op_callback_default) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[6f]">bt_dogp_event_callback</a> from ble_dogp_common.o(i.bt_dogp_event_callback) referenced from ble_dogp_common.o(i.ble_dogp_event_callback_init)
 <LI><a href="#[71]">bt_driver_eint_handler</a> from bt_driver.o(i.bt_driver_eint_handler) referenced from bt_driver.o(i.bt_driver_eint_init)
 <LI><a href="#[72]">bt_driver_isr</a> from bt_driver.o(i.bt_driver_isr) referenced from bt_driver.o(i.bt_driver_register_irq)
 <LI><a href="#[73]">bt_driver_wakeup_controller_timeout</a> from bt_driver.o(i.bt_driver_wakeup_controller_timeout) referenced from bt_driver.o(i.bt_driver_start_wakeup_controller_timer)
 <LI><a href="#[80]">bt_gap_auth_evt_callback</a> from bt_gap_auth.o(i.bt_gap_auth_evt_callback) referenced 11 times from bt_hci.o(.constdata)
 <LI><a href="#[80]">bt_gap_auth_evt_callback</a> from bt_gap_auth.o(i.bt_gap_auth_evt_callback) referenced from bt_gap_auth.o(i.bt_gap_send_auth_operation)
 <LI><a href="#[74]">bt_gap_auth_timeout</a> from bt_gap_auth.o(i.bt_gap_auth_timeout) referenced from bt_gap_auth.o(i.bt_gap_auth_start_timer)
 <LI><a href="#[76]">bt_gap_clean_pending_op_cb</a> from bt_gap_connection.o(i.bt_gap_clean_pending_op_cb) referenced from bt_gap_connection.o(i.bt_gap_check_connection_status)
 <LI><a href="#[77]">bt_gap_cmp_by_address</a> from bt_gap_connection.o(i.bt_gap_cmp_by_address) referenced from bt_gap_connection.o(i.bt_gap_connect)
 <LI><a href="#[77]">bt_gap_cmp_by_address</a> from bt_gap_connection.o(i.bt_gap_cmp_by_address) referenced 2 times from bt_gap_connection.o(i.bt_gap_connected_evt_callback)
 <LI><a href="#[77]">bt_gap_cmp_by_address</a> from bt_gap_connection.o(i.bt_gap_cmp_by_address) referenced from bt_gap_connection.o(i.bt_gap_find_connection)
 <LI><a href="#[7c]">bt_gap_cmp_by_handle</a> from bt_gap_connection.o(i.bt_gap_cmp_by_handle) referenced from bt_gap_connection.o(i.bt_gap_find_connection_by_handle)
 <LI><a href="#[81]">bt_gap_connected_evt_callback</a> from bt_gap_connection.o(i.bt_gap_connected_evt_callback) referenced 5 times from bt_hci.o(.constdata)
 <LI><a href="#[81]">bt_gap_connected_evt_callback</a> from bt_gap_connection.o(i.bt_gap_connected_evt_callback) referenced from bt_gap_connection.o(i.bt_gap_send_pending_operation)
 <LI><a href="#[75]">bt_gap_connection_idle_check</a> from bt_gap_connection.o(i.bt_gap_connection_idle_check) referenced from bt_gap_auth.o(i.bt_gap_cancel_auth)
 <LI><a href="#[75]">bt_gap_connection_idle_check</a> from bt_gap_connection.o(i.bt_gap_connection_idle_check) referenced from bt_gap_connection.o(i.bt_gap_connected_evt_callback)
 <LI><a href="#[75]">bt_gap_connection_idle_check</a> from bt_gap_connection.o(i.bt_gap_connection_idle_check) referenced from bt_l2cap_util.o(i.bt_l2cap_notify_user_and_close_channel)
 <LI><a href="#[7a]">bt_gap_connection_supervision_check</a> from bt_gap_connection.o(i.bt_gap_connection_supervision_check) referenced from bt_gap_connection.o(i.bt_gap_connection_supervision_timeout)
 <LI><a href="#[78]">bt_gap_connection_supervision_timeout</a> from bt_gap_connection.o(i.bt_gap_connection_supervision_timeout) referenced from bt_gap_connection.o(i.bt_gap_connected_evt_callback)
 <LI><a href="#[78]">bt_gap_connection_supervision_timeout</a> from bt_gap_connection.o(i.bt_gap_connection_supervision_timeout) referenced from bt_gap_connection.o(i.bt_gap_connection_supervision_timeout)
 <LI><a href="#[7d]">bt_gap_le_connection_proc</a> from bt_gap_le.o(i.bt_gap_le_connection_proc) referenced from bt_gap_le.o(i.bt_gap_le_disconnect)
 <LI><a href="#[7d]">bt_gap_le_connection_proc</a> from bt_gap_le.o(i.bt_gap_le_connection_proc) referenced from bt_gap_le.o(i.bt_gap_le_event_callback)
 <LI><a href="#[7f]">bt_gap_le_connection_update_proc</a> from bt_gap_le.o(i.bt_gap_le_connection_update_proc) referenced from bt_hci.o(.constdata)
 <LI><a href="#[7f]">bt_gap_le_connection_update_proc</a> from bt_gap_le.o(i.bt_gap_le_connection_update_proc) referenced from bt_gap_le.o(i.bt_gap_le_update_connection_parameter)
 <LI><a href="#[e1]">bt_gap_le_event_callback</a> from bt_gap_le.o(i.bt_gap_le_event_callback) referenced 7 times from bt_hci.o(.constdata)
 <LI><a href="#[e1]">bt_gap_le_event_callback</a> from bt_gap_le.o(i.bt_gap_le_event_callback) referenced from bt_gap_le.o(i.bt_gap_le_event_callback)
 <LI><a href="#[314]">bt_gap_le_init_proc</a> from bt_gap_init.o(i.bt_gap_le_init_proc) referenced from bt_gap_init.o(i.bt_gap_le_init_proc)
 <LI><a href="#[7e]">bt_gap_le_read_remote_used_features_proc</a> from bt_gap_le.o(i.bt_gap_le_read_remote_used_features_proc) referenced from bt_gap_le.o(i.bt_gap_le_event_callback)
 <LI><a href="#[319]">bt_gap_le_set_advertising_single_proc</a> from bt_gap_le_adv.o(i.bt_gap_le_set_advertising_single_proc) referenced from bt_gap_le_adv.o(i.bt_gap_le_set_advertising_single_proc)
 <LI><a href="#[79]">bt_gap_misc_callback</a> from bt_gap_misc.o(i.bt_gap_misc_callback) referenced 6 times from bt_hci.o(.constdata)
 <LI><a href="#[79]">bt_gap_misc_callback</a> from bt_gap_misc.o(i.bt_gap_misc_callback) referenced from bt_gap_connection.o(i.bt_gap_connected_evt_callback)
 <LI><a href="#[79]">bt_gap_misc_callback</a> from bt_gap_misc.o(i.bt_gap_misc_callback) referenced from bt_gap_misc.o(i.bt_gap_set_scan_mode)
 <LI><a href="#[108]">bt_gatt_l2cap_callback</a> from bt_gatt_sdp.o(i.bt_gatt_l2cap_callback) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[109]">bt_gatt_l2cap_context_op_callback</a> from bt_gatt_sdp.o(i.bt_gatt_l2cap_context_op_callback) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[e2]">bt_gatt_rx_proc_not_supported_without_feedback</a> from bt_att.o(i.bt_gatt_rx_proc_not_supported_without_feedback) referenced 5 times from bt_att.o(.constdata)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_discover_charc)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_discover_charc_descriptor)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_discover_primary_service)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_discover_primary_service_by_uuid)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_find_included_services)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_prepare_write_charc)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_rx_proc_prepare_write_rsp)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_rx_proc_read_blob_rsp)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_rx_proc_read_by_type_rsp)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gattc.o(i.bt_gattc_rx_proc_read_rsp)
 <LI><a href="#[82]">bt_gatt_timeout_callback</a> from bt_gattc.o(i.bt_gatt_timeout_callback) referenced from bt_gatts.o(i.bt_gatts_send_charc_value_notification_indication)
 <LI><a href="#[e3]">bt_gattc_rx_proc_error_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_error_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[e5]">bt_gattc_rx_proc_exchange_mtu_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_exchange_mtu_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[f7]">bt_gattc_rx_proc_execute_write_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_execute_write_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[e9]">bt_gattc_rx_proc_find_by_type_value_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_find_by_type_value_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[e7]">bt_gattc_rx_proc_find_information_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_find_information_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[f9]">bt_gattc_rx_proc_handle_value_indication</a> from bt_gattc.o(i.bt_gattc_rx_proc_handle_value_indication) referenced from bt_att.o(.constdata)
 <LI><a href="#[f8]">bt_gattc_rx_proc_handle_value_notification</a> from bt_gattc.o(i.bt_gattc_rx_proc_handle_value_notification) referenced from bt_att.o(.constdata)
 <LI><a href="#[f5]">bt_gattc_rx_proc_prepare_write_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_prepare_write_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[ee]">bt_gattc_rx_proc_read_blob_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_read_blob_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[f1]">bt_gattc_rx_proc_read_by_group_type_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_read_by_group_type_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[eb]">bt_gattc_rx_proc_read_by_type_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_read_by_type_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[f0]">bt_gattc_rx_proc_read_multiple_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_read_multiple_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[ed]">bt_gattc_rx_proc_read_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_read_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[f3]">bt_gattc_rx_proc_write_rsp</a> from bt_gattc.o(i.bt_gattc_rx_proc_write_rsp) referenced from bt_att.o(.constdata)
 <LI><a href="#[e4]">bt_gatts_rx_proc_exchange_mtu_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_exchange_mtu_req) referenced from bt_att.o(.constdata)
 <LI><a href="#[f6]">bt_gatts_rx_proc_execute_write_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_execute_write_req) referenced from bt_att.o(.constdata)
 <LI><a href="#[e8]">bt_gatts_rx_proc_find_by_type_value_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_find_by_type_value_req) referenced from bt_att.o(.constdata)
 <LI><a href="#[e6]">bt_gatts_rx_proc_find_information_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_find_information_req) referenced from bt_att.o(.constdata)
 <LI><a href="#[fa]">bt_gatts_rx_proc_handle_value_confirmation</a> from bt_gatts.o(i.bt_gatts_rx_proc_handle_value_confirmation) referenced from bt_att.o(.constdata)
 <LI><a href="#[f4]">bt_gatts_rx_proc_prepare_write_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_prepare_write_req) referenced from bt_att.o(.constdata)
 <LI><a href="#[ea]">bt_gatts_rx_proc_read_by_group_type_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_read_by_group_type_req) referenced 2 times from bt_att.o(.constdata)
 <LI><a href="#[ef]">bt_gatts_rx_proc_read_multiple_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_read_multiple_req) referenced from bt_att.o(.constdata)
 <LI><a href="#[ec]">bt_gatts_rx_proc_read_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_read_req) referenced 2 times from bt_att.o(.constdata)
 <LI><a href="#[f2]">bt_gatts_rx_proc_write_req</a> from bt_gatts.o(i.bt_gatts_rx_proc_write_req) referenced from bt_att.o(.constdata)
 <LI><a href="#[e0]">bt_hci_nocp_callback</a> from bt_hci.o(i.bt_hci_nocp_callback) referenced from bt_hci.o(.constdata)
 <LI><a href="#[83]">bt_hci_sleep_mode_timeout</a> from bt_hci.o(i.bt_hci_sleep_mode_timeout) referenced from bt_hci.o(i.bt_hci_restart_sleep_mode_timer)
 <LI><a href="#[105]">bt_hid_control_l2cap_callback</a> from bt_l2cap_config.o(i.bt_hid_control_l2cap_callback_default) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[107]">bt_hid_inter_l2cap_callback</a> from bt_l2cap_config.o(i.bt_hid_inter_l2cap_callback_default) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[106]">bt_hid_l2cap_context_op_callback</a> from bt_l2cap_config.o(i.bt_hid_l2cap_context_op_callback_default) referenced 2 times from bt_l2cap_config.o(.constdata)
 <LI><a href="#[dc]">bt_if_gap_appearance_callback</a> from gatt_service.o(i.bt_if_gap_appearance_callback) referenced from gatt_service.o(.constdata)
 <LI><a href="#[db]">bt_if_gap_dev_name_callback</a> from gatt_service.o(i.bt_if_gap_dev_name_callback) referenced 2 times from gatt_service.o(.constdata)
 <LI><a href="#[85]">bt_l2cap_bqb_conn_param_update_proc</a> from bt_l2cap_le.o(i.bt_l2cap_bqb_conn_param_update_proc) referenced from bt_l2cap_le.o(i.bt_l2cap_le_signal_handle)
 <LI><a href="#[86]">bt_l2cap_oom_handler</a> from bt_l2cap_util.o(i.bt_l2cap_oom_handler) referenced from bt_l2cap.o(i.bt_l2cap_link_status_change_notify)
 <LI><a href="#[86]">bt_l2cap_oom_handler</a> from bt_l2cap_util.o(i.bt_l2cap_oom_handler) referenced from bt_l2cap_util.o(i.bt_l2cap_oom_handler)
 <LI><a href="#[86]">bt_l2cap_oom_handler</a> from bt_l2cap_util.o(i.bt_l2cap_oom_handler) referenced from bt_l2cap_sm.o(i.bt_l2cap_state_close)
 <LI><a href="#[86]">bt_l2cap_oom_handler</a> from bt_l2cap_util.o(i.bt_l2cap_oom_handler) referenced from bt_l2cap_sm.o(i.bt_l2cap_state_config)
 <LI><a href="#[86]">bt_l2cap_oom_handler</a> from bt_l2cap_util.o(i.bt_l2cap_oom_handler) referenced from bt_l2cap_sm.o(i.bt_l2cap_state_open)
 <LI><a href="#[86]">bt_l2cap_oom_handler</a> from bt_l2cap_util.o(i.bt_l2cap_oom_handler) referenced from bt_l2cap_sm.o(i.bt_l2cap_state_w4_upper_conn_rsp)
 <LI><a href="#[87]">bt_l2cap_rtx_timer_proc</a> from bt_l2cap_util.o(i.bt_l2cap_rtx_timer_proc) referenced from bt_l2cap.o(i.bt_l2cap_send_config_req)
 <LI><a href="#[87]">bt_l2cap_rtx_timer_proc</a> from bt_l2cap_util.o(i.bt_l2cap_rtx_timer_proc) referenced from bt_l2cap.o(i.bt_l2cap_send_connect_req)
 <LI><a href="#[87]">bt_l2cap_rtx_timer_proc</a> from bt_l2cap_util.o(i.bt_l2cap_rtx_timer_proc) referenced from bt_l2cap.o(i.bt_l2cap_send_disconnect_req)
 <LI><a href="#[87]">bt_l2cap_rtx_timer_proc</a> from bt_l2cap_util.o(i.bt_l2cap_rtx_timer_proc) referenced from bt_l2cap_sm.o(i.bt_l2cap_state_w4_conn_rsp)
 <LI><a href="#[7b]">bt_linknode_cmp_backward</a> from bt_linknode.o(i.bt_linknode_cmp_backward) referenced from bt_gap_connection.o(i.bt_gap_disconnect)
 <LI><a href="#[7b]">bt_linknode_cmp_backward</a> from bt_linknode.o(i.bt_linknode_cmp_backward) referenced from bt_hci.o(i.bt_hci_process_rx_oom)
 <LI><a href="#[7b]">bt_linknode_cmp_backward</a> from bt_linknode.o(i.bt_linknode_cmp_backward) referenced from bt_l2cap_util.o(i.bt_l2cap_close_channel)
 <LI><a href="#[7b]">bt_linknode_cmp_backward</a> from bt_linknode.o(i.bt_linknode_cmp_backward) referenced from bt_common.o(i.bt_module_handle_process)
 <LI><a href="#[7b]">bt_linknode_cmp_backward</a> from bt_linknode.o(i.bt_linknode_cmp_backward) referenced from bt_common.o(i.bt_remove_link_node)
 <LI><a href="#[7b]">bt_linknode_cmp_backward</a> from bt_linknode.o(i.bt_linknode_cmp_backward) referenced from bt_rfcomm_util.o(i.bt_rfcomm_remove_channel)
 <LI><a href="#[88]">bt_linknode_cmp_type</a> from bt_memory.o(i.bt_linknode_cmp_type) referenced from bt_memory.o(i.bt_mm_allocate_fixed_size_by_type_internal)
 <LI><a href="#[88]">bt_linknode_cmp_type</a> from bt_memory.o(i.bt_linknode_cmp_type) referenced from bt_memory.o(i.bt_mm_is_fixed_size_available_by_type)
 <LI><a href="#[91]">bt_notify_data_hdlr</a> from bt_notify_data_parse.o(i.bt_notify_data_hdlr) referenced from bt_notify_data_parse.o(i.bt_notify_xml_parse)
 <LI><a href="#[89]">bt_notify_data_parse_xml_callback</a> from bt_notify_data_parse.o(i.bt_notify_data_parse_xml_callback) referenced from bt_notify_data_parse.o(i.bt_notify_data_handle_new_msg)
 <LI><a href="#[8b]">bt_notify_dogp_callback_func</a> from bt_notify_task.o(i.bt_notify_dogp_callback_func) referenced from bt_notify_main_recv.o(i.bt_notify_init)
 <LI><a href="#[8f]">bt_notify_elem_end_hdlr</a> from bt_notify_data_parse.o(i.bt_notify_elem_end_hdlr) referenced from bt_notify_data_parse.o(i.bt_notify_xml_parse)
 <LI><a href="#[90]">bt_notify_elem_start_hdlr</a> from bt_notify_data_parse.o(i.bt_notify_elem_start_hdlr) referenced from bt_notify_data_parse.o(i.bt_notify_xml_parse)
 <LI><a href="#[17]">bt_notify_node_action</a> from bt_notify_data_parse.o(i.bt_notify_node_action) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[1e]">bt_notify_node_action_id</a> from bt_notify_data_parse.o(i.bt_notify_node_action_id) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[1f]">bt_notify_node_action_name</a> from bt_notify_data_parse.o(i.bt_notify_node_action_name) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[1d]">bt_notify_node_action_number</a> from bt_notify_data_parse.o(i.bt_notify_node_action_number) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[19]">bt_notify_node_appid</a> from bt_notify_data_parse.o(i.bt_notify_node_appid) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[14]">bt_notify_node_category</a> from bt_notify_data_parse.o(i.bt_notify_node_category) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[21]">bt_notify_node_content</a> from bt_notify_data_parse.o(i.bt_notify_node_content) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[1c]">bt_notify_node_group_id</a> from bt_notify_data_parse.o(i.bt_notify_node_group_id) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[24]">bt_notify_node_missed_call_count</a> from bt_notify_data_parse.o(i.bt_notify_node_missed_call_count) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[16]">bt_notify_node_msgid</a> from bt_notify_data_parse.o(i.bt_notify_node_msgid) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[23]">bt_notify_node_number</a> from bt_notify_data_parse.o(i.bt_notify_node_number) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[1b]">bt_notify_node_page_indx</a> from bt_notify_data_parse.o(i.bt_notify_node_page_indx) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[1a]">bt_notify_node_page_number</a> from bt_notify_data_parse.o(i.bt_notify_node_page_number) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[18]">bt_notify_node_sender</a> from bt_notify_data_parse.o(i.bt_notify_node_sender) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[15]">bt_notify_node_subtype</a> from bt_notify_data_parse.o(i.bt_notify_node_subtype) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[22]">bt_notify_node_timestamp</a> from bt_notify_data_parse.o(i.bt_notify_node_timestamp) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[20]">bt_notify_node_title</a> from bt_notify_data_parse.o(i.bt_notify_node_title) referenced 2 times from bt_notify_data_parse.o(.data)
 <LI><a href="#[8d]">bt_notify_recv_parse_xml_callback</a> from bt_notify_main_recv.o(i.bt_notify_recv_parse_xml_callback) referenced from bt_notify_main_recv.o(i.bt_notify_parse_data)
 <LI><a href="#[8c]">bt_notify_service_event_callback</a> from bt_notify_task.o(i.bt_notify_service_event_callback) referenced from bt_notify_main_recv.o(i.bt_notify_init)
 <LI><a href="#[8e]">bt_notify_service_task</a> from bt_notify_task.o(i.bt_notify_service_task) referenced from bt_notify_task.o(i.bt_notify_service_task_init)
 <LI><a href="#[8a]">bt_notify_sync_cmd_time_out_callback</a> from bt_notify_main_recv.o(i.bt_notify_sync_cmd_time_out_callback) referenced from bt_notify_main_recv.o(i.bt_notify_handle_connect_cnf)
 <LI><a href="#[8a]">bt_notify_sync_cmd_time_out_callback</a> from bt_notify_main_recv.o(i.bt_notify_sync_cmd_time_out_callback) referenced from bt_notify_main_recv.o(i.bt_notify_handle_ready_to_read_ind)
 <LI><a href="#[92]">bt_os_layer_rtos_timer_os_expire</a> from bt_os_layer_api.o(i.bt_os_layer_rtos_timer_os_expire) referenced from bt_os_layer_api.o(i.bt_os_layer_init_timer)
 <LI><a href="#[2d]">bt_rfcomm_hfp_callback</a> from bt_rfcomm_util.o(i.default_bt_rfcomm_hfp_callback) referenced 2 times from bt_rfcomm_util.o(.data)
 <LI><a href="#[fd]">bt_rfcomm_l2cap_callback</a> from bt_rfcomm_session.o(i.bt_rfcomm_l2cap_callback) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[fe]">bt_rfcomm_l2cap_context_op_callback</a> from bt_rfcomm_session.o(i.bt_rfcomm_l2cap_context_op_callback) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[2e]">bt_rfcomm_obex_callback</a> from bt_rfcomm_util.o(i.default_bt_rfcomm_obex_callback) referenced 2 times from bt_rfcomm_util.o(.data)
 <LI><a href="#[93]">bt_rfcomm_oom_connect</a> from bt_rfcomm.o(i.bt_rfcomm_oom_connect) referenced from bt_rfcomm_ctrl.o(i.bt_rfcomm_PN_response_handler)
 <LI><a href="#[93]">bt_rfcomm_oom_connect</a> from bt_rfcomm.o(i.bt_rfcomm_oom_connect) referenced from bt_rfcomm.o(i.bt_rfcomm_connect)
 <LI><a href="#[93]">bt_rfcomm_oom_connect</a> from bt_rfcomm.o(i.bt_rfcomm_oom_connect) referenced from bt_rfcomm_session.o(i.bt_rfcomm_session_state_conn_incoming)
 <LI><a href="#[93]">bt_rfcomm_oom_connect</a> from bt_rfcomm.o(i.bt_rfcomm_oom_connect) referenced from bt_rfcomm_session.o(i.bt_rfcomm_session_state_conn_pending)
 <LI><a href="#[95]">bt_rfcomm_oom_disconnect</a> from bt_rfcomm.o(i.bt_rfcomm_oom_disconnect) referenced from bt_rfcomm.o(i.bt_rfcomm_disconnect)
 <LI><a href="#[94]">bt_rfcomm_oom_send_credit</a> from bt_rfcomm.o(i.bt_rfcomm_oom_send_credit) referenced from bt_rfcomm.o(i.bt_rfcomm_channel_state_machine)
 <LI><a href="#[2f]">bt_rfcomm_spp_callback</a> from bt_spp.o(i.bt_rfcomm_spp_callback) referenced 2 times from bt_rfcomm_util.o(.data)
 <LI><a href="#[96]">bt_rfcomm_timeout_handler</a> from bt_rfcomm_util.o(i.bt_rfcomm_timeout_handler) referenced from bt_rfcomm_util.o(i.bt_rfcomm_start_timer)
 <LI><a href="#[fb]">bt_sdp_l2cap_callback</a> from bt_sdp_util.o(i.bt_sdp_l2cap_callback) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[fc]">bt_sdp_l2cap_context_op_callback</a> from bt_sdp_util.o(i.bt_sdp_l2cap_context_op_callback) referenced from bt_l2cap_config.o(.constdata)
 <LI><a href="#[97]">bt_sdpc_oom_handler</a> from bt_sdpc.o(i.bt_sdpc_oom_handler) referenced from bt_sdpc.o(i.bt_sdpc_handle_current_request)
 <LI><a href="#[98]">bt_sdpc_timeout_callback</a> from bt_sdpc.o(i.bt_sdpc_timeout_callback) referenced from bt_sdpc.o(i.bt_sdpc_start_query)
 <LI><a href="#[99]">bt_sdps_compare_by_channel</a> from bt_sdps.o(i.bt_sdps_compare_by_channel) referenced from bt_sdps.o(i.bt_sdps_find_channel)
 <LI><a href="#[33]">bt_sdps_get_a2dp_snk_record</a> from bt_sdps_config.o(i.bt_sdps_get_a2dp_snk_record_ext) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[32]">bt_sdps_get_a2dp_src_record</a> from bt_sdps_config.o(i.bt_sdps_get_a2dp_src_record_ext) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[34]">bt_sdps_get_avrcp_CT_record</a> from bt_sdps_config.o(i.bt_sdps_get_avrcp_CT_record_ext) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[35]">bt_sdps_get_avrcp_TG_record</a> from bt_sdps_config.o(i.bt_sdps_get_avrcp_TG_record_ext) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[36]">bt_sdps_get_gatt_GAP_record</a> from bt_gatt_sdp.o(i.bt_sdps_get_gatt_GAP_record) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[37]">bt_sdps_get_gatt_GATT_record</a> from bt_gatt_sdp.o(i.bt_sdps_get_gatt_GATT_record) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[31]">bt_sdps_get_hfp_record</a> from bt_sdps_config.o(i.bt_sdps_get_hfp_record_ext) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[30]">bt_sdps_get_sdp_record</a> from bt_sdps_config.o(i.bt_sdps_get_sdp_record) referenced 2 times from bt_sdps_config.o(.data)
 <LI><a href="#[9a]">bt_sm_master_pairing_proc</a> from bt_sm.o(i.bt_sm_master_pairing_proc) referenced from bt_sm.o(i.bt_sm_master_pairing_proc)
 <LI><a href="#[9b]">bt_sm_slave_pairing_proc</a> from bt_sm.o(i.bt_sm_slave_pairing_proc) referenced from bt_sm.o(i.bt_sm_slave_pairing_proc)
 <LI><a href="#[9d]">bt_spp_oom_connect</a> from bt_spp.o(i.bt_spp_oom_connect) referenced from bt_spp_sdp.o(i.bt_spp_sdp_callback)
 <LI><a href="#[9d]">bt_spp_oom_connect</a> from bt_spp.o(i.bt_spp_oom_connect) referenced from bt_spp.o(i.bt_spp_state_disconnected)
 <LI><a href="#[9e]">bt_spp_oom_notify_send</a> from bt_spp.o(i.bt_spp_oom_notify_send) referenced from bt_spp.o(i.bt_spp_state_connected)
 <LI><a href="#[9c]">bt_spp_sdp_callback</a> from bt_spp_sdp.o(i.bt_spp_sdp_callback) referenced from bt_spp_sdp.o(i.bt_spp_sdp_attribute_search)
 <LI><a href="#[9c]">bt_spp_sdp_callback</a> from bt_spp_sdp.o(i.bt_spp_sdp_callback) referenced from bt_spp_sdp.o(i.bt_spp_sdp_service_search)
 <LI><a href="#[9c]">bt_spp_sdp_callback</a> from bt_spp_sdp.o(i.bt_spp_sdp_callback) referenced from bt_spp.o(i.bt_spp_state_conn_pending)
 <LI><a href="#[70]">bt_task</a> from bt_task.o(i.bt_task) referenced from bt_init.o(i.bt_create_task)
 <LI><a href="#[a0]">bt_time_backward_cmp_duration</a> from bt_timer.o(i.bt_time_backward_cmp_duration) referenced from bt_timer.o(i.bt_timer_start)
 <LI><a href="#[9f]">bt_time_backward_cmp_id</a> from bt_timer.o(i.bt_time_backward_cmp_id) referenced from bt_timer.o(i.bt_timer_cancel)
 <LI><a href="#[9f]">bt_time_backward_cmp_id</a> from bt_timer.o(i.bt_time_backward_cmp_id) referenced from bt_timer.o(i.bt_timer_cancel_and_callback)
 <LI><a href="#[9f]">bt_time_backward_cmp_id</a> from bt_timer.o(i.bt_time_backward_cmp_id) referenced from bt_timer.o(i.bt_timer_find)
 <LI><a href="#[84]">bt_timer_os_expire</a> from bt_platform.o(i.bt_timer_os_expire) referenced from bt_platform.o(i.bt_init)
 <LI><a href="#[4]">dump_module_buffer</a> from syslog.o(i.dump_module_buffer) referenced 36 times from ble_app_common.o(.data)
 <LI><a href="#[a3]">dvfs_vcore_get_next_module</a> from hal_dvfs_internal_vcore.o(i.dvfs_vcore_get_next_module) referenced from hal_dvfs_internal_vcore.o(i.dvfs_vcore_domain_initialize)
 <LI><a href="#[a2]">dvfs_vcore_switch_frequency</a> from hal_dvfs_internal_vcore.o(.tcm_code) referenced from hal_dvfs_internal_vcore.o(i.dvfs_vcore_domain_initialize)
 <LI><a href="#[a1]">dvfs_vcore_switch_voltage</a> from hal_dvfs_internal_vcore.o(i.dvfs_vcore_switch_voltage) referenced from hal_dvfs_internal_vcore.o(i.dvfs_vcore_domain_initialize)
 <LI><a href="#[aa]">epo_btnotify_msg_relay</a> from epo_download.o(i.epo_btnotify_msg_relay) referenced from epo_download.o(i.epo_download_init)
 <LI><a href="#[a4]">epo_demo_send_assistance_data_int</a> from epo_demo.o(i.epo_demo_send_assistance_data_int) referenced from epo_demo.o(i.epo_demo_send_assistance_data)
 <LI><a href="#[cb]">epo_download_task</a> from epo_download.o(i.epo_download_task) referenced from main.o(i.main)
 <LI><a href="#[64]">fputc</a> from sys_init.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[64]">fputc</a> from sys_init.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[64]">fputc</a> from sys_init.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[47]">general_clock_change_bit_set</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[48]">general_clock_change_bit_verified</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[3a]">general_clock_disable_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[44]">general_clock_div_disable</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[43]">general_clock_div_enable</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[39]">general_clock_enable_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[3b]">general_clock_force_disable_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[46]">general_clock_force_on_clear</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[45]">general_clock_force_on_set</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[38]">general_clock_get_state_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[4a]">general_clock_mux_get_state</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[4b]">general_clock_mux_request_pll</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[49]">general_clock_mux_sel</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[4e]">general_clock_resume_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[41]">general_clock_src_clear</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[42]">general_clock_src_get_state</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[40]">general_clock_src_set</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[4d]">general_clock_suspend_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[4c]">general_grp_get_state_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[3d]">general_pll_disable_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[3c]">general_pll_enable_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[3f]">general_pll_req_restore_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[3e]">general_pll_req_save_release_op</a> from hal_clock.o(.tcm_code) referenced 2 times from hal_clock.o(.tcm_rwdata)
 <LI><a href="#[1]">gnss_agps_at_handler</a> from gnss_bridge_task.o(i.gnss_agps_at_handler) referenced 2 times from gnss_bridge_task.o(.data)
 <LI><a href="#[2]">gnss_agps_pmtk_cmd_handler</a> from gnss_bridge_task.o(i.gnss_agps_pmtk_cmd_handler) referenced 2 times from gnss_bridge_task.o(.data)
 <LI><a href="#[ac]">gnss_bridge_task_callback</a> from gnss_bridge_task.o(i.gnss_bridge_task_callback) referenced from gnss_bridge_task.o(i.gnss_bridge_port_reinit)
 <LI><a href="#[ae]">gnss_bridge_task_main</a> from gnss_bridge_task.o(i.gnss_bridge_task_main) referenced from gnss_bridge_task.o(i.gnss_bridge_task_init)
 <LI><a href="#[ad]">gnss_bridge_timer_callback</a> from gnss_bridge_task.o(i.gnss_bridge_timer_callback) referenced from gnss_bridge_task.o(i.gnss_bridge_task_init)
 <LI><a href="#[a5]">gnss_bt_app_event_callback</a> from bt_common.o(i.gnss_bt_app_event_callback) referenced from epo_download.o(i.epo_download_init)
 <LI><a href="#[a6]">gnss_bt_gap_get_local_configuration</a> from bt_common.o(i.gnss_bt_gap_get_local_configuration) referenced from epo_download.o(i.epo_download_init)
 <LI><a href="#[a7]">gnss_bt_gap_le_get_bonding_info</a> from bt_common.o(i.gnss_bt_gap_le_get_bonding_info) referenced from epo_download.o(i.epo_download_init)
 <LI><a href="#[a9]">gnss_bt_gap_le_get_local_config</a> from bt_common.o(i.gnss_bt_gap_le_get_local_config) referenced from epo_download.o(i.epo_download_init)
 <LI><a href="#[a8]">gnss_bt_gap_le_get_pairing_config</a> from bt_common.o(i.gnss_bt_gap_le_get_pairing_config) referenced from epo_download.o(i.epo_download_init)
 <LI><a href="#[b4]">gnss_driver_callback_func</a> from gnss_app.o(i.gnss_driver_callback_func) referenced from gnss_app.o(i.gnss_task_init)
 <LI><a href="#[b1]">gnss_driver_eint_irq</a> from gnss_driver.o(i.gnss_driver_eint_irq) referenced from gnss_driver.o(i.gnss_driver_power_on)
 <LI><a href="#[b0]">gnss_driver_uart_irq</a> from gnss_driver.o(i.gnss_driver_uart_irq) referenced from gnss_driver.o(i.gnss_driver_init)
 <LI><a href="#[b3]">gnss_on_off_timer_handle_func</a> from gnss_app.o(i.gnss_on_off_timer_handle_func) referenced from gnss_app.o(i.gnss_on_off_timer_handle_func)
 <LI><a href="#[b3]">gnss_on_off_timer_handle_func</a> from gnss_app.o(i.gnss_on_off_timer_handle_func) referenced from gnss_app.o(i.gnss_task_msg_handler)
 <LI><a href="#[b6]">gnss_periodic_timer_handle_func</a> from gnss_app.o(i.gnss_periodic_timer_handle_func) referenced from gnss_app.o(i.gnss_task_msg_handler)
 <LI><a href="#[ab]">gnss_serial_port_data_callback</a> from gnss_uart_bridge.o(i.gnss_serial_port_data_callback) referenced from gnss_uart_bridge.o(i.gnss_bridge_port_init)
 <LI><a href="#[b7]">gnss_sleep_timer_handle_func</a> from gnss_app.o(i.gnss_sleep_timer_handle_func) referenced from gnss_app.o(i.gnss_task_msg_handler)
 <LI><a href="#[b7]">gnss_sleep_timer_handle_func</a> from gnss_app.o(i.gnss_sleep_timer_handle_func) referenced from gnss_app.o(i.gnss_wakeup_handle)
 <LI><a href="#[af]">gnss_task_main</a> from gnss_app.o(i.gnss_task_main) referenced from gnss_app.o(i.gnss_demo_app_create)
 <LI><a href="#[b8]">gnss_timer_callback</a> from gnss_timer.o(i.gnss_timer_callback) referenced from gnss_timer.o(i.gnss_timer_init)
 <LI><a href="#[b5]">gnss_timer_expiry_notify</a> from gnss_app.o(i.gnss_timer_expiry_notify) referenced from gnss_app.o(i.gnss_task_init)
 <LI><a href="#[b2]">gnss_uart_handle</a> from gnss_api.o(i.gnss_uart_handle) referenced from gnss_api.o(i.gnss_init)
 <LI><a href="#[b9]">hal_eint_isr</a> from hal_eint.o(i.hal_eint_isr) referenced from hal_eint.o(i.hal_eint_init)
 <LI><a href="#[c0]">hal_i2c_backup_all_register</a> from hal_i2c_master.o(i.hal_i2c_backup_all_register) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[c1]">hal_i2c_restore_all_register</a> from hal_i2c_master.o(i.hal_i2c_restore_all_register) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[f]">internal_pmu_audio_lock_voltage</a> from hal_pmu_wrap_interface.o(i.internal_pmu_audio_lock_voltage) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[e]">internal_pmu_ctrl_power</a> from hal_pmu_wrap_interface.o(i.internal_pmu_ctrl_power) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[114]">isrC_main</a> from hal_nvic.o(.tcm_code) referenced 64 times from startup_mt2523.o(.isr_vector)
 <LI><a href="#[56]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[52]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6]">msdc_prepare</a> from hal_msdc.o(i.msdc_prepare) referenced 2 times from hal_msdc.o(.data)
 <LI><a href="#[5]">msdc_valid</a> from hal_msdc.o(i.msdc_valid) referenced 2 times from hal_msdc.o(.data)
 <LI><a href="#[10]">null_function</a> from hal_pmu_wrap_interface.o(i.null_function) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[d2]">pd_domain_dma_interrupt_hander</a> from hal_pdma_internal.o(i.pd_domain_dma_interrupt_hander) referenced from hal_pdma_internal.o(i.vdma_init)
 <LI><a href="#[a]">pmu_control_mtcmos_mt6385</a> from hal_pmu_internal.o(i.pmu_control_mtcmos_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[cc]">pmu_eint_handler</a> from hal_pmu.o(i.pmu_eint_handler) referenced from hal_pmu.o(i.pmu_eint_init)
 <LI><a href="#[12]">pmu_enter_power_off_mt6385</a> from hal_pmu_internal.o(i.pmu_enter_power_off_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[9]">pmu_get_register_value_mt6385</a> from hal_pmu.o(i.pmu_get_register_value_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[11]">pmu_get_usb_input_status_mt6385</a> from hal_pmu_internal.o(i.pmu_get_usb_input_status_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[b]">pmu_get_vcore_voltage_mt6385</a> from hal_pmu_internal.o(i.pmu_get_vcore_voltage_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[7]">pmu_init_mt6385</a> from hal_pmu.o(i.pmu_init_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[13]">pmu_reset_mt6385</a> from hal_pmu_internal.o(i.pmu_reset_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[8]">pmu_set_register_value_mt6385</a> from hal_pmu.o(i.pmu_set_register_value_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[d]">pmu_set_vcore_s1_buck_mt6385</a> from hal_pmu_internal.o(i.pmu_set_vcore_s1_buck_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[c]">pmu_set_vcore_voltage_mt6385</a> from hal_pmu_internal.o(i.pmu_set_vcore_voltage_mt6385) referenced 2 times from hal_pmu_wrap_interface.o(.data)
 <LI><a href="#[3]">print_module_log</a> from syslog.o(i.print_module_log) referenced 36 times from ble_app_common.o(.data)
 <LI><a href="#[d1]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[cd]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[d5]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[ba]">pwm_backup_register_call_back</a> from hal_pwm.o(i.pwm_backup_register_call_back) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[bb]">pwm_restore_register_call_back</a> from hal_pwm.o(i.pwm_restore_register_call_back) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[ce]">rtc_eint_callback</a> from hal_rtc.o(i.rtc_eint_callback) referenced from hal_rtc.o(i.rtc_init_eint)
 <LI><a href="#[c2]">sd_backup_all</a> from hal_sd_internal.o(i.sd_backup_all) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[c3]">sd_restore_all</a> from hal_sd_internal.o(i.sd_restore_all) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[c4]">sdio_backup_all</a> from hal_sdio_internal.o(i.sdio_backup_all) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[c5]">sdio_restore_all</a> from hal_sdio_internal.o(i.sdio_restore_all) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[cf]">serial_port_uart_callback</a> from serial_port_uart.o(i.serial_port_uart_callback) referenced from serial_port_uart.o(i.serial_port_uart_init)
 <LI><a href="#[27]">serial_port_uart_control</a> from serial_port_uart.o(i.serial_port_uart_control) referenced 2 times from serial_port.o(.data)
 <LI><a href="#[28]">serial_port_uart_deinit</a> from serial_port_uart.o(i.serial_port_uart_deinit) referenced 2 times from serial_port.o(.data)
 <LI><a href="#[26]">serial_port_uart_init</a> from serial_port_uart.o(i.serial_port_uart_init) referenced 2 times from serial_port.o(.data)
 <LI><a href="#[29]">serial_port_uart_reset_para</a> from serial_port_para.o(i.serial_port_uart_reset_para) referenced 2 times from serial_port.o(.data)
 <LI><a href="#[2b]">serial_port_usb_control</a> from serial_port_usb.o(i.serial_port_usb_control) referenced 2 times from serial_port.o(.data)
 <LI><a href="#[2c]">serial_port_usb_deinit</a> from serial_port_usb.o(i.serial_port_usb_deinit) referenced 2 times from serial_port.o(.data)
 <LI><a href="#[2a]">serial_port_usb_init</a> from serial_port_usb.o(i.serial_port_usb_init) referenced 2 times from serial_port.o(.data)
 <LI><a href="#[be]">spi_slave_backup_all_register</a> from hal_spi_slave_internal.o(i.spi_slave_backup_all_register) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[bf]">spi_slave_restore_all_register</a> from hal_spi_slave_internal.o(i.spi_slave_restore_all_register) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[bc]">spim_backup_register_callback</a> from hal_spi_master.o(i.spim_backup_register_callback) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[bd]">spim_restore_register_callback</a> from hal_spi_master.o(i.spim_restore_register_callback) referenced from hal_misc.o(i.hal_module_sleep_register_callback)
 <LI><a href="#[c8]">syslog_exception_cb</a> from syslog.o(i.syslog_exception_cb) referenced from syslog.o(i.log_init)
 <LI><a href="#[d0]">syslog_port_service_callback</a> from syslog.o(i.syslog_port_service_callback) referenced from syslog.o(i.syslog_serial_port_open)
 <LI><a href="#[c9]">syslog_task_entry</a> from syslog.o(i.syslog_task_entry) referenced from syslog.o(i.log_init)
 <LI><a href="#[c6]">uart_dma_callback_handler</a> from hal_uart.o(i.uart_dma_callback_handler) referenced from hal_uart.o(i.hal_uart_register_callback)
 <LI><a href="#[c7]">uart_interrupt_handler</a> from hal_uart_internal_platform.o(i.uart_interrupt_handler) referenced from hal_uart.o(i.hal_uart_register_callback)
 <LI><a href="#[d4]">vEventGroupSetBitsCallback</a> from event_groups.o(i.vEventGroupSetBitsCallback) referenced from event_groups.o(i.xEventGroupSetBitsFromISR)
 <LI><a href="#[d7]">xml_doctype_end_hdlr</a> from xml_main.o(i.xml_doctype_end_hdlr) referenced from xml_main.o(i.xml_new_parser)
 <LI><a href="#[d6]">xml_doctype_start_hdlr</a> from xml_main.o(i.xml_doctype_start_hdlr) referenced from xml_main.o(i.xml_new_parser)
 <LI><a href="#[d9]">xml_elem_end_hdlr</a> from xml_main.o(i.xml_elem_end_hdlr) referenced from xml_main.o(i.xml_new_parser)
 <LI><a href="#[d9]">xml_elem_end_hdlr</a> from xml_main.o(i.xml_elem_end_hdlr) referenced from xml_main.o(i.xml_register_element_handler)
 <LI><a href="#[d8]">xml_elem_start_hdlr</a> from xml_main.o(i.xml_elem_start_hdlr) referenced from xml_main.o(i.xml_new_parser)
 <LI><a href="#[d8]">xml_elem_start_hdlr</a> from xml_main.o(i.xml_elem_start_hdlr) referenced from xml_main.o(i.xml_register_element_handler)
 <LI><a href="#[da]">xml_general_data_hdlr</a> from xml_main.o(i.xml_general_data_hdlr) referenced from xml_main.o(i.xml_new_parser)
 <LI><a href="#[da]">xml_general_data_hdlr</a> from xml_main.o(i.xml_general_data_hdlr) referenced from xml_main.o(i.xml_register_data_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[110]"></a>SVC_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SVC_Handler &rArr; vPortCurrentTaskStackOverflowCheck &rArr; hal_dwt_request_watchpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[112]"></a>PendSV_Handler</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, port.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[113]"></a>SysTick_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTick_Handler &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[121]"></a>NOR_ReadID</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, hal_flash_cfi.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NOR_ReadID &rArr; SFI_Dev_Command_Ext &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_CheckValidDeviceID (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Index (via Veneer)
</UL>

<P><STRONG><a name="[13f]"></a>get_NOR_init_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_flash_disk.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[127]"></a>BlockAddress</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, hal_flash_mtd.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BlockAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookupAddress
</UL>

<P><STRONG><a name="[59]"></a>MapWindow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_flash_mtd.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MapWindow &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookupAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[12c]"></a>BlockSize</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, hal_flash_mtd.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BlockSize
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_BlankCheck
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData (via Veneer)
</UL>

<P><STRONG><a name="[1e2]"></a>BlockIndex</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_flash_mtd.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BlockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_BlockIndex (via Veneer)
</UL>

<P><STRONG><a name="[129]"></a>DelayAWhile_UST</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_flash_mtd.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = DelayAWhile_UST &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Suspend
</UL>

<P><STRONG><a name="[12b]"></a>SFI_BlankCheck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockSize
</UL>

<P><STRONG><a name="[12e]"></a>SFI_ReverseByteOrder</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write_C1A4
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write_C1A3
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_CommandAddress
</UL>

<P><STRONG><a name="[12d]"></a>SFI_Dev_CommandAddress</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_flash_mtd_common.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFI_Dev_CommandAddress &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_ReverseByteOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_EraseBlock
</UL>

<P><STRONG><a name="[131]"></a>SFI_GPRAM_Write_C1A3</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hal_flash_mtd_common.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SFI_GPRAM_Write_C1A3
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_ReverseByteOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[132]"></a>SFI_GPRAM_Write_C1A4</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, hal_flash_mtd_common.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFI_GPRAM_Write_C1A4
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_ReverseByteOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[147]"></a>SFI_GPRAM_Write</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_flash_mtd_common.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SFI_GPRAM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[123]"></a>SFI_Dev_Command_Ext</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, hal_flash_mtd_common.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SFI_Dev_Command_Ext &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_List
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ReadID
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command_Ext
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_UnlockBlock_MXIC
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_WaitReady_EMIINIT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_ReadDeviceID
</UL>

<P><STRONG><a name="[133]"></a>SFI_Dev_Command_List</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext
</UL>

<P><STRONG><a name="[134]"></a>SFI_ReadDeviceID</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_ReadDeviceID_SPI
</UL>

<P><STRONG><a name="[135]"></a>SFI_ReadDeviceID_SPI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_ReadDeviceID
</UL>

<P><STRONG><a name="[67e]"></a>SFI_Dev_WorkingFrequencyQuery</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)

<P><STRONG><a name="[67f]"></a>SFI_Dev_WorkingVoltageQuery</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)

<P><STRONG><a name="[680]"></a>SFI_Dev_GetUniqueID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)

<P><STRONG><a name="[136]"></a>SF_DAL_DEV_Enter_DPD</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hal_flash_mtd_common.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command (via Veneer)
</UL>

<P><STRONG><a name="[681]"></a>get_current_32K_counter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)

<P><STRONG><a name="[138]"></a>ust_busy_wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
</UL>

<P><STRONG><a name="[122]"></a>SaveAndSetIRQMask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ReadID
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFDMLock (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock (via Veneer)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
</UL>

<P><STRONG><a name="[124]"></a>RestoreIRQMask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ReadID
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFDMLock (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock (via Veneer)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
</UL>

<P><STRONG><a name="[63]"></a>SF_DAL_UnlockBlock_None</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_WINBOND)
</UL>
<P><STRONG><a name="[682]"></a>sfi_60qbit_test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)

<P><STRONG><a name="[683]"></a>CompareData</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)

<P><STRONG><a name="[13b]"></a>SF_DAL_FLAG_BUSY_CLR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ShutDown
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckReady
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[13c]"></a>SF_DAL_Dev_ReadStatus</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SF_DAL_Dev_ReadStatus &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ShutDown
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FailCheck
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_SuspendErase
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SuspendOperation
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckReady
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[13d]"></a>SF_DAL_FLAG_SUS_SET</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SF_DAL_FLAG_SUS_SET
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_SuspendErase
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SuspendOperation
</UL>

<P><STRONG><a name="[13e]"></a>SF_DAL_Dev_Suspend</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SF_DAL_Dev_Suspend &rArr; DelayAWhile_UST &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayAWhile_UST
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_SuspendErase
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SuspendOperation
</UL>

<P><STRONG><a name="[115]"></a>Flash_ReturnReady</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Suspend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_SET
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_NOR_init_status
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_nor_list (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Vendor (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_IOCtrl (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_EraseBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SuspendOperation
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ResumeOperation
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckReady
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_BlankCheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayAWhile_UST
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapWindow
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData (via Veneer)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rawdisk_error_code (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFDMLock (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.ram_code)
</UL>
<P><STRONG><a name="[140]"></a>SF_DAL_FreeDevLock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SF_DAL_FreeDevLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ShutDown
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_EraseBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ResumeErase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckReady
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[141]"></a>SF_DAL_FLAG_BUSY_SET</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SF_DAL_FLAG_BUSY_SET
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_EraseBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[142]"></a>SF_DAL_Dev_Command</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SF_DAL_Dev_Command &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_WriteEnable
</UL>

<P><STRONG><a name="[143]"></a>SF_DAL_Dev_WriteEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SF_DAL_Dev_WriteEnable &rArr; SF_DAL_Dev_Command &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_EraseBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[144]"></a>retrieve_MTD_lock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = retrieve_MTD_lock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ShutDown
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_EraseBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ResumeErase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckReady
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_GetDevLock
</UL>

<P><STRONG><a name="[145]"></a>SF_DAL_GetDevLock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
</UL>

<P><STRONG><a name="[146]"></a>Flash_ProgramData</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_WriteEnable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write_C1A4
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write_C1A3
</UL>

<P><STRONG><a name="[148]"></a>Flash_CheckReady</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>

<P><STRONG><a name="[149]"></a>SF_DAL_FLAG_SUS_CLR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SF_DAL_FLAG_SUS_CLR
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume
</UL>

<P><STRONG><a name="[14a]"></a>SF_DAL_Dev_Resume</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SF_DAL_Dev_Resume &rArr; SFI_Dev_Command &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_MountDevice
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ShutDown
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ResumeErase
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ResumeOperation
</UL>

<P><STRONG><a name="[14b]"></a>Flash_ResumeOperation</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume
</UL>

<P><STRONG><a name="[14c]"></a>Flash_SuspendOperation</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Suspend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_SET
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
</UL>

<P><STRONG><a name="[684]"></a>SF_DAL_CreateDevLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code), UNUSED)

<P><STRONG><a name="[14d]"></a>SF_DAL_Dev_WaitReady_EMIINIT</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SF_DAL_Dev_WaitReady_EMIINIT &rArr; SFI_Dev_Command_Ext &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_UnlockBlock_MXIC
</UL>

<P><STRONG><a name="[62]"></a>SF_DAL_UnlockBlock_MXIC</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SF_DAL_UnlockBlock_MXIC &rArr; SF_DAL_Dev_WaitReady_EMIINIT &rArr; SFI_Dev_Command_Ext &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_WaitReady_EMIINIT
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_MXIC)
</UL>
<P><STRONG><a name="[60]"></a>SF_DAL_LockEraseBlkAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[5f]"></a>SF_DAL_ResumeErase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SF_DAL_ResumeErase &rArr; retrieve_MTD_lock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[5e]"></a>SF_DAL_SuspendErase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SF_DAL_SuspendErase &rArr; SF_DAL_Dev_Suspend &rArr; DelayAWhile_UST &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Suspend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_SET
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[14e]"></a>SF_DAL_FailCheck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SF_DAL_FailCheck &rArr; SF_DAL_Dev_ReadStatus &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[5d]"></a>SF_DAL_CheckDeviceReady</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SF_DAL_CheckDeviceReady &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FailCheck
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_MountDevice
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_EraseBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[5c]"></a>SF_DAL_NonBlockEraseBlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[14f]"></a>SF_DAL_CheckReadyAndResume</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SF_DAL_CheckReadyAndResume &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_is_cacheable (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FailCheck
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData
</UL>

<P><STRONG><a name="[5b]"></a>SF_DAL_ProgramData</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SF_DAL_ProgramData &rArr; SF_DAL_CheckReadyAndResume &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_WriteEnable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write_C1A4
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_GPRAM_Write_C1A3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[152]"></a>SF_DAL_Dev_EraseBlock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SF_DAL_Dev_EraseBlock &rArr; SF_DAL_Dev_WriteEnable &rArr; SF_DAL_Dev_Command &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_WriteEnable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_CommandAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_EraseBlock
</UL>

<P><STRONG><a name="[5a]"></a>SF_DAL_EraseBlock</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SF_DAL_EraseBlock &rArr; SF_DAL_CheckDeviceReady &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_BlockSize (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_EraseBlock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[58]"></a>SF_DAL_ShutDown</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SF_DAL_ShutDown &rArr; retrieve_MTD_lock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[57]"></a>SF_DAL_MountDevice</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SF_DAL_MountDevice &rArr; SF_DAL_CheckDeviceReady &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[154]"></a>SF_DAL_Dev_Command_Ext</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SF_DAL_Dev_Command_Ext &rArr; SFI_Dev_Command_Ext &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadID
</UL>

<P><STRONG><a name="[155]"></a>SF_DAL_Dev_ReadID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SF_DAL_Dev_ReadID &rArr; SF_DAL_Dev_Command_Ext &rArr; SFI_Dev_Command_Ext &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Driver (via Veneer)
</UL>

<P><STRONG><a name="[156]"></a>CommonFault_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, exception_handler.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[10c]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HardFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[10d]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MemManage_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[10e]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BusFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[10f]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UsageFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[111]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DebugMon_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[117]"></a>exception_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, exception_handler.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = exception_init &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>

<P><STRONG><a name="[158]"></a>hal_cache_invalidate_all_cache_lines</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_cache.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_cache_invalidate_all_cache_lines
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init (via Veneer)
</UL>

<P><STRONG><a name="[151]"></a>hal_cache_invalidate_one_cache_line</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_cache.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_cache_invalidate_one_cache_line
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume (via Veneer)
</UL>

<P><STRONG><a name="[159]"></a>hal_cache_invalidate_multiple_cache_lines</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_cache.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line
</UL>

<P><STRONG><a name="[15a]"></a>hal_cache_flush_one_cache_line</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_cache.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines
</UL>

<P><STRONG><a name="[15b]"></a>hal_cache_flush_multiple_cache_lines</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_cache.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line
</UL>

<P><STRONG><a name="[15c]"></a>hal_cache_flush_all_cache_lines</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_cache.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>

<P><STRONG><a name="[164]"></a>__EMI_GetSR</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_setEMI
</UL>

<P><STRONG><a name="[161]"></a>__EMI_SetSR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_PowerOn_Init
</UL>

<P><STRONG><a name="[163]"></a>__EMI_SetRegValfromCMCP</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_setEMI
</UL>

<P><STRONG><a name="[166]"></a>__EMI_EnableBandwidthLimiter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_setAdvEMI
</UL>

<P><STRONG><a name="[15e]"></a>TestCase_MBIST</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_DataAutoTrackingMbistTest
</UL>

<P><STRONG><a name="[15d]"></a>__EMI_DataAutoTrackingMbistTest</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCase_MBIST
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_EnableDataAutoTracking
</UL>

<P><STRONG><a name="[15f]"></a>__EMI_EnableDataAutoTracking</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_DataAutoTrackingMbistTest
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_setAdvEMI
</UL>

<P><STRONG><a name="[160]"></a>EMI_PowerOn_Init</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_SetSR
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_setEMI
</UL>

<P><STRONG><a name="[162]"></a>custom_setEMI</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_PowerOn_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_SetRegValfromCMCP
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_GetSR
</UL>

<P><STRONG><a name="[165]"></a>custom_setAdvEMI</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_EnableDataAutoTracking
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EMI_EnableBandwidthLimiter
</UL>

<P><STRONG><a name="[16a]"></a>EMI_Setting_Save</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_psram_half_sleep_enter
</UL>

<P><STRONG><a name="[168]"></a>EMI_Setting_restore</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_psram_half_sleep_exit
</UL>

<P><STRONG><a name="[167]"></a>mtk_psram_half_sleep_exit</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Setting_restore
</UL>

<P><STRONG><a name="[169]"></a>mtk_psram_half_sleep_enter</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, hal_emi.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Setting_Save
</UL>

<P><STRONG><a name="[18a]"></a>EMI_DynamicClockSwitch</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hal_emi.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMI_DynamicClockSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_suspend_op
</UL>

<P><STRONG><a name="[189]"></a>emi_mask_master</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
</UL>

<P><STRONG><a name="[18b]"></a>emi_unmask_master</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_emi.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
</UL>

<P><STRONG><a name="[12f]"></a>SFI_MacEnable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_flash_mtd_common.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = SFI_MacEnable &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_CommandAddress (via Veneer)
</UL>

<P><STRONG><a name="[16c]"></a>SFI_MacLeave</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady
</UL>

<P><STRONG><a name="[16b]"></a>SFI_MacTrigger</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady
</UL>

<P><STRONG><a name="[130]"></a>SFI_MacWaitReady</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_flash_mtd_common.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacTrigger
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacLeave
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command_Ext (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_CommandAddress (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>SFI_Dev_Command</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_flash_mtd_common.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFI_Dev_Command &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacWaitReady
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_UnlockBlock_MXIC (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Suspend (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_Leave_DPD
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_Enter_DPD (via Veneer)
</UL>

<P><STRONG><a name="[16d]"></a>SF_DAL_DEV_Leave_DPD</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_flash_mtd_common.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_Dev_Command
</UL>

<P><STRONG><a name="[16e]"></a>SF_DAL_DEV_SWITCH_TO_LOW_FQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.tcm_code))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_suspend_op
</UL>

<P><STRONG><a name="[170]"></a>SF_DAL_DEV_SWITCH_TO_HIGH_FQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_flash_mtd_common.o(.tcm_code))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
</UL>

<P><STRONG><a name="[171]"></a>hal_gpt_get_free_run_count</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hal_gpt.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_gpt_get_free_run_count &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_start_free_run_timer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_current_count
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_count_to_us
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task (via Veneer)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_reset (via Veneer)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_send_command (via Veneer)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_command_ready (via Veneer)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_card_not_busy (via Veneer)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_command_ready (via Veneer)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_card_not_busy (via Veneer)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_get_hal_gpt_time (via Veneer)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_driver_debug_lock_sleep_timelog (via Veneer)
</UL>

<P><STRONG><a name="[5c2]"></a>hal_gpt_get_duration_count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpt.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_reset (via Veneer)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_send_command (via Veneer)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_command_ready (via Veneer)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_card_not_busy (via Veneer)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_command_ready (via Veneer)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_card_not_busy (via Veneer)
</UL>

<P><STRONG><a name="[175]"></a>hal_gpt_delay_ms</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_gpt.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpt_delay_ms &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_start_free_run_timer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_delay_time
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_convert_ms_to_32k_count
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_set_output_clock (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
</UL>

<P><STRONG><a name="[12a]"></a>hal_gpt_delay_us</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_gpt.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_start_free_run_timer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_delay_time
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_us_to_count
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_debounce_time (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ust_busy_wait (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_Leave_DPD
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_Enter_DPD (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayAWhile_UST (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385 (via Veneer)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_scxo_mode (via Veneer)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lpd_init (via Veneer)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_measure_clock (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_change_bit_verified
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_enable_op
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_topsm_mtcmos_control
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_lfosc_lfosc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_mpll_mpll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_mpll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_freq_meter
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all
</UL>

<P><STRONG><a name="[17f]"></a>gpt_calibrate_algorithm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpt_calibrate_algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_us_to_count
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_count_to_us
</UL>

<P><STRONG><a name="[173]"></a>gpt_current_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[176]"></a>gpt_convert_ms_to_32k_count</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
</UL>

<P><STRONG><a name="[179]"></a>gpt_get_lfosc_clock</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpt_get_lfosc_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_clk_use_lfosc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_freq_lfosc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_us_to_count
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_count_to_us
</UL>

<P><STRONG><a name="[17c]"></a>gpt_open_clock_source</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_start_free_run_timer
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init (via Veneer)
</UL>

<P><STRONG><a name="[178]"></a>gpt_clock_calibrate_us_to_count</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpt_clock_calibrate_us_to_count &rArr; gpt_get_lfosc_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_clk_use_lfosc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_lfosc_clock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_calibrate_algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
</UL>

<P><STRONG><a name="[174]"></a>gpt_clock_calibrate_count_to_us</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpt_clock_calibrate_count_to_us &rArr; gpt_get_lfosc_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_clk_use_lfosc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_lfosc_clock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_calibrate_algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[172]"></a>gpt_start_free_run_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_open_clock_source
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[177]"></a>gpt_delay_time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_gpt_internal.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
</UL>

<P><STRONG><a name="[114]"></a>isrC_main</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_nvic.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = isrC_main &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[139]"></a>save_and_set_interrupt_mask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_nvic_internal.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask (via Veneer)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_init (via Veneer)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_deinit (via Veneer)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_init (via Veneer)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_trigger_mode (via Veneer)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma (via Veneer)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma (via Veneer)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback (via Veneer)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_register_callback (via Veneer)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init (via Veneer)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_deinit (via Veneer)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_all_cache_lines
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_target_frequency (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask (via Veneer)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_debounce_time (via Veneer)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_unmask_wakeup_source (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_mask_wakeup_source (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command_Ext (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ShutDown (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_EraseBlock (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_SuspendErase (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume (via Veneer)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Suspend (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_SET (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value_mt6385 (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value_mt6385 (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_handler (via Veneer)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start (via Veneer)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_deinit (via Veneer)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler (via Veneer)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit (via Veneer)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_dcxo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_suspend_op
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_force_disable_op
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_disable_op
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_enable_op
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_mux_request_pll
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_mux_sel
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_change_bit_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_force_on_clear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_force_on_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_div_disable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_div_enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_src_clear
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_src_set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_req_restore_op
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_req_save_release_op
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_disable_op
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_enable_op
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_lfosc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_lfosc_lfosc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_mpll_mpll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_mpll
</UL>

<P><STRONG><a name="[13a]"></a>restore_interrupt_mask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_nvic_internal.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask (via Veneer)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_init (via Veneer)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_deinit (via Veneer)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_init (via Veneer)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_trigger_mode (via Veneer)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma (via Veneer)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma (via Veneer)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback (via Veneer)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_register_callback (via Veneer)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init (via Veneer)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_deinit (via Veneer)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_all_cache_lines
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_target_frequency (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask (via Veneer)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_debounce_time (via Veneer)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_unmask_wakeup_source (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_mask_wakeup_source (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command_Ext (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ShutDown (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_EraseBlock (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_SuspendErase (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Resume (via Veneer)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Command (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_Suspend (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_SET (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadStatus (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value_mt6385 (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value_mt6385 (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_handler (via Veneer)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start (via Veneer)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_deinit (via Veneer)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler (via Veneer)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit (via Veneer)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_dcxo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_suspend_op
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_force_disable_op
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_disable_op
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_enable_op
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_mux_request_pll
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_mux_sel
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_change_bit_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_force_on_clear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_force_on_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_div_disable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_div_enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_src_clear
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_src_set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_req_restore_op
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_req_save_release_op
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_disable_op
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_pll_enable_op
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_lfosc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_lfosc_lfosc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_mpll_mpll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_mpll
</UL>

<P><STRONG><a name="[17a]"></a>is_clk_use_lfosc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock_internal.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_us_to_count
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_calibrate_count_to_us
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_lfosc_clock
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump_info
</UL>

<P><STRONG><a name="[685]"></a>is_clk_use_mpll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock_internal.o(.tcm_code), UNUSED)

<P><STRONG><a name="[181]"></a>cm_bus_clk_208m</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cm_bus_clk_208m &rArr; cm_bus_clk_208m_mpll_hfosc &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
</UL>

<P><STRONG><a name="[183]"></a>cm_bus_clk_104m</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cm_bus_clk_104m &rArr; cm_bus_clk_104m_hfosc_hfosc &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
</UL>

<P><STRONG><a name="[185]"></a>cm_bus_clk_26m</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cm_bus_clk_26m &rArr; cm_bus_clk_26m_dcxo_dcxo &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_resume_op
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_suspend_op
</UL>

<P><STRONG><a name="[187]"></a>peri_clk_26m</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock_internal.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peri_clk_26m &rArr; peri_26m_dcxo
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_dcxo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
</UL>

<P><STRONG><a name="[a2]"></a>dvfs_vcore_switch_frequency</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, hal_dvfs_internal_vcore.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dvfs_vcore_switch_frequency &rArr; cm_bus_clk_104m &rArr; cm_bus_clk_104m_hfosc_hfosc &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_get_mcu_clock_frequency (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_unmask_master
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_mask_master
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_DynamicClockSwitch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_SWITCH_TO_HIGH_FQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_SWITCH_TO_LOW_FQ
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_dvfs_internal_vcore.o(i.dvfs_vcore_domain_initialize)
</UL>
<P><STRONG><a name="[1aa]"></a>pll_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
</UL>

<P><STRONG><a name="[686]"></a>hal_clock_enable_upll</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[687]"></a>hal_clock_disable_upll</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[688]"></a>hal_clock_enable_mpll</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[689]"></a>hal_clock_disable_mpll</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[1a8]"></a>clock_src_sel_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
</UL>

<P><STRONG><a name="[68a]"></a>clock_source_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[1a1]"></a>clock_source_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_dcxo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_lfosc
</UL>

<P><STRONG><a name="[68b]"></a>clock_div_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[68c]"></a>clock_div_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[68d]"></a>clock_change_bit_set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[18f]"></a>clock_change_bit_verified_all</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_lfosc_lfosc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_mpll_mpll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_mpll
</UL>

<P><STRONG><a name="[16f]"></a>clock_mux_sel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_SWITCH_TO_HIGH_FQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_SWITCH_TO_LOW_FQ
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_set_output_clock (via Veneer)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_dcxo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_26m_lfosc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_lfosc_lfosc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_mpll_mpll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_mpll
</UL>

<P><STRONG><a name="[68e]"></a>clock_mux_get_state</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[1a9]"></a>clock_mux_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_mux_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
</UL>

<P><STRONG><a name="[38]"></a>general_clock_get_state_op</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[1a7]"></a>cg_init</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
</UL>

<P><STRONG><a name="[192]"></a>hal_clock_force_disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_to_clock
</UL>

<P><STRONG><a name="[17e]"></a>hal_clock_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hal_clock_enable_
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_open_clock_source
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_clock (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_polling (via Veneer)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_init (via Veneer)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_init (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_pre_on
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_clock (via Veneer)
</UL>

<P><STRONG><a name="[195]"></a>hal_clock_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_clock_disable &rArr; _hal_clock_disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hal_clock_disable_
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable_clock (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_polling (via Veneer)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_init (via Veneer)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit (via Veneer)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_deinit (via Veneer)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_clock (via Veneer)
</UL>

<P><STRONG><a name="[17d]"></a>hal_clock_is_enabled</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_clock_is_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_to_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_open_clock_source
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_clock (via Veneer)
</UL>

<P><STRONG><a name="[197]"></a>clock_pre_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable
</UL>

<P><STRONG><a name="[198]"></a>clock_all_on</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hal_clock_enable_
</UL>

<P><STRONG><a name="[199]"></a>clock_all_off</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hal_clock_disable_
</UL>

<P><STRONG><a name="[19a]"></a>clock_get_freq_meter</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clock_get_freq_meter &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_monitor
</UL>

<P><STRONG><a name="[19c]"></a>freq_monitor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = freq_monitor &rArr; clock_get_freq_meter &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_freq_meter
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_get_mcu_clock_frequency (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump_info
</UL>

<P><STRONG><a name="[19d]"></a>cm_bus_clk_208m_mpll_mpll</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all
</UL>

<P><STRONG><a name="[19e]"></a>cm_bus_clk_104m_mpll_mpll</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all
</UL>

<P><STRONG><a name="[182]"></a>cm_bus_clk_208m_mpll_hfosc</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cm_bus_clk_208m_mpll_hfosc &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m
</UL>

<P><STRONG><a name="[184]"></a>cm_bus_clk_104m_hfosc_hfosc</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cm_bus_clk_104m_hfosc_hfosc &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_clk_use_lfosc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m
</UL>

<P><STRONG><a name="[19f]"></a>cm_bus_clk_26m_lfosc_lfosc</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all
</UL>

<P><STRONG><a name="[1a0]"></a>peri_26m_lfosc</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_clear
</UL>

<P><STRONG><a name="[186]"></a>cm_bus_clk_26m_dcxo_dcxo</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cm_bus_clk_26m_dcxo_dcxo &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_reset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m
</UL>

<P><STRONG><a name="[188]"></a>peri_26m_dcxo</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peri_26m_dcxo
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_source_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_clk_26m
</UL>

<P><STRONG><a name="[68f]"></a>clock_suspend</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[690]"></a>clock_resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[691]"></a>lfosc_cali_ft_set_offset</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code), UNUSED)

<P><STRONG><a name="[1a2]"></a>clock_dump_log</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump_info
</UL>

<P><STRONG><a name="[1a4]"></a>clock_dump_info</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, hal_clock.o(.tcm_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_freq_peri_bus (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_clk_use_lfosc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump_log
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_monitor
</UL>

<P><STRONG><a name="[1a6]"></a>clk_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clk_init &rArr; clock_get_freq_meter &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peri_clk_26m
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_api_internal_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_freq_meter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cg_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_src_sel_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_init
</UL>

<P><STRONG><a name="[1ab]"></a>hal_clock_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_clock_init &rArr; clk_init &rArr; clock_get_freq_meter &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init (via Veneer)
</UL>

<P><STRONG><a name="[1ac]"></a>sys_topsm_mtcmos_control</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, hal_sys_topsm.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_topsm_mtcmos_control &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_unlock_BT_MTCMOS (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_lock_BT_MTCMOS (via Veneer)
</UL>

<P><STRONG><a name="[116]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_mt2523.o(.reset_handler))

<P><STRONG><a name="[51]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.reset_handler)
</UL>
<P><STRONG><a name="[692]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1ad]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ca]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[693]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[694]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[695]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[696]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[697]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[658]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[657]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[646]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_freq_meter (via Veneer)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[416]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_generate_random
</UL>

<P><STRONG><a name="[698]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[699]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[69a]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[69b]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_read_sentence
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_by_pmtk_process
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_nmea_data_process
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_get_location
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_app_event_callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_relay
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_send_cmd
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_event
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_a2dp_streaming_data_omit
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_data
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_if_gap_dev_name_callback
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_advertise_data_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRawDiskData
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_title
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_sender
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_number
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_content
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_action_name
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_action_id
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_service_read_characteristic_send
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_write_data
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_write_evt_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_evt_handler
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_read_file
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_read_spp_ring_data
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_ext_buffer
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_remote_vern
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_util_info
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download_combine_command
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr_rx_allocate_packet
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_timer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_gap_get_local_configuration
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_gnss_hour
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_advertise_data_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pin_with_pullsel
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_s1_buck_mt6385
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_parse_xml_callback
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_recv
</UL>

<P><STRONG><a name="[253]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_evt_handler
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_read_spp_ring_data
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
</UL>

<P><STRONG><a name="[41d]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memcpy
</UL>

<P><STRONG><a name="[41e]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memmove
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[69c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_app_event_callback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_read_spp_ring_data
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_recv_parse_xml_callback
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_data
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_free_channel
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_migration
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_data_item_checksum
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_timer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_periodic_timer_handle_func
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_on_off_timer_handle_func
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_nmea_data_process
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_init
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_request_download
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_reply_int_value
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_pmtk_cmd_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_domain_initialize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_Construct_RegionInfo
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_new_parser
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_deinit_data
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_handle_new_msg
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_title
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_sender
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_number
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_group_id
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_content
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_action_name
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_action_id
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_parse_xml_callback
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_write_char_callback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_read_char_cccd_callback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_read_char_callback
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_service_read_characteristic_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_data
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_on_ble_evt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_evt_handler
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_consume_hci_log
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_time_consuming_to_hci_log
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_cmd_hdlr_test
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_deinit
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_rsp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_prepare_write_rsp
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_service_search
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_free_connection
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_allocate_connection
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_encrypt
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_attribute_search
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_context_op_callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_free_session
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_allocate_session
</UL>

<P><STRONG><a name="[69e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memset
</UL>

<P><STRONG><a name="[3eb]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_action_name
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
</UL>

<P><STRONG><a name="[28c]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_process_pmtk_response
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_nmea_data_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_pmtk_cmd_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_reset_end_position
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_valid_entity_start
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_min_entity_mark
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_filter_comment_pi
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
</UL>

<P><STRONG><a name="[3ec]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_group_id
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_replace_entity
</UL>

<P><STRONG><a name="[211]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_set_preport_and_fix_period
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_nmea_data_process
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_request_download
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_reply_int_value
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data_int
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_pmtk_cmd_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_if_gap_dev_name_callback
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_advertise_data_init
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_save_content_data
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_filter_comment_pi
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_input_command_handler
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_number
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_cmd_hdlr_test
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_strcat_ex
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_recv_parse_xml_callback
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_reqv_cmd_hldr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
</UL>

<P><STRONG><a name="[225]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_register_domain
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_subtype
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_page_indx
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_category
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_action
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_elem_start_hdlr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_elem_end_hdlr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_hdlr
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_replace_entity
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_find_cm4_handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_check_duplicate_cm4_handler
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_number
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback_int
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data_header
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_data_item_by_name
</UL>

<P><STRONG><a name="[204]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_find_link_key_edr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memcmp
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_device_addr
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[66a]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_save_content_data
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
</UL>

<P><STRONG><a name="[213]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_pmtk_cmd_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_filter_comment_pi
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_cmd_hdlr_test
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback_int
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_header
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_data
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
</UL>

<P><STRONG><a name="[228]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd_helper
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_dispatch_cm4_general_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_remote_system
</UL>

<P><STRONG><a name="[1b5]"></a>strtok_r</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_extract_token
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[1b4]"></a>strtok</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok &rArr; strtok_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_cmd_hdlr_test
</UL>

<P><STRONG><a name="[1b6]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
</UL>

<P><STRONG><a name="[1b8]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1ba]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
</UL>

<P><STRONG><a name="[1be]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_by_pmtk_process
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_get_location
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_start
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_timestamp
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_page_number
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_page_indx
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_msgid
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_missed_call_count
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_appid
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_action_number
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_cmd_hdlr_test
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_remote_vern
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6a1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6a2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[56]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1b9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[1b7]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[53]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1bd]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[1bf]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[6a3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1c2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6a4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[6a5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6a6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>BT_MM_IS_TIMER_AVAILABLE</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_memory.o(i.BT_MM_IS_TIMER_AVAILABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BT_MM_IS_TIMER_AVAILABLE &rArr; bt_mm_is_fixed_size_available_by_type &rArr; bt_linknode_travel_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_is_fixed_size_available_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
</UL>

<P><STRONG><a name="[118]"></a>Bus_Fault_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, exception_handler.o(i.Bus_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bus_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler (via Veneer)
</UL>

<P><STRONG><a name="[153]"></a>CMEM_BlockSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_flash_combo_nor.o(i.CMEM_BlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMEM_BlockSize &rArr; CMEM_BlockSize_Internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_BlockSize_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_EraseBlock (via Veneer)
</UL>

<P><STRONG><a name="[1d0]"></a>CMEM_BlockSize_Internal</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_flash_combo_nor.o(i.CMEM_BlockSize_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMEM_BlockSize_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_NOR_Construct_RegionInfo_Internal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_BlockSize
</UL>

<P><STRONG><a name="[125]"></a>CMEM_CheckValidDeviceID</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, hal_flash_combo_init.o(i.CMEM_CheckValidDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMEM_CheckValidDeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Driver
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ReadID (via Veneer)
</UL>

<P><STRONG><a name="[1d8]"></a>CMEM_GetIDEntry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_flash_combo_init.o(i.CMEM_GetIDEntry))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_nor_list
</UL>

<P><STRONG><a name="[1d1]"></a>CMEM_Index</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hal_flash_combo_init.o(i.CMEM_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CMEM_Index &rArr; NOR_ReadID &rArr; SFI_Dev_Command_Ext &rArr; SFI_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ReadID (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_nor_list
</UL>

<P><STRONG><a name="[1d2]"></a>CMEM_Init_FullDriver</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, hal_flash_combo_nor.o(i.CMEM_Init_FullDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CMEM_Init_FullDriver &rArr; SF_DAL_Init_Driver &rArr; SF_DAL_Init_Vendor &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Driver
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_Get_FlashSizeFromBankInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_Construct_RegionInfo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_nor_list
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_NOR_Init
</UL>

<P><STRONG><a name="[1d3]"></a>CMEM_Init_nor_list</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_flash_combo_nor.o(i.CMEM_Init_nor_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CMEM_Init_nor_list &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Index
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_GetIDEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver
</UL>

<P><STRONG><a name="[1d9]"></a>CMEM_NOR_Construct_RegionInfo_Internal</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hal_flash_combo_nor.o(i.CMEM_NOR_Construct_RegionInfo_Internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMEM_NOR_Construct_RegionInfo_Internal &rArr; CMEM_BlockSize_Internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_BlockSize_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_Construct_RegionInfo
</UL>

<P><STRONG><a name="[4f]"></a>CachePreInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_mt2523.o(i.CachePreInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.reset_handler)
</UL>
<P><STRONG><a name="[1da]"></a>Custom_NOR_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_flash_custom.o(i.Custom_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Custom_NOR_Init &rArr; CMEM_Init_FullDriver &rArr; SF_DAL_Init_Driver &rArr; SF_DAL_Init_Vendor &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_init
</UL>

<P><STRONG><a name="[119]"></a>Debug_Monitor_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, exception_handler.o(i.Debug_Monitor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Debug_Monitor_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler (via Veneer)
</UL>

<P><STRONG><a name="[3e5]"></a>FindNodeByIndex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bt_notify_list.o(i.FindNodeByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
</UL>

<P><STRONG><a name="[1db]"></a>FreeFDMLock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_flash_disk.o(i.FreeFDMLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FreeFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRawDiskData
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseRawDiskBlock
</UL>

<P><STRONG><a name="[1dc]"></a>GetFDMLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_flash_disk.o(i.GetFDMLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_FDM_lock
</UL>

<P><STRONG><a name="[11a]"></a>Hard_Fault_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, exception_handler.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hard_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler (via Veneer)
</UL>

<P><STRONG><a name="[3e4]"></a>Length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_notify_list.o(i.Length))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
</UL>

<P><STRONG><a name="[11b]"></a>MemManage_Fault_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, exception_handler.o(i.MemManage_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemManage_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler (via Veneer)
</UL>

<P><STRONG><a name="[10b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exception_handler.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e1]"></a>NOR_BlockIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_flash_disk.o(i.NOR_BlockIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NOR_BlockIndex &rArr; BlockIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockIndex (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>

<P><STRONG><a name="[1d7]"></a>NOR_Construct_RegionInfo</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_flash_combo_nor.o(i.NOR_Construct_RegionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NOR_Construct_RegionInfo &rArr; CMEM_NOR_Construct_RegionInfo_Internal &rArr; CMEM_BlockSize_Internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_NOR_Construct_RegionInfo_Internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver
</UL>

<P><STRONG><a name="[1d6]"></a>NOR_Get_FlashSizeFromBankInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_flash_combo_nor.o(i.NOR_Get_FlashSizeFromBankInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NOR_Get_FlashSizeFromBankInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver
</UL>

<P><STRONG><a name="[1e4]"></a>NOR_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_flash_disk.o(i.NOR_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NOR_init &rArr; Custom_NOR_Init &rArr; CMEM_Init_FullDriver &rArr; SF_DAL_Init_Driver &rArr; SF_DAL_Init_Vendor &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_NOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init
</UL>

<P><STRONG><a name="[1e5]"></a>PMIC_VCORE_VOSEL_CONFIG</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, hal_pmu_internal.o(i.PMIC_VCORE_VOSEL_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PMIC_VCORE_VOSEL_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vrc_key_mt6385
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage_mt6385
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_pmu_audio_lock_voltage
</UL>

<P><STRONG><a name="[1e9]"></a>PMIC_VR_CONTROL</STRONG> (Thumb, 598 bytes, Stack size 16 bytes, hal_pmu_internal.o(i.PMIC_VR_CONTROL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PMIC_VR_CONTROL &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_vbt_ldo_mt6385
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_power_mode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_pmu_ctrl_power
</UL>

<P><STRONG><a name="[1eb]"></a>PMIC_VR_PSI_PMOD_CONFIG</STRONG> (Thumb, 862 bytes, Stack size 24 bytes, hal_pmu_internal.o(i.PMIC_VR_PSI_PMOD_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PMIC_VR_PSI_PMOD_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vrc_key_mt6385
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_power_mode
</UL>

<P><STRONG><a name="[1ec]"></a>PMIC_VR_SLEEP_WKUP_CONFIG</STRONG> (Thumb, 790 bytes, Stack size 32 bytes, hal_pmu_internal.o(i.PMIC_VR_SLEEP_WKUP_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PMIC_VR_SLEEP_WKUP_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vrc_key_mt6385
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_vbt_ldo_mt6385
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_va28_ldo_mt6385
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_power_mode
</UL>

<P><STRONG><a name="[5ed]"></a>PSI_HP_RUN_AT_LP</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, hal_sleep_driver.o(i.PSI_HP_RUN_AT_LP))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage_mt6385
</UL>

<P><STRONG><a name="[5ec]"></a>PSI_LP_RUN_AT_HP</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, hal_sleep_driver.o(i.PSI_LP_RUN_AT_HP))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage_mt6385
</UL>

<P><STRONG><a name="[61]"></a>SF_DAL_IOCtrl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(i.SF_DAL_IOCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SF_DAL_IOCtrl &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_flash_mtd_dal.o(i.SF_DAL_Init_Common)
</UL>
<P><STRONG><a name="[1ed]"></a>SF_DAL_Init_Common</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(i.SF_DAL_Init_Common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SF_DAL_Init_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_get_NORFLASH_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Driver
</UL>

<P><STRONG><a name="[1d5]"></a>SF_DAL_Init_Driver</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hal_flash_mtd_dal.o(i.SF_DAL_Init_Driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SF_DAL_Init_Driver &rArr; SF_DAL_Init_Vendor &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_CheckValidDeviceID
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Vendor
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Common
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Dev_ReadID (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver
</UL>

<P><STRONG><a name="[1f0]"></a>SF_DAL_Init_MXIC</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(i.SF_DAL_Init_MXIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SF_DAL_Init_MXIC
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Vendor
</UL>

<P><STRONG><a name="[1ef]"></a>SF_DAL_Init_Vendor</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(i.SF_DAL_Init_Vendor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SF_DAL_Init_Vendor &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_WINBOND
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_MXIC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Driver
</UL>

<P><STRONG><a name="[1f1]"></a>SF_DAL_Init_WINBOND</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hal_flash_mtd_dal.o(i.SF_DAL_Init_WINBOND))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SF_DAL_Init_WINBOND
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Vendor
</UL>

<P><STRONG><a name="[5b4]"></a>SysInitStatus_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_mt2523.o(i.SysInitStatus_Set))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>SysTick_Set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_mt2523.o(i.SysTick_Set))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency (via Veneer)
</UL>

<P><STRONG><a name="[18c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system_mt2523.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_domain_initialize
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_mt2523.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt2523.o(.reset_handler)
</UL>
<P><STRONG><a name="[11c]"></a>Usage_Fault_Handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, exception_handler.o(i.Usage_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Usage_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler (via Veneer)
</UL>

<P><STRONG><a name="[1f2]"></a>Wrap_D2D_I2C_Read</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hal_pmu.o(i.Wrap_D2D_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Wrap_D2D_I2C_Read &rArr; pmic_i2c_send_to_receive_polling &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value_mt6385
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value_mt6385
</UL>

<P><STRONG><a name="[1f4]"></a>Wrap_D2D_I2C_Write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_pmu.o(i.Wrap_D2D_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Wrap_D2D_I2C_Write &rArr; pmic_i2c_send_polling &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value_mt6385
</UL>

<P><STRONG><a name="[1f6]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a7]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[339]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_g2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f6
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f5
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f4
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_c1
</UL>

<P><STRONG><a name="[6a8]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[6a9]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[1f8]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6aa]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[157]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cm4_topsm_register_suspend_cb
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cm4_topsm_register_resume_cb
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_log_message
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_normal_log
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_dump
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_create
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump_data
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_buffer_dump
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_end
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_begin
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_debug_dump
</UL>

<P><STRONG><a name="[6ab]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[6ac]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1f9]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6ad]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[210]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_bd_addr2str
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_addr2str
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_consume_hci_log
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_time_consuming_to_hci_log
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_cmd_hdlr_test
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_data_item_by_name
</UL>

<P><STRONG><a name="[6ae]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[6af]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1fa]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b0]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[240]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_set_preport_and_fix_period
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_request_download
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_reply_int_value
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data_int
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_create_task
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
</UL>

<P><STRONG><a name="[6b1]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6b2]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1fb]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b3]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[6b4]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[6b5]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[2c8]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump
</UL>

<P><STRONG><a name="[1fc]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b6]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[6b7]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[6b8]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[28b]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exception_handler.o(i.__aeabi_assert))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init_packet
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init_control_block
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_exchange_mtu_req
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_load
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_is_fixed_size_available_by_type
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_append_packet
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_pending_operation
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_request
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_auth_operation
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_stop_timer
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_rsp
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_req
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_destroy
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_destroy_conn_ind_buff
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_proc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_misc_callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_trigger
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_free_connection
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_data
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_server_id
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_max_frame_size
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_credit
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_bd_address
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_deinit_channel
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_hold_rx_packet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_notify_send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_connect
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_spp_callback
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_rx_oom
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_infomation_rsp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_echo_rsp
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_rsp
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_req
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_rsp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_req
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_rsp
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_req
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_tx_mtu
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_channel
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_bd_addr_by_channel
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect_rsp
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_command_reject
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_fail
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_supervision_timeout
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_send
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_proc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_flush_timeout
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_rx_proc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_tx
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_nocp_callback
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send_with_auto_flush
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_le_send
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_get_max_acl_packet_length_by_connection_type
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_get_acl_credit_counter_by_connection_type
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_context_op_callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_callback
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_free_channel
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_insert_channel
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_if_channel_exist
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_credit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_connect
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_send_credit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_disconnect
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_command_reject
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_oom_handler
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_packet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_callback
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_close
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr_rx_allocate_packet
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_driver_recv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_timeout_handler
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_free_session
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_close
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_notify_user_and_close_channel
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NSC_command
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_print_method
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_user_input_ind
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_send
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_receive
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_find_next_dist
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_gen_method
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_dist_method
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_free_channel
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[6b9]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[6ba]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6bb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[128]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, exception_handler.o(i.abort))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_create
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_region_configure
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_config
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_domain_initialize
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_target_frequency
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_nor_list
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMEM_Init_FullDriver
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd_domain_dma_interrupt_hander
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Vendor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_IOCtrl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_EraseBlock (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_ProgramData (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SuspendOperation (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ResumeOperation (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckReady (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_MTD_lock (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FreeDevLock (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_MacEnable (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_BlankCheck (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayAWhile_UST (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapWindow (via Veneer)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rawdisk_error_code
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFDMLock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_deinit
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_configure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ao_domain_dma_interrupt_hander
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handler
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_send_space
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_register_domain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_voltage
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_pairing_config
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_local_config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_bonding_info
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_local_configuration
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;general_clock_change_bit_verified (via Veneer)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_number
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_check_default_setting
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_change_bit_verified_all (via Veneer)
</UL>

<P><STRONG><a name="[20a]"></a>addNode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bt_notify_list.o(i.addNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = addNode &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
</UL>

<P><STRONG><a name="[d3]"></a>ao_domain_dma_interrupt_hander</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, hal_pdma_internal.o(i.ao_domain_dma_interrupt_hander))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ao_domain_dma_interrupt_hander
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pdma_internal.o(i.vdma_init)
</UL>
<P><STRONG><a name="[20c]"></a>app_register_sdp_record</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_common.o(i.app_register_sdp_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_register_sdp_record &rArr; bt_callback_manager_add_sdp_customized_record &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_callback_manager_add_sdp_customized_record
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_create_task
</UL>

<P><STRONG><a name="[20e]"></a>at_command_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, at_command.o(i.at_command_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = at_command_init &rArr; atci_register_handler &rArr; atci_local_check_duplicate_cm4_handler &rArr; atci_local_find_cm4_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_register_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_init_int
</UL>

<P><STRONG><a name="[246]"></a>atci_check_startup_finish</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, atci_main.o(i.atci_check_startup_finish))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_data_callback
</UL>

<P><STRONG><a name="[25]"></a>atci_cmd_hdlr_test</STRONG> (Thumb, 364 bytes, Stack size 1056 bytes, at_command.o(i.atci_cmd_hdlr_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = atci_cmd_hdlr_test &rArr; atci_send_response &rArr; atci_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command.o(.data)
</UL>
<P><STRONG><a name="[214]"></a>atci_data_processing_for_deinit</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, atci_main.o(i.atci_data_processing_for_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = atci_data_processing_for_deinit &rArr; atci_send_data &rArr; atci_mem_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_receive_no_wait
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_get_item_num
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_deinit
</UL>

<P><STRONG><a name="[21a]"></a>atci_deinit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, atci_main.o(i.atci_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atci_deinit &rArr; atci_local_deinit &rArr; atci_data_processing_for_deinit &rArr; atci_send_data &rArr; atci_mem_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_port_deinit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
</UL>

<P><STRONG><a name="[21d]"></a>atci_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, atci_main.o(i.atci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = atci_init &rArr; atci_serial_port_init &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>atci_init_int</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, atci_main.o(i.atci_init_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = atci_init_int &rArr; at_command_init &rArr; atci_register_handler &rArr; atci_local_check_duplicate_cm4_handler &rArr; atci_local_find_cm4_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_command_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_data_callback
</UL>

<P><STRONG><a name="[221]"></a>atci_input_command_handler</STRONG> (Thumb, 194 bytes, Stack size 1080 bytes, atci_handler.o(i.atci_input_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = atci_input_command_handler &rArr; atci_send_response &rArr; atci_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_parse_input_at_cmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_dispatch_cm4_general_handler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
</UL>

<P><STRONG><a name="[21b]"></a>atci_local_deinit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, atci_main.o(i.atci_local_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atci_local_deinit &rArr; atci_data_processing_for_deinit &rArr; atci_send_data &rArr; atci_mem_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_data_processing_for_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_deinit
</UL>

<P><STRONG><a name="[226]"></a>atci_local_find_cm4_handler</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, atci_handler.o(i.atci_local_find_cm4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atci_local_find_cm4_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_unlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_lock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_check_duplicate_cm4_handler
</UL>

<P><STRONG><a name="[21e]"></a>atci_local_init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, atci_main.o(i.atci_local_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atci_local_init &rArr; atci_semaphore_create &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_give
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_init
</UL>

<P><STRONG><a name="[22f]"></a>atci_mem_alloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atci_adapter.o(i.atci_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atci_mem_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
</UL>

<P><STRONG><a name="[218]"></a>atci_mem_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, atci_adapter.o(i.atci_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = atci_mem_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_data_processing_for_deinit
</UL>

<P><STRONG><a name="[227]"></a>atci_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, atci_adapter.o(i.atci_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atci_mutex_lock &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_register_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_find_cm4_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_dispatch_cm4_general_handler
</UL>

<P><STRONG><a name="[229]"></a>atci_mutex_unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, atci_adapter.o(i.atci_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_register_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_find_cm4_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_dispatch_cm4_general_handler
</UL>

<P><STRONG><a name="[21c]"></a>atci_port_deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atci_main.o(i.atci_port_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atci_port_deinit &rArr; serial_port_close
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_deinit
</UL>

<P><STRONG><a name="[235]"></a>atci_port_read_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, atci_main.o(i.atci_port_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atci_port_read_data &rArr; atci_serial_port_read_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
</UL>

<P><STRONG><a name="[237]"></a>atci_port_send_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, atci_main.o(i.atci_port_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atci_port_send_data &rArr; atci_serial_port_send_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data_int
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
</UL>

<P><STRONG><a name="[219]"></a>atci_processing</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, atci_main.o(i.atci_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352<LI>Call Chain = atci_processing &rArr; atci_read_data &rArr; atci_send_data &rArr; atci_mem_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_input_command_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_take
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_create
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_receive_no_wait
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_get_item_num
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_def_task
</UL>

<P><STRONG><a name="[22b]"></a>atci_queue_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atci_adapter.o(i.atci_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = atci_queue_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_init
</UL>

<P><STRONG><a name="[215]"></a>atci_queue_get_item_num</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, atci_adapter.o(i.atci_queue_get_item_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atci_queue_get_item_num &rArr; uxQueueMessagesWaiting &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_data_processing_for_deinit
</UL>

<P><STRONG><a name="[216]"></a>atci_queue_receive_no_wait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, atci_adapter.o(i.atci_queue_receive_no_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atci_queue_receive_no_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_data_processing_for_deinit
</UL>

<P><STRONG><a name="[23d]"></a>atci_queue_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, atci_adapter.o(i.atci_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atci_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_data_callback
</UL>

<P><STRONG><a name="[23a]"></a>atci_read_data</STRONG> (Thumb, 336 bytes, Stack size 3152 bytes, atci_main.o(i.atci_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296<LI>Call Chain = atci_read_data &rArr; atci_send_data &rArr; atci_mem_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_vaild_port_check
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data_int
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_port_read_data
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
</UL>

<P><STRONG><a name="[20f]"></a>atci_register_handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, atci_handler.o(i.atci_register_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atci_register_handler &rArr; atci_local_check_duplicate_cm4_handler &rArr; atci_local_find_cm4_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_check_duplicate_cm4_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_caculate_hash_value
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_unlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_atcmd_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_command_init
</UL>

<P><STRONG><a name="[22a]"></a>atci_semaphore_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, atci_adapter.o(i.atci_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = atci_semaphore_create &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_init
</UL>

<P><STRONG><a name="[22c]"></a>atci_semaphore_give</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atci_adapter.o(i.atci_semaphore_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atci_semaphore_give &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_data_callback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_init
</UL>

<P><STRONG><a name="[239]"></a>atci_semaphore_take</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, atci_adapter.o(i.atci_semaphore_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atci_semaphore_take &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
</UL>

<P><STRONG><a name="[217]"></a>atci_send_data</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, atci_main.o(i.atci_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = atci_send_data &rArr; atci_mem_alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_alloc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_vaild_port_check
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_port_send_data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_data_processing_for_deinit
</UL>

<P><STRONG><a name="[241]"></a>atci_send_data_int</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, atci_main.o(i.atci_send_data_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atci_send_data_int &rArr; atci_port_send_data &rArr; atci_serial_port_send_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_vaild_port_check
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_port_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
</UL>

<P><STRONG><a name="[212]"></a>atci_send_response</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, atci_handler.o(i.atci_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = atci_send_response &rArr; atci_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_process_flag
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_give
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_get_item_num
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_alloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_pmtk_cmd_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_input_command_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_cmd_hdlr_test
</UL>

<P><STRONG><a name="[67]"></a>atci_serial_port_data_callback</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, atci_main.o(i.atci_serial_port_data_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = atci_serial_port_data_callback &rArr; atci_init_int &rArr; at_command_init &rArr; atci_register_handler &rArr; atci_local_check_duplicate_cm4_handler &rArr; atci_local_find_cm4_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_give
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_init_int
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_check_startup_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atci_main.o(i.atci_serial_port_init)
</UL>
<P><STRONG><a name="[21f]"></a>atci_serial_port_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, atci_main.o(i.atci_serial_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = atci_serial_port_init &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_init_int
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_init
</UL>

<P><STRONG><a name="[236]"></a>atci_serial_port_read_data</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, atci_main.o(i.atci_serial_port_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atci_serial_port_read_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_port_read_data
</UL>

<P><STRONG><a name="[238]"></a>atci_serial_port_send_data</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atci_main.o(i.atci_serial_port_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atci_serial_port_send_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_port_send_data
</UL>

<P><STRONG><a name="[23f]"></a>atci_vaild_port_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atci_main.o(i.atci_vaild_port_check))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data_int
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_data
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_read_data
</UL>

<P><STRONG><a name="[24c]"></a>ble_app_common_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_app_common.o(i.ble_app_common_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_app_common_init &rArr; bt_callback_manager_register_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_callback_manager_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>ble_dogp_adp_init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, ble_dogp_adp_service.o(i.ble_dogp_adp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_dogp_adp_init &rArr; ble_dogp_event_callback_init &rArr; bt_callback_manager_register_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_service_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_event_callback_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_init
</UL>

<P><STRONG><a name="[251]"></a>ble_dogp_adp_on_ble_evt</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ble_dogp_adp_service.o(i.ble_dogp_adp_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_dogp_adp_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dogp_event_callback
</UL>

<P><STRONG><a name="[252]"></a>ble_dogp_adp_read_data</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ble_dogp_adp_service.o(i.ble_dogp_adp_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_dogp_adp_read_data &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
</UL>

<P><STRONG><a name="[3e1]"></a>ble_dogp_adp_set_remote_device_type</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_dogp_common.o(i.ble_dogp_adp_set_remote_device_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dogp_adp_set_remote_device_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
</UL>

<P><STRONG><a name="[255]"></a>ble_dogp_adp_update_connection_interval</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ble_dogp_common.o(i.ble_dogp_adp_update_connection_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ble_dogp_adp_update_connection_interval &rArr; ble_dogp_update_connection_interval &rArr; bt_gap_le_update_connection_parameter &rArr; bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_update_connection_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_write_data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_write_evt_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_evt_handler
</UL>

<P><STRONG><a name="[25c]"></a>ble_dogp_adp_write_data</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ble_dogp_adp_service.o(i.ble_dogp_adp_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = ble_dogp_adp_write_data &rArr; ble_dogp_service_read_characteristic_send &rArr; bt_gatts_send_charc_value_notification_indication &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_service_read_characteristic_send
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_write_data
</UL>

<P><STRONG><a name="[250]"></a>ble_dogp_event_callback_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_dogp_common.o(i.ble_dogp_event_callback_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_dogp_event_callback_init &rArr; bt_callback_manager_register_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_callback_manager_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_init
</UL>

<P><STRONG><a name="[24f]"></a>ble_dogp_service_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_dogp_service.o(i.ble_dogp_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_dogp_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_init
</UL>

<P><STRONG><a name="[256]"></a>ble_dogp_service_read_characteristic_send</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, ble_dogp_service.o(i.ble_dogp_service_read_characteristic_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ble_dogp_service_read_characteristic_send &rArr; bt_gatts_send_charc_value_notification_indication &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_send_charc_value_notification_indication
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_write_data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_evt_handler
</UL>

<P><STRONG><a name="[257]"></a>ble_dogp_update_connection_interval</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, ble_dogp_common.o(i.ble_dogp_update_connection_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ble_dogp_update_connection_interval &rArr; bt_gap_le_update_connection_parameter &rArr; bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval_timerout
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval
</UL>

<P><STRONG><a name="[28e]"></a>ble_gap_get_current_connection_interval</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ble_dogp_common.o(i.ble_gap_get_current_connection_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_get_current_connection_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dogp_app_event_callback
</UL>

<P><STRONG><a name="[25f]"></a>bsp_ept_gpio_setting_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_gpio_ept_config.o(i.bsp_ept_gpio_setting_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_ept_gpio_setting_init &rArr; gpio_mode_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_r1_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_r0_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pupd_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pullen_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_sel_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir_init
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[3a1]"></a>bt_a2dp_get_lib_lastest_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_a2dp_get_lib_lastest_commit_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6bd]"></a>bt_a2dp_get_lib_lastest_commit_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_a2dp_get_lib_lastest_commit_ext), UNUSED)

<P><STRONG><a name="[3a0]"></a>bt_a2dp_get_lib_verno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_a2dp_get_lib_verno_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6be]"></a>bt_a2dp_get_lib_verno_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_a2dp_get_lib_verno_ext), UNUSED)

<P><STRONG><a name="[42f]"></a>bt_a2dp_init</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bt_common.o(i.bt_a2dp_init_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_a2dp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_profiles_init
</UL>

<P><STRONG><a name="[268]"></a>bt_a2dp_init_default</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_common.o(i.bt_a2dp_init_default), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>

<P><STRONG><a name="[26a]"></a>bt_alloc_rx_packet_with_node</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bt_common.o(i.bt_alloc_rx_packet_with_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_alloc_rx_packet_with_node &rArr; bt_mm_allocate_packet_internal &rArr; bt_mm_dump_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr_rx_allocate_packet
</UL>

<P><STRONG><a name="[26c]"></a>bt_allocate_packet_with_node</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bt_common.o(i.bt_allocate_packet_with_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_is_bt_task_running
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_send
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_credit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_record_handle_rsp_packet
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_TEST_command
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RPN_command
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RLS_command
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NSC_command
</UL>

<P><STRONG><a name="[26f]"></a>bt_app_event_callback</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bt_callback_manager.o(i.bt_app_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_handle_value_confirmation
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_write_rsp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_rsp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_multiple_rsp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_type_rsp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_group_type_rsp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_blob_rsp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_handle_value_notification
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_handle_value_indication
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_find_information_rsp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_find_by_type_value_rsp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_execute_write_rsp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_exchange_mtu_rsp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_error_rsp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_timeout_callback
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disconnected
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disc_pending
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_pending
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_incoming
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_bqb_conn_param_update_proc
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_user_input_ind
</UL>

<P><STRONG><a name="[270]"></a>bt_app_event_callback_wrap</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bt_gap_le.o(i.bt_app_event_callback_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_app_event_callback_wrap &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_ata_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_timeout
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_cmplete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_status
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_proc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_misc_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[272]"></a>bt_att_get_packet</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bt_att.o(i.bt_att_get_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bt_att_get_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_send_charc_value_notification_indication
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_req
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_multiple_req
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_information_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_send_charc_value_confirmation
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
</UL>

<P><STRONG><a name="[274]"></a>bt_att_rx_proc</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, bt_att.o(i.bt_att_rx_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2716<LI>Call Chain = bt_att_rx_proc &rArr; bt_gatts_rx_proc_write_req &rArr; bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_rx_proc_not_supported_without_feedback
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_error_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_rx_proc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_callback
</UL>

<P><STRONG><a name="[277]"></a>bt_att_send_data</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, bt_att.o(i.bt_att_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_prepare_write_req
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_execute_write_req
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_exchange_mtu_req
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_rsp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_type_rsp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_blob_rsp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_prepare_write_rsp
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc_descriptor
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_error_rsp
</UL>

<P><STRONG><a name="[276]"></a>bt_att_send_error_rsp</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, bt_att.o(i.bt_att_send_error_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = bt_att_send_error_rsp &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_rx_proc
</UL>

<P><STRONG><a name="[279]"></a>bt_att_send_packet</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, bt_att.o(i.bt_att_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_send_charc_value_notification_indication
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_req
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_multiple_req
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_information_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_send_charc_value_confirmation
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
</UL>

<P><STRONG><a name="[ff]"></a>bt_avctp_l2cap_psm_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avctp_l2cap_psm_callback_ext))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6bf]"></a>bt_avctp_l2cap_psm_callback_ext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avctp_l2cap_psm_callback_ext), UNUSED)

<P><STRONG><a name="[101]"></a>bt_avdtp_l2cap_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avdtp_l2cap_callback_default))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6c0]"></a>bt_avdtp_l2cap_callback_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avdtp_l2cap_callback_default), UNUSED)

<P><STRONG><a name="[102]"></a>bt_avdtp_l2cap_context_op_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avdtp_l2cap_context_op_callback_default))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6c1]"></a>bt_avdtp_l2cap_context_op_callback_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avdtp_l2cap_context_op_callback_default), UNUSED)

<P><STRONG><a name="[3a5]"></a>bt_avrcp_eh_get_lib_lastest_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_eh_get_lib_lastest_commit_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6c2]"></a>bt_avrcp_eh_get_lib_lastest_commit_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_eh_get_lib_lastest_commit_ext), UNUSED)

<P><STRONG><a name="[3a4]"></a>bt_avrcp_eh_get_lib_verno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_eh_get_lib_verno_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6c3]"></a>bt_avrcp_eh_get_lib_verno_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_eh_get_lib_verno_ext), UNUSED)

<P><STRONG><a name="[3a3]"></a>bt_avrcp_get_lib_lastest_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_get_lib_lastest_commit_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6c4]"></a>bt_avrcp_get_lib_lastest_commit_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_get_lib_lastest_commit_ext), UNUSED)

<P><STRONG><a name="[3a2]"></a>bt_avrcp_get_lib_verno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_get_lib_verno_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6c5]"></a>bt_avrcp_get_lib_verno_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_avrcp_get_lib_verno_ext), UNUSED)

<P><STRONG><a name="[100]"></a>bt_avrcp_l2cap_context_op_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avrcp_l2cap_context_op_callback_ext))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6c6]"></a>bt_avrcp_l2cap_context_op_callback_ext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_avrcp_l2cap_context_op_callback_ext), UNUSED)

<P><STRONG><a name="[3ab]"></a>bt_aws_get_lib_lastest_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_aws_get_lib_lastest_commit_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6c7]"></a>bt_aws_get_lib_lastest_commit_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_aws_get_lib_lastest_commit_ext), UNUSED)

<P><STRONG><a name="[3aa]"></a>bt_aws_get_lib_verno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_aws_get_lib_verno_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6c8]"></a>bt_aws_get_lib_verno_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_aws_get_lib_verno_ext), UNUSED)

<P><STRONG><a name="[103]"></a>bt_aws_l2cap_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_aws_l2cap_callback_default))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6c9]"></a>bt_aws_l2cap_callback_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_aws_l2cap_callback_default), UNUSED)

<P><STRONG><a name="[104]"></a>bt_aws_l2cap_context_op_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_aws_l2cap_context_op_callback_default))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6ca]"></a>bt_aws_l2cap_context_op_callback_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_aws_l2cap_context_op_callback_default), UNUSED)

<P><STRONG><a name="[20d]"></a>bt_callback_manager_add_sdp_customized_record</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_callback_manager_add_sdp_customized_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_callback_manager_add_sdp_customized_record &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_register_sdp_record
</UL>

<P><STRONG><a name="[24d]"></a>bt_callback_manager_register_callback</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bt_callback_manager.o(i.bt_callback_manager_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_callback_manager_register_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_init
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_common_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_event_callback_init
</UL>

<P><STRONG><a name="[27d]"></a>bt_cmac_reverse_and_encrypt</STRONG> (Thumb, 356 bytes, Stack size 136 bytes, bt_cmac.o(i.bt_cmac_reverse_and_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2612<LI>Call Chain = bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_encrypt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_shift_key
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_xor_16_byte
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_reverse_key
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_g2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f6
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f5
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f4
</UL>

<P><STRONG><a name="[282]"></a>bt_cmac_shift_key</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bt_cmac.o(i.bt_cmac_shift_key))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
</UL>

<P><STRONG><a name="[283]"></a>bt_copy_and_increase</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bt_common.o(i.bt_copy_and_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_copy_and_increase &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_g2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f6
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f5
</UL>

<P><STRONG><a name="[284]"></a>bt_create_task</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bt_init.o(i.bt_create_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = bt_create_task &rArr; bt_preread_local_address &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_show_address
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_register_sdp_record
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[289]"></a>bt_debug_addr2str</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, bt_debug.o(i.bt_debug_addr2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_debug_addr2str &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
</UL>

<P><STRONG><a name="[28a]"></a>bt_debug_bd_addr2str</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, bt_debug.o(i.bt_debug_bd_addr2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_debug_bd_addr2str &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
</UL>

<P><STRONG><a name="[269]"></a>bt_debug_log</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, bt_debug.o(i.bt_debug_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_callback_manager_register_callback
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_set_scan_mode
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_callback_manager_add_sdp_customized_record
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_set_max_mtu
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_execute_write_result
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_authorization_check_result
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_is_connection_update_request_accepted
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_pairing_config
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_local_key
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_local_config
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_bonding_info
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_pin_code
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_local_configuration
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_link_key
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_get_mtu
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_hold_data
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_aes_encrypt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_write_value_by_rec
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_req
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_multiple_req
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_prepare_write_req
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_information_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_execute_write_req
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_send_charc_value_confirmation
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc_descriptor
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_timeout_callback
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_release_data
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connect_response
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_dump_state
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_append_packet
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_pending_operation
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_dump_connection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_idle_check
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_request
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_auth_operation
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_timeout
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_start_timer
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_connection_destroy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_rsp
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_req
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_destroy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_status
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features_proc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_proc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_complete_rollback
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_misc_callback
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_service_search
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_trigger
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_free_connection
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_allocate_connection
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_data
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_server_id
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_max_frame_size
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_credit
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect_response
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_notify_send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_connect
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_spp_callback
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disconnected
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disc_pending
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_pending
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_incoming
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_check_timeout_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_rx_oom
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_util_info
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_rx_oom_notify
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_infomation_rsp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_echo_rsp
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_rsp
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_req
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_rsp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_req
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_rsp
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_req
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_data_handle
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel_info
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_rsp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_req
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_psm_info_by_channel
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_context_op_callback_by_psm
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_channel
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_callback_by_psm
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect_rsp
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_pending_operation
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_sco_status
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_fail
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_supervision_timeout
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_supervision_check
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_rx_proc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_proc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_flush_timeout
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_rx_proc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_status
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_complete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller_complete
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_sleep
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_wakeup_cmd_sent_flag
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_controller_sleep_flag
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_sleep
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_wakeup_cmd_sent_flag
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_controller_sleep_flag
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_trigger_controller
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_set_controller_buffer_is_shared
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_restart_sleep_mode_timer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_nocp_callback
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_check_connection_type
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send_with_auto_flush
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_le_send
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_context_op_callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_callback
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_free_channel
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_insert_channel
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_if_channel_exist
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_session
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_stop_all_timer
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_credit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_connect
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_send_credit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_disconnect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_search
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_attribute
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_free_channel
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_delete_request
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_allocate_channel
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_timeout_callback
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_oom_handler
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_a2dp_init_default
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_bqb_conn_param_update_proc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_switch_to_open_state
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rtx_timer_proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_oom_handler
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_find_channel_by_timer_id
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_context_op_callback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_callback
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_pattern_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_device
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_start_wakeup_controller_timer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_serial_port_write_data
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download_combine_command
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_clock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_voltage
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_recv
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_register_sleep_handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_voltage
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr_rx_allocate_packet
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_handler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_deinit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_deregister_sleep_handler
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_record_handle_rsp_packet
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_bt_rfcomm_obex_callback
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_bt_rfcomm_hfp_callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_timeout_handler
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_free_session
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_allocate_session
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_close
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_notify_user_and_close_channel
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_callback_by_server_id
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_wait_conn_channel
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_channel
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_TEST_command
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_receive_PN_message
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_remove_channel
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_find_channel
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_add_channel
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_print_method
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_user_input_ind
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_send
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_receive
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_gen_key_distribute_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_find_next_dist
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_g2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f6
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f5
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f4
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_c1
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_gen_method
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_dist_method
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_free_channel
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_upper_conn_rsp
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_disc_rsp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[28d]"></a>bt_dogp_app_event_callback</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ble_dogp_common.o(i.bt_dogp_app_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_dogp_app_event_callback &rArr; ble_gap_get_current_connection_interval
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_get_current_connection_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dogp_event_callback
</UL>

<P><STRONG><a name="[6f]"></a>bt_dogp_event_callback</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ble_dogp_common.o(i.bt_dogp_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_dogp_event_callback &rArr; bt_dogp_app_event_callback &rArr; ble_gap_get_current_connection_interval
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dogp_app_event_callback
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dogp_common.o(i.ble_dogp_event_callback_init)
</UL>
<P><STRONG><a name="[28f]"></a>bt_driver_close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_driver_close &rArr; bt_os_layer_delete_semaphore &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_delete_semaphore
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_deinit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq_mask
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
</UL>

<P><STRONG><a name="[35d]"></a>bt_driver_controll_uart_sleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_hci.o(i.bt_driver_controll_uart_sleep_default))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
</UL>

<P><STRONG><a name="[6cb]"></a>bt_driver_controll_uart_sleep_default</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_hci.o(i.bt_driver_controll_uart_sleep_default), UNUSED)

<P><STRONG><a name="[355]"></a>bt_driver_eint_disable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_hci.o(i.bt_driver_eint_disable_default))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_lock_sleep
</UL>

<P><STRONG><a name="[6cc]"></a>bt_driver_eint_disable_default</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_hci.o(i.bt_driver_eint_disable_default), UNUSED)

<P><STRONG><a name="[360]"></a>bt_driver_eint_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_hci.o(i.bt_driver_eint_enable_default))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_unlock_sleep
</UL>

<P><STRONG><a name="[6cd]"></a>bt_driver_eint_enable_default</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_hci.o(i.bt_driver_eint_enable_default), UNUSED)

<P><STRONG><a name="[2a1]"></a>bt_driver_enable_clock</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bt_driver.o(i.bt_driver_enable_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_driver_enable_clock &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_is_enabled (via Veneer)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
</UL>

<P><STRONG><a name="[2a2]"></a>bt_driver_enable_dut_mode</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bt_driver.o(i.bt_driver_enable_dut_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bt_driver_enable_dut_mode &rArr; bt_driver_send_with_pending_rsp &rArr; bt_free_packet_with_node &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[2a5]"></a>bt_driver_get_controller_sleep_flag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_get_controller_sleep_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_get_controller_sleep_flag &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
</UL>

<P><STRONG><a name="[2a6]"></a>bt_driver_get_wakeup_cmd_sent_flag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_get_wakeup_cmd_sent_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_get_wakeup_cmd_sent_flag &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
</UL>

<P><STRONG><a name="[344]"></a>bt_driver_is_rx_oom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_driver.o(i.bt_driver_is_rx_oom))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_rx_oom
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[39b]"></a>bt_driver_lib_lastest_commit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_driver_lib_verno.o(i.bt_driver_lib_lastest_commit))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[399]"></a>bt_driver_lib_verno</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_driver_lib_verno.o(i.bt_driver_lib_verno))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[298]"></a>bt_driver_lock_sleep</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_lock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bt_driver_lock_sleep &rArr; bt_os_layer_sleep_manager_lock_sleep &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_lock_sleep
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_restart_sleep_mode_timer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_handler
</UL>

<P><STRONG><a name="[2b3]"></a>bt_driver_new_handshake_ctrl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_driver.o(i.bt_driver_new_handshake_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
</UL>

<P><STRONG><a name="[2b1]"></a>bt_driver_open</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bt_driver.o(i.bt_driver_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_driver_open &rArr; bt_driver_eint_init &rArr; hal_eint_init &rArr; hal_eint_set_debounce_time &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_create_semaphore
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_new_handshake_ctrl
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_register_irq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq_mask
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
</UL>

<P><STRONG><a name="[2b6]"></a>bt_driver_patch_download</STRONG> (Thumb, 346 bytes, Stack size 304 bytes, bt_driver.o(i.bt_driver_patch_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = bt_driver_patch_download &rArr; bt_driver_enable_dut_mode &rArr; bt_driver_send_with_pending_rsp &rArr; bt_free_packet_with_node &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_task
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_packet_from_node
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_free_packet_with_node
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_is_mt2523E2
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_is_mt2523E1
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download_combine_command
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_dut_mode
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_write
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_debug_dump
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
</UL>

<P><STRONG><a name="[2b9]"></a>bt_driver_patch_download_combine_command</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bt_driver.o(i.bt_driver_patch_download_combine_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_driver_patch_download_combine_command &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[2bf]"></a>bt_driver_power_off</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bt_driver_power_off &rArr; bt_driver_unlock_sleep &rArr; bt_os_layer_sleep_manager_unlock_sleep &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_driver_power
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_unlock_BT_MTCMOS
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_sleep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_clock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_close
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_voltage
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_deregister_sleep_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
</UL>

<P><STRONG><a name="[2c4]"></a>bt_driver_power_on</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = bt_driver_power_on &rArr; bt_driver_patch_download &rArr; bt_driver_enable_dut_mode &rArr; bt_driver_send_with_pending_rsp &rArr; bt_free_packet_with_node &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_driver_power
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_task
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_lock_BT_MTCMOS
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_clock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_register_sleep_handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
</UL>

<P><STRONG><a name="[2cb]"></a>bt_driver_recv</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, bt_driver.o(i.bt_driver_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = bt_driver_recv &rArr; _bt_driver_recv &rArr; bt_driver_relay_recv &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_time_consuming_to_hci_log
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_get_hal_gpt_time
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_driver_recv
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
</UL>

<P><STRONG><a name="[2cf]"></a>bt_driver_relay_serial_port_write_data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_relay_serial_port_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_relay_serial_port_write_data &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_serial_port_control
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_recv
</UL>

<P><STRONG><a name="[2a3]"></a>bt_driver_send_with_pending_rsp</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, bt_driver.o(i.bt_driver_send_with_pending_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bt_driver_send_with_pending_rsp &rArr; bt_free_packet_with_node &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_tx
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_packet_from_node
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_free_packet_with_node
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_dut_mode
</UL>

<P><STRONG><a name="[2a7]"></a>bt_driver_set_controller_sleep_flag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_set_controller_sleep_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_set_controller_sleep_flag &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
</UL>

<P><STRONG><a name="[29b]"></a>bt_driver_set_wakeup_cmd_sent_flag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_set_wakeup_cmd_sent_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_set_wakeup_cmd_sent_flag &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_trigger_controller
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_handler
</UL>

<P><STRONG><a name="[2d5]"></a>bt_driver_start_wakeup_controller_timer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_start_wakeup_controller_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller
</UL>

<P><STRONG><a name="[2ab]"></a>bt_driver_trigger_controller_codedump</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bt_driver.o(i.bt_driver_trigger_controller_codedump))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_driver_trigger_controller_codedump &rArr; bt_driver_wakeup_device &rArr; bt_os_layer_sleep_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_task
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_device
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_proc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_misc_callback
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr_rx_allocate_packet
</UL>

<P><STRONG><a name="[2d4]"></a>bt_driver_tx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bt_driver.o(i.bt_driver_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_driver_tx &rArr; bt_hci_log &rArr; hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
</UL>

<P><STRONG><a name="[2c0]"></a>bt_driver_unlock_sleep</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_unlock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bt_driver_unlock_sleep &rArr; bt_os_layer_sleep_manager_unlock_sleep &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_unlock_sleep
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
</UL>

<P><STRONG><a name="[2d6]"></a>bt_driver_wakeup_controller</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_wakeup_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_sleep
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_pattern_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_device
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_start_wakeup_controller_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_trigger_controller
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller_timeout
</UL>

<P><STRONG><a name="[2d7]"></a>bt_driver_wakeup_controller_complete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_wakeup_controller_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_driver_wakeup_controller_complete &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_device
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
</UL>

<P><STRONG><a name="[73]"></a>bt_driver_wakeup_controller_timeout</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, bt_driver.o(i.bt_driver_wakeup_controller_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bt_driver_wakeup_controller_timeout &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_driver.o(i.bt_driver_start_wakeup_controller_timer)
</UL>
<P><STRONG><a name="[299]"></a>bt_driver_wakeup_device</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bt_driver.o(i.bt_driver_wakeup_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_driver_wakeup_device &rArr; bt_os_layer_sleep_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_task
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_complete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller_complete
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_handler
</UL>

<P><STRONG><a name="[2d9]"></a>bt_driver_wakeup_host_complete</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_wakeup_host_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_driver_wakeup_host_complete &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_device
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
</UL>

<P><STRONG><a name="[2da]"></a>bt_driver_wakeup_host_status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_wakeup_host_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_wakeup_host_status &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
</UL>

<P><STRONG><a name="[29a]"></a>bt_driver_wakeup_pattern_send</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bt_driver.o(i.bt_driver_wakeup_pattern_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_driver_wakeup_pattern_send &rArr; bt_driver_write &rArr; bt_driver_raw_dump_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_handler
</UL>

<P><STRONG><a name="[2db]"></a>bt_endian_order_swap</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, bt_common.o(i.bt_endian_order_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_32bit
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_32bit
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_16bit
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_uuid_cmp
</UL>

<P><STRONG><a name="[273]"></a>bt_find_conn_by_handle</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bt_common.o(i.bt_find_conn_by_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_find_conn_by_handle &rArr; bt_linknode_remove_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_get_mtu
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_send_charc_value_confirmation
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc_descriptor
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_timeout_callback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_complete_rollback
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_link_type
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_tx_queue_by_handle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_nocp_callback
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_check_connection_type
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[2dc]"></a>bt_find_tx_queue_by_handle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bt_common.o(i.bt_find_tx_queue_by_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_find_tx_queue_by_handle &rArr; bt_find_conn_by_handle &rArr; bt_linknode_remove_node
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
</UL>

<P><STRONG><a name="[2be]"></a>bt_free_packet_with_node</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bt_common.o(i.bt_free_packet_with_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_free_packet_with_node &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
</UL>

<P><STRONG><a name="[80]"></a>bt_gap_auth_evt_callback</STRONG> (Thumb, 788 bytes, Stack size 64 bytes, bt_gap_auth.o(i.bt_gap_auth_evt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = bt_gap_auth_evt_callback &rArr; bt_gap_cancel_auth &rArr; bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_stop_timer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_start_timer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_cmplete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_status_from_hci_event_cc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_gap_auth.o(i.bt_gap_send_auth_operation)
<LI> bt_hci.o(.constdata)
</UL>
<P><STRONG><a name="[2e6]"></a>bt_gap_auth_param</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, bt_gap_auth.o(i.bt_gap_auth_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = bt_gap_auth_param &rArr; bt_gap_send_pending_operation &rArr; bt_hci_cmd_send_w_pkg &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_pin_code
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_link_key
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_pending_operation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_start_timer
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
</UL>

<P><STRONG><a name="[2ea]"></a>bt_gap_auth_request</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bt_gap_auth.o(i.bt_gap_auth_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bt_gap_auth_request &rArr; bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_dump_connection
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[2e5]"></a>bt_gap_cancel_auth</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, bt_gap_auth.o(i.bt_gap_cancel_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = bt_gap_cancel_auth &rArr; bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_stop_timer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_timeout
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
</UL>

<P><STRONG><a name="[2ef]"></a>bt_gap_cancel_pending_operation</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bt_gap_connection.o(i.bt_gap_cancel_pending_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_gap_cancel_pending_operation &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_pending_operation
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
</UL>

<P><STRONG><a name="[2fd]"></a>bt_gap_check_connect_request</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_gap_connection.o(i.bt_gap_check_connect_request_default))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[6ce]"></a>bt_gap_check_connect_request_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_gap_connection.o(i.bt_gap_check_connect_request_default), UNUSED)

<P><STRONG><a name="[2e2]"></a>bt_gap_check_connection_status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bt_gap_connection.o(i.bt_gap_check_connection_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_request
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_supervision_check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_clean_pending_op_cb
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[2f2]"></a>bt_gap_connect</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bt_gap_connection.o(i.bt_gap_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bt_gap_connect &rArr; bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel
</UL>

<P><STRONG><a name="[81]"></a>bt_gap_connected_evt_callback</STRONG> (Thumb, 1692 bytes, Stack size 72 bytes, bt_gap_connection.o(i.bt_gap_connected_evt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = bt_gap_connected_evt_callback &rArr; bt_gap_notify_connection_fail &rArr; bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_status
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_status_from_hci_event_cc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connect_request
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_connection
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_sco_status
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_fail
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_handle
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_unlock_sleep
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_lock_sleep
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_gap_connection.o(i.bt_gap_send_pending_operation)
<LI> bt_hci.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>bt_gap_connection_idle_check</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bt_gap_connection.o(i.bt_gap_connection_idle_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_gap_connection_idle_check &rArr; bt_gap_disconnect &rArr; bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_connection
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bt_gap_auth.o(i.bt_gap_cancel_auth)
<LI> bt_gap_connection.o(i.bt_gap_connected_evt_callback)
<LI> bt_l2cap_util.o(i.bt_l2cap_notify_user_and_close_channel)
</UL>
<P><STRONG><a name="[301]"></a>bt_gap_connection_lost</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, bt_gap_connection.o(i.bt_gap_connection_lost))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = bt_gap_connection_lost &rArr; bt_gap_cancel_auth &rArr; bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_remove_link_node
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_destroy
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_status
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_pending_operation
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_sco_status
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
</UL>

<P><STRONG><a name="[300]"></a>bt_gap_disconnect</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bt_gap_connection.o(i.bt_gap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bt_gap_disconnect &rArr; bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_connection
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_pending_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_idle_check
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_proc
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[2ec]"></a>bt_gap_dump_connection</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, bt_gap_connection.o(i.bt_gap_dump_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_gap_dump_connection &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_request
</UL>

<P><STRONG><a name="[2e1]"></a>bt_gap_find_connection</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bt_gap_connection.o(i.bt_gap_find_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_gap_find_connection &rArr; bt_linknode_travel_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_misc_callback
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_cancel_callback
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_channel
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_context_op_callback
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_find_channel
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_add_channel
</UL>

<P><STRONG><a name="[2dd]"></a>bt_gap_find_connection_by_handle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_gap_connection.o(i.bt_gap_find_connection_by_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_gap_find_connection_by_handle &rArr; bt_linknode_travel_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_misc_callback
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_link_type
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_tx_queue_by_handle
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_nocp_callback
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_check_connection_type
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_find_channel_by_timer_id
</UL>

<P><STRONG><a name="[2ff]"></a>bt_gap_find_sco_by_connection</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bt_gap_connection.o(i.bt_gap_find_sco_by_connection))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_dump_connection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_idle_check
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_supervision_check
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
</UL>

<P><STRONG><a name="[2e7]"></a>bt_gap_get_link_key</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gap_get_link_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gap_get_link_key &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
</UL>

<P><STRONG><a name="[304]"></a>bt_gap_get_link_type</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_gap_connection.o(i.bt_gap_get_link_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_gap_get_link_type &rArr; bt_find_conn_by_handle &rArr; bt_linknode_remove_node
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[305]"></a>bt_gap_get_local_configuration</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gap_get_local_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gap_get_local_configuration &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
</UL>

<P><STRONG><a name="[2e8]"></a>bt_gap_get_pin_code</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gap_get_pin_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gap_get_pin_code &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
</UL>

<P><STRONG><a name="[307]"></a>bt_gap_le_connection_complete_rollback</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bt_gap_le.o(i.bt_gap_le_connection_complete_rollback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_gap_le_connection_complete_rollback &rArr; bt_gap_le_destroy_conn_ind_buff &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_remove_link_node
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_destroy_conn_ind_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
</UL>

<P><STRONG><a name="[7d]"></a>bt_gap_le_connection_proc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, bt_gap_le.o(i.bt_gap_le_connection_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_gap_le_connection_proc &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_status_from_hci_event_cc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_gap_le.o(i.bt_gap_le_disconnect)
<LI> bt_gap_le.o(i.bt_gap_le_event_callback)
</UL>
<P><STRONG><a name="[7f]"></a>bt_gap_le_connection_update_proc</STRONG> (Thumb, 542 bytes, Stack size 80 bytes, bt_gap_le.o(i.bt_gap_le_connection_update_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_gap_le_connection_update_proc &rArr; bt_gap_le_update_connection_parameter &rArr; bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_is_connection_update_request_accepted
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_is_allocatable_packet
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_rsp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_status_from_hci_event_cc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_gap_le.o(i.bt_gap_le_update_connection_parameter)
<LI> bt_hci.o(.constdata)
</UL>
<P><STRONG><a name="[308]"></a>bt_gap_le_destroy_conn_ind_buff</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bt_gap_le.o(i.bt_gap_le_destroy_conn_ind_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_gap_le_destroy_conn_ind_buff &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_complete_rollback
</UL>

<P><STRONG><a name="[309]"></a>bt_gap_le_disconnect</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bt_gap_le.o(i.bt_gap_le_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bt_gap_le_disconnect &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features_proc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
</UL>

<P><STRONG><a name="[e1]"></a>bt_gap_le_event_callback</STRONG> (Thumb, 1940 bytes, Stack size 112 bytes, bt_gap_le.o(i.bt_gap_le_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_gap_le_event_callback &rArr; bt_gap_connection_lost &rArr; bt_gap_cancel_auth &rArr; bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_bonding_info
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_connection_destroy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_destroy
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_construct
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_status
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_destroy_conn_ind_buff
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_complete_rollback
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_gap_le.o(i.bt_gap_le_event_callback)
<LI> bt_hci.o(.constdata)
</UL>
<P><STRONG><a name="[30e]"></a>bt_gap_le_get_bonding_info</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bt_callback_manager.o(i.bt_gap_le_get_bonding_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_gap_le_get_bonding_info &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
</UL>

<P><STRONG><a name="[311]"></a>bt_gap_le_get_local_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gap_le_get_local_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gap_le_get_local_config &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
</UL>

<P><STRONG><a name="[312]"></a>bt_gap_le_get_local_key</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gap_le_get_local_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gap_le_get_local_key &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_send
</UL>

<P><STRONG><a name="[313]"></a>bt_gap_le_get_pairing_config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gap_le_get_pairing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gap_le_get_pairing_config &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
</UL>

<P><STRONG><a name="[314]"></a>bt_gap_le_init_proc</STRONG> (Thumb, 1682 bytes, Stack size 80 bytes, bt_gap_init.o(i.bt_gap_le_init_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = bt_gap_le_init_proc &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_bd_addr2str
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_local_config
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_profiles_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_set_controller_buffer_is_shared
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_gap_init.o(i.bt_gap_le_init_proc)
</UL>
<P><STRONG><a name="[30a]"></a>bt_gap_le_is_connection_update_request_accepted</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bt_callback_manager.o(i.bt_gap_le_is_connection_update_request_accepted))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_gap_le_is_connection_update_request_accepted &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
</UL>

<P><STRONG><a name="[30f]"></a>bt_gap_le_read_remote_used_features</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bt_gap_le.o(i.bt_gap_le_read_remote_used_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bt_gap_le_read_remote_used_features &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
</UL>

<P><STRONG><a name="[7e]"></a>bt_gap_le_read_remote_used_features_proc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bt_gap_le.o(i.bt_gap_le_read_remote_used_features_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_gap_le_read_remote_used_features_proc &rArr; bt_gap_le_disconnect &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_destroy_conn_ind_buff
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_gap_le.o(i.bt_gap_le_event_callback)
</UL>
<P><STRONG><a name="[24a]"></a>bt_gap_le_set_advertising</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bt_gap_le_adv.o(i.bt_gap_le_set_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_gap_le_set_advertising &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_weak
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_advertise_data_init
</UL>

<P><STRONG><a name="[318]"></a>bt_gap_le_set_advertising_single</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bt_gap_le_adv.o(i.bt_gap_le_set_advertising_single), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_bt_gap_le_set_advertising_weak
</UL>

<P><STRONG><a name="[319]"></a>bt_gap_le_set_advertising_single_proc</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, bt_gap_le_adv.o(i.bt_gap_le_set_advertising_single_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = bt_gap_le_set_advertising_single_proc &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_status_from_hci_event_cc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_gap_le_adv.o(i.bt_gap_le_set_advertising_single_proc)
</UL>
<P><STRONG><a name="[25e]"></a>bt_gap_le_update_connection_parameter</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bt_gap_le.o(i.bt_gap_le_update_connection_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = bt_gap_le_update_connection_parameter &rArr; bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_req
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_update_connection_interval
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
</UL>

<P><STRONG><a name="[79]"></a>bt_gap_misc_callback</STRONG> (Thumb, 792 bytes, Stack size 56 bytes, bt_gap_misc.o(i.bt_gap_misc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_gap_misc_callback &rArr; bt_app_event_callback_wrap &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_status_from_hci_event_cc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bt_gap_misc.o(i.bt_gap_set_scan_mode)
<LI> bt_hci.o(.constdata)
<LI> bt_gap_connection.o(i.bt_gap_connected_evt_callback)
</UL>
<P><STRONG><a name="[2fc]"></a>bt_gap_notify_connection_status</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bt_gap_connection.o(i.bt_gap_notify_connection_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_gap_notify_connection_status &rArr; bt_app_event_callback_wrap &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[31b]"></a>bt_gap_reply_io_capability_request</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bt_gap_auth.o(i.bt_gap_reply_io_capability_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = bt_gap_reply_io_capability_request &rArr; bt_gap_send_auth_operation &rArr; bt_hci_cmd_send_w_pkg &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_auth_operation
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_app_event_callback
</UL>

<P><STRONG><a name="[31d]"></a>bt_gap_reply_user_confirm_request</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bt_gap_auth.o(i.bt_gap_reply_user_confirm_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = bt_gap_reply_user_confirm_request &rArr; bt_gap_send_auth_operation &rArr; bt_hci_cmd_send_w_pkg &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_auth_operation
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_app_event_callback
</UL>

<P><STRONG><a name="[2e9]"></a>bt_gap_send_pending_operation</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, bt_gap_connection.o(i.bt_gap_send_pending_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bt_gap_send_pending_operation &rArr; bt_hci_cmd_send_w_pkg &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_pending_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
</UL>

<P><STRONG><a name="[31f]"></a>bt_gap_set_scan_mode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bt_gap_misc.o(i.bt_gap_set_scan_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bt_gap_set_scan_mode &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_app_event_callback
</UL>

<P><STRONG><a name="[320]"></a>bt_gatt_allocate_channel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_gatt_sdp.o(i.bt_gatt_allocate_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_gatt_allocate_channel &rArr; bt_mm_allocate_fixed_size_by_type_internal &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_context_op_callback
</UL>

<P><STRONG><a name="[321]"></a>bt_gatt_free_channel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bt_gatt_sdp.o(i.bt_gatt_free_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_gatt_free_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_context_op_callback
</UL>

<P><STRONG><a name="[108]"></a>bt_gatt_l2cap_callback</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, bt_gatt_sdp.o(i.bt_gatt_l2cap_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2740<LI>Call Chain = bt_gatt_l2cap_callback &rArr; bt_att_rx_proc &rArr; bt_gatts_rx_proc_write_req &rArr; bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect_rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_rx_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>bt_gatt_l2cap_context_op_callback</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bt_gatt_sdp.o(i.bt_gatt_l2cap_context_op_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_gatt_l2cap_context_op_callback &rArr; bt_gatt_allocate_channel &rArr; bt_mm_allocate_fixed_size_by_type_internal &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_free_channel
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_allocate_channel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>bt_gatt_rx_proc_not_supported_without_feedback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_att.o(i.bt_gatt_rx_proc_not_supported_without_feedback))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_rx_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[6cf]"></a>bt_gatts_rx_proc_signed_write_command</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_att.o(i.bt_gatt_rx_proc_not_supported_without_feedback), UNUSED)

<P><STRONG><a name="[6d0]"></a>bt_gatts_rx_proc_write_command</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_att.o(i.bt_gatt_rx_proc_not_supported_without_feedback), UNUSED)

<P><STRONG><a name="[82]"></a>bt_gatt_timeout_callback</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bt_gattc.o(i.bt_gatt_timeout_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_gatt_timeout_callback &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
</UL>
<BR>[Address Reference Count : 11]<UL><LI> bt_gattc.o(i.bt_gattc_discover_charc)
<LI> bt_gattc.o(i.bt_gattc_discover_charc_descriptor)
<LI> bt_gattc.o(i.bt_gattc_discover_primary_service)
<LI> bt_gattc.o(i.bt_gattc_discover_primary_service_by_uuid)
<LI> bt_gattc.o(i.bt_gattc_find_included_services)
<LI> bt_gattc.o(i.bt_gattc_prepare_write_charc)
<LI> bt_gattc.o(i.bt_gattc_rx_proc_prepare_write_rsp)
<LI> bt_gattc.o(i.bt_gattc_rx_proc_read_blob_rsp)
<LI> bt_gattc.o(i.bt_gattc_rx_proc_read_by_type_rsp)
<LI> bt_gattc.o(i.bt_gattc_rx_proc_read_rsp)
<LI> bt_gatts.o(i.bt_gatts_send_charc_value_notification_indication)
</UL>
<P><STRONG><a name="[323]"></a>bt_gattc_discover_charc</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_discover_charc))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_gattc_discover_charc &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_is_uuid16
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_copy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_type_rsp
</UL>

<P><STRONG><a name="[326]"></a>bt_gattc_discover_charc_descriptor</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_discover_charc_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_gattc_discover_charc_descriptor &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_find_information_rsp
</UL>

<P><STRONG><a name="[327]"></a>bt_gattc_discover_primary_service</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_discover_primary_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_gattc_discover_primary_service &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_group_type_rsp
</UL>

<P><STRONG><a name="[328]"></a>bt_gattc_discover_primary_service_by_uuid</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_discover_primary_service_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_gattc_discover_primary_service_by_uuid &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_load
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_find_by_type_value_rsp
</UL>

<P><STRONG><a name="[32a]"></a>bt_gattc_find_included_services</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_find_included_services))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_gattc_find_included_services &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_rsp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_type_rsp
</UL>

<P><STRONG><a name="[254]"></a>bt_gattc_get_mtu</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bt_gattc.o(i.bt_gattc_get_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_gattc_get_mtu &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_evt_handler
</UL>

<P><STRONG><a name="[32b]"></a>bt_gattc_prepare_write_charc</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, bt_gattc.o(i.bt_gattc_prepare_write_charc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = bt_gattc_prepare_write_charc &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_prepare_write_rsp
</UL>

<P><STRONG><a name="[e3]"></a>bt_gattc_rx_proc_error_rsp</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, bt_gattc.o(i.bt_gattc_rx_proc_error_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_gattc_rx_proc_error_rsp &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>bt_gattc_rx_proc_exchange_mtu_rsp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bt_gattc.o(i.bt_gattc_rx_proc_exchange_mtu_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_gattc_rx_proc_exchange_mtu_rsp &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>bt_gattc_rx_proc_execute_write_rsp</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_rx_proc_execute_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_gattc_rx_proc_execute_write_rsp &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>bt_gattc_rx_proc_find_by_type_value_rsp</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, bt_gattc.o(i.bt_gattc_rx_proc_find_by_type_value_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = bt_gattc_rx_proc_find_by_type_value_rsp &rArr; bt_gattc_discover_primary_service_by_uuid &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_is_uuid16
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>bt_gattc_rx_proc_find_information_rsp</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, bt_gattc.o(i.bt_gattc_rx_proc_find_information_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = bt_gattc_rx_proc_find_information_rsp &rArr; bt_gattc_discover_charc_descriptor &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>bt_gattc_rx_proc_handle_value_indication</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_rx_proc_handle_value_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = bt_gattc_rx_proc_handle_value_indication &rArr; bt_gattc_send_charc_value_confirmation &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_send_charc_value_confirmation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>bt_gattc_rx_proc_handle_value_notification</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_rx_proc_handle_value_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_gattc_rx_proc_handle_value_notification &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>bt_gattc_rx_proc_prepare_write_rsp</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, bt_gattc.o(i.bt_gattc_rx_proc_prepare_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = bt_gattc_rx_proc_prepare_write_rsp &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>bt_gattc_rx_proc_read_blob_rsp</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, bt_gattc.o(i.bt_gattc_rx_proc_read_blob_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_gattc_rx_proc_read_blob_rsp &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>bt_gattc_rx_proc_read_by_group_type_rsp</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, bt_gattc.o(i.bt_gattc_rx_proc_read_by_group_type_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = bt_gattc_rx_proc_read_by_group_type_rsp &rArr; bt_gattc_discover_primary_service &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>bt_gattc_rx_proc_read_by_type_rsp</STRONG> (Thumb, 494 bytes, Stack size 72 bytes, bt_gattc.o(i.bt_gattc_rx_proc_read_by_type_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = bt_gattc_rx_proc_read_by_type_rsp &rArr; bt_gattc_find_included_services &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_copy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>bt_gattc_rx_proc_read_multiple_rsp</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_rx_proc_read_multiple_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_gattc_rx_proc_read_multiple_rsp &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>bt_gattc_rx_proc_read_rsp</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, bt_gattc.o(i.bt_gattc_rx_proc_read_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = bt_gattc_rx_proc_read_rsp &rArr; bt_gattc_find_included_services &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>bt_gattc_rx_proc_write_rsp</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_rx_proc_write_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_gattc_rx_proc_write_rsp &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[32c]"></a>bt_gattc_send_charc_value_confirmation</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bt_gattc.o(i.bt_gattc_send_charc_value_confirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = bt_gattc_send_charc_value_confirmation &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_handle_value_indication
</UL>

<P><STRONG><a name="[32d]"></a>bt_gatts_fill_value_by_rec</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, bt_gatts.o(i.bt_gatts_fill_value_by_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_gatts_fill_value_by_rec &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_req
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_multiple_req
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
</UL>

<P><STRONG><a name="[32e]"></a>bt_gatts_find_ending_handle_by_handle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bt_gatts.o(i.bt_gatts_find_ending_handle_by_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_gatts_find_ending_handle_by_handle &rArr; bt_gatts_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
</UL>

<P><STRONG><a name="[330]"></a>bt_gatts_find_handle_by_uuid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bt_gatts.o(i.bt_gatts_find_handle_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bt_gatts_find_handle_by_uuid &rArr; bt_uuid_equal &rArr; bt_memcmp &rArr; bt_os_layer_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_equal
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_valid_rec_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_information_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
</UL>

<P><STRONG><a name="[331]"></a>bt_gatts_find_valid_rec_from_handle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_gatts.o(i.bt_gatts_find_valid_rec_from_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_gatts_find_valid_rec_from_handle &rArr; bt_gatts_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_handle_by_uuid
</UL>

<P><STRONG><a name="[333]"></a>bt_gatts_get_authorization_check_result</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gatts_get_authorization_check_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gatts_get_authorization_check_result &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
</UL>

<P><STRONG><a name="[334]"></a>bt_gatts_get_execute_write_result</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bt_callback_manager.o(i.bt_gatts_get_execute_write_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_gatts_get_execute_write_result &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_execute_write_req
</UL>

<P><STRONG><a name="[335]"></a>bt_gatts_get_rec</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bt_gatts.o(i.bt_gatts_get_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_gatts_get_rec &rArr; bt_gatts_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_req
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_multiple_req
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_prepare_write_req
</UL>

<P><STRONG><a name="[32f]"></a>bt_gatts_get_service</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bt_gatts.o(i.bt_gatts_get_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_gatts_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_get_gatt_server
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_rec
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_valid_rec_from_handle
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_ending_handle_by_handle
</UL>

<P><STRONG><a name="[338]"></a>bt_gatts_get_value_length</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, bt_gatts.o(i.bt_gatts_get_value_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_gatts_get_value_length
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
</UL>

<P><STRONG><a name="[e4]"></a>bt_gatts_rx_proc_exchange_mtu_req</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bt_gatts.o(i.bt_gatts_rx_proc_exchange_mtu_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_gatts_rx_proc_exchange_mtu_req &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>bt_gatts_rx_proc_execute_write_req</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, bt_gatts.o(i.bt_gatts_rx_proc_execute_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = bt_gatts_rx_proc_execute_write_req &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_execute_write_result
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>bt_gatts_rx_proc_find_by_type_value_req</STRONG> (Thumb, 410 bytes, Stack size 88 bytes, bt_gatts.o(i.bt_gatts_rx_proc_find_by_type_value_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = bt_gatts_rx_proc_find_by_type_value_req &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_handle_by_uuid
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_ending_handle_by_handle
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_fill_value_by_rec
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_load
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>bt_gatts_rx_proc_find_information_req</STRONG> (Thumb, 404 bytes, Stack size 64 bytes, bt_gatts.o(i.bt_gatts_rx_proc_find_information_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = bt_gatts_rx_proc_find_information_req &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_handle_by_uuid
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_is_uuid16
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>bt_gatts_rx_proc_handle_value_confirmation</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, bt_gatts.o(i.bt_gatts_rx_proc_handle_value_confirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_gatts_rx_proc_handle_value_confirmation &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>bt_gatts_rx_proc_prepare_write_req</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, bt_gatts.o(i.bt_gatts_rx_proc_prepare_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_gatts_rx_proc_prepare_write_req &rArr; bt_att_send_data &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_rec
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>bt_gatts_rx_proc_read_by_group_type_req</STRONG> (Thumb, 570 bytes, Stack size 88 bytes, bt_gatts.o(i.bt_gatts_rx_proc_read_by_group_type_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = bt_gatts_rx_proc_read_by_group_type_req &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_value_length
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_handle_by_uuid
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_ending_handle_by_handle
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_fill_value_by_rec
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_load
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>bt_gatts_rx_proc_read_multiple_req</STRONG> (Thumb, 450 bytes, Stack size 72 bytes, bt_gatts.o(i.bt_gatts_rx_proc_read_multiple_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = bt_gatts_rx_proc_read_multiple_req &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_rec
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_fill_value_by_rec
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>bt_gatts_rx_proc_read_req</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, bt_gatts.o(i.bt_gatts_rx_proc_read_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = bt_gatts_rx_proc_read_req &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_rec
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_fill_value_by_rec
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>bt_gatts_rx_proc_write_req</STRONG> (Thumb, 488 bytes, Stack size 72 bytes, bt_gatts.o(i.bt_gatts_rx_proc_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 2684<LI>Call Chain = bt_gatts_rx_proc_write_req &rArr; bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_write_value_by_rec
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_security_and_rw_compare
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_rec
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_rx_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_att.o(.constdata)
</UL>
<P><STRONG><a name="[337]"></a>bt_gatts_security_and_rw_compare</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, bt_gatts.o(i.bt_gatts_security_and_rw_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_gatts_security_and_rw_compare &rArr; bt_gatts_get_authorization_check_result &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_authorization_check_result
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_req
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_multiple_req
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_prepare_write_req
</UL>

<P><STRONG><a name="[25d]"></a>bt_gatts_send_charc_value_notification_indication</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bt_gatts.o(i.bt_gatts_send_charc_value_notification_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = bt_gatts_send_charc_value_notification_indication &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_get_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_service_read_characteristic_send
</UL>

<P><STRONG><a name="[24b]"></a>bt_gatts_set_max_mtu</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bt_gatts.o(i.bt_gatts_set_max_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_gatts_set_max_mtu &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_advertise_data_init
</UL>

<P><STRONG><a name="[33a]"></a>bt_gatts_write_value_by_rec</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bt_gatts.o(i.bt_gatts_write_value_by_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_gatts_write_value_by_rec &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
</UL>

<P><STRONG><a name="[336]"></a>bt_get_gatt_server</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt_service.o(i.bt_get_gatt_server))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_get_service
</UL>

<P><STRONG><a name="[2bc]"></a>bt_get_packet_from_node</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_common.o(i.bt_get_packet_from_node))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[2e0]"></a>bt_get_status_from_hci_event_cc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_common.o(i.bt_get_status_from_hci_event_cc))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_proc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_misc_callback
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[33b]"></a>bt_handle_interrupt</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bt_platform.o(i.bt_handle_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3348<LI>Call Chain = bt_handle_interrupt &rArr; bt_hci_process_packet &rArr; bt_hci_acl_proc &rArr; bt_l2cap_le_rx_proc &rArr; bt_smp_proc &rArr; bt_sm_slave_pairing_proc &rArr;  bt_sm_slave_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_enable_interrupt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_disable_interrupt
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_check_timeout_handler
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_process
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_rx_oom
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_recv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task
</UL>

<P><STRONG><a name="[342]"></a>bt_hci_acl_le_send</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bt_hci.o(i.bt_hci_acl_le_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_hci_acl_le_send &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_send
</UL>

<P><STRONG><a name="[343]"></a>bt_hci_acl_proc</STRONG> (Thumb, 1540 bytes, Stack size 32 bytes, bt_hci.o(i.bt_hci_acl_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3316<LI>Call Chain = bt_hci_acl_proc &rArr; bt_l2cap_le_rx_proc &rArr; bt_smp_proc &rArr; bt_sm_slave_pairing_proc &rArr;  bt_sm_slave_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_append_packet
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify_from_task
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_proc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_rx_proc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_link_type
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_is_rx_oom
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
</UL>

<P><STRONG><a name="[34a]"></a>bt_hci_acl_send</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bt_hci.o(i.bt_hci_acl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_hci_acl_send &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_packet
</UL>

<P><STRONG><a name="[34b]"></a>bt_hci_acl_send_with_auto_flush</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bt_hci.o(i.bt_hci_acl_send_with_auto_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_hci_acl_send_with_auto_flush &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_packet
</UL>

<P><STRONG><a name="[34c]"></a>bt_hci_check_connection_type</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bt_hci.o(i.bt_hci_check_connection_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_hci_check_connection_type &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
</UL>

<P><STRONG><a name="[2fb]"></a>bt_hci_cmd_send</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, bt_hci.o(i.bt_hci_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_find
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_is_hci_cmd_connection_oriented
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_tx_queue_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_set_scan_mode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_sco_status
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[31e]"></a>bt_hci_cmd_send_w_pkg</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, bt_hci.o(i.bt_hci_cmd_send_w_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_hci_cmd_send_w_pkg &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_find
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_is_hci_cmd_connection_oriented
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_pending_operation
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_auth_operation
</UL>

<P><STRONG><a name="[30d]"></a>bt_hci_connection_construct</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_connection_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_hci_connection_construct &rArr; bt_linknode_insert_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
</UL>

<P><STRONG><a name="[302]"></a>bt_hci_connection_destroy</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bt_hci.o(i.bt_hci_connection_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_hci_connection_destroy &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_remove_link_node
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_get_acl_credit_counter_by_connection_type
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
</UL>

<P><STRONG><a name="[350]"></a>bt_hci_evt_proc</STRONG> (Thumb, 738 bytes, Stack size 56 bytes, bt_hci.o(i.bt_hci_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_hci_evt_proc &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel_and_callback
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_flush_timeout
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_status
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_complete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller_complete
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_sleep
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_wakeup_cmd_sent_flag
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_controller_sleep_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
</UL>

<P><STRONG><a name="[354]"></a>bt_hci_hold_rx_packet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_hold_rx_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_hci_hold_rx_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_hold_data
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
</UL>

<P><STRONG><a name="[2f9]"></a>bt_hci_lock_sleep</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_lock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_hci_lock_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[2d2]"></a>bt_hci_log</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bt_hci_log.o(i.bt_hci_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_hci_log &rArr; hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_event
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_cmd
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_acl_out
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_acl_in
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_consume_hci_log
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_time_consuming_to_hci_log
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_util_info
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_tx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
</UL>

<P><STRONG><a name="[e0]"></a>bt_hci_nocp_callback</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, bt_hci.o(i.bt_hci_nocp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_hci_nocp_callback &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_hci.o(.constdata)
</UL>
<P><STRONG><a name="[2a9]"></a>bt_hci_notify</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bt_platform.o(i.bt_hci_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_hci_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_enable_interrupt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
</UL>

<P><STRONG><a name="[345]"></a>bt_hci_notify_from_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_platform.o(i.bt_hci_notify_from_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_hci_notify_from_task &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_enable_interrupt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_rx_oom
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[340]"></a>bt_hci_process_packet</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, bt_hci.o(i.bt_hci_process_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 3332<LI>Call Chain = bt_hci_process_packet &rArr; bt_hci_acl_proc &rArr; bt_l2cap_le_rx_proc &rArr; bt_smp_proc &rArr; bt_sm_slave_pairing_proc &rArr;  bt_sm_slave_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify_from_task
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_restart_sleep_mode_timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_is_rx_oom
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
</UL>

<P><STRONG><a name="[33e]"></a>bt_hci_process_rx_oom</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bt_hci.o(i.bt_hci_process_rx_oom))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_hci_process_rx_oom &rArr; bt_hci_notify_from_task &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify_from_task
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_is_rx_oom
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
</UL>

<P><STRONG><a name="[348]"></a>bt_hci_release_rx_packet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_release_rx_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_hci_release_rx_packet &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify_from_task
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_is_rx_oom
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_release_data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
</UL>

<P><STRONG><a name="[35c]"></a>bt_hci_restart_sleep_mode_timer</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_restart_sleep_mode_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bt_hci_restart_sleep_mode_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_sleep_mode_timeout
</UL>

<P><STRONG><a name="[2d3]"></a>bt_hci_rx_cb_proc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_rx_cb_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_hci_rx_cb_proc &rArr; bt_linknode_insert_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
</UL>

<P><STRONG><a name="[2ac]"></a>bt_hci_rx_oom_notify</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_platform.o(i.bt_hci_rx_oom_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_hci_rx_oom_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_enable_interrupt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr_rx_allocate_packet
</UL>

<P><STRONG><a name="[316]"></a>bt_hci_set_controller_buffer_is_shared</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_set_controller_buffer_is_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_hci_set_controller_buffer_is_shared &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
</UL>

<P><STRONG><a name="[83]"></a>bt_hci_sleep_mode_timeout</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bt_hci.o(i.bt_hci_sleep_mode_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_hci_sleep_mode_timeout &rArr; bt_hci_restart_sleep_mode_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_controll_uart_sleep
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_status
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_sleep
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_wakeup_cmd_sent_flag
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_controller_sleep_flag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_wakeup_cmd_sent_flag
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_restart_sleep_mode_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_hci.o(i.bt_hci_restart_sleep_mode_timer)
</UL>
<P><STRONG><a name="[35e]"></a>bt_hci_trigger_controller</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_trigger_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_wakeup_cmd_sent_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
</UL>

<P><STRONG><a name="[2d8]"></a>bt_hci_tx_notify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_platform.o(i.bt_hci_tx_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_enable_interrupt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_complete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller_complete
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_nocp_callback
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send_with_auto_flush
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_le_send
</UL>

<P><STRONG><a name="[26e]"></a>bt_hci_tx_send</STRONG> (Thumb, 800 bytes, Stack size 64 bytes, bt_hci.o(i.bt_hci_tx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memmove
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_status
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_tx
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_wakeup_cmd_sent_flag
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_controller_sleep_flag
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_trigger_controller
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_restart_sleep_mode_timer
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_check_connection_type
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_get_max_acl_packet_length_by_connection_type
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_get_acl_credit_counter_by_connection_type
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
</UL>

<P><STRONG><a name="[2fa]"></a>bt_hci_unlock_sleep</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_unlock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_hci_unlock_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[39f]"></a>bt_hfp_get_lib_lastest_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hfp_get_lib_lastest_commit_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6d1]"></a>bt_hfp_get_lib_lastest_commit_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hfp_get_lib_lastest_commit_ext), UNUSED)

<P><STRONG><a name="[39e]"></a>bt_hfp_get_lib_verno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hfp_get_lib_verno_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6d2]"></a>bt_hfp_get_lib_verno_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hfp_get_lib_verno_ext), UNUSED)

<P><STRONG><a name="[42e]"></a>bt_hfp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_common.o(i.bt_hfp_init_ext))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_profiles_init
</UL>

<P><STRONG><a name="[6d3]"></a>bt_hfp_init_ext</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_common.o(i.bt_hfp_init_ext), UNUSED)

<P><STRONG><a name="[306]"></a>bt_hfp_sco_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_gap_connection.o(i.bt_hfp_sco_callback_ext))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_sco_status
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
</UL>

<P><STRONG><a name="[6d4]"></a>bt_hfp_sco_callback_ext</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_gap_connection.o(i.bt_hfp_sco_callback_ext), UNUSED)

<P><STRONG><a name="[105]"></a>bt_hid_control_l2cap_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_hid_control_l2cap_callback_default))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6d5]"></a>bt_hid_control_l2cap_callback_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_hid_control_l2cap_callback_default), UNUSED)

<P><STRONG><a name="[3ad]"></a>bt_hid_get_lib_lastest_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hid_get_lib_lastest_commit_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6d6]"></a>bt_hid_get_lib_lastest_commit_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hid_get_lib_lastest_commit_ext), UNUSED)

<P><STRONG><a name="[3ac]"></a>bt_hid_get_lib_verno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hid_get_lib_verno_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6d7]"></a>bt_hid_get_lib_verno_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_hid_get_lib_verno_ext), UNUSED)

<P><STRONG><a name="[107]"></a>bt_hid_inter_l2cap_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_hid_inter_l2cap_callback_default))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6d8]"></a>bt_hid_inter_l2cap_callback_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_hid_inter_l2cap_callback_default), UNUSED)

<P><STRONG><a name="[106]"></a>bt_hid_l2cap_context_op_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_hid_l2cap_context_op_callback_default))
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[6d9]"></a>bt_hid_l2cap_context_op_callback_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_l2cap_config.o(i.bt_hid_l2cap_context_op_callback_default), UNUSED)

<P><STRONG><a name="[361]"></a>bt_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt_platform.o(i.bt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bt_init &rArr; bt_lib_version_hci &rArr; hci_log_util_info &rArr; bt_hci_log &rArr; hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_register_timer_callback
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_init_timer
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_create_mutex
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
</UL>

<P><STRONG><a name="[26d]"></a>bt_is_bt_task_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_platform.o(i.bt_is_bt_task_running))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
</UL>

<P><STRONG><a name="[34e]"></a>bt_is_hci_cmd_connection_oriented</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, bt_common.o(i.bt_is_hci_cmd_connection_oriented))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
</UL>

<P><STRONG><a name="[85]"></a>bt_l2cap_bqb_conn_param_update_proc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bt_l2cap_le.o(i.bt_l2cap_bqb_conn_param_update_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_l2cap_bqb_conn_param_update_proc &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_le.o(i.bt_l2cap_le_signal_handle)
</UL>
<P><STRONG><a name="[385]"></a>bt_l2cap_check_valid_conn_update_params</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bt_l2cap_le.o(i.bt_l2cap_check_valid_conn_update_params))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
</UL>

<P><STRONG><a name="[366]"></a>bt_l2cap_close_channel</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bt_l2cap_util.o(i.bt_l2cap_close_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_l2cap_close_channel &rArr; bt_l2cap_free_channel &rArr; bt_l2cap_get_psm_info_by_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_free_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_deinit_channel
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_upper_conn_rsp
</UL>

<P><STRONG><a name="[368]"></a>bt_l2cap_cmd_send</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, bt_l2cap.o(i.bt_l2cap_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_infomation_rsp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_echo_rsp
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_rsp
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_req
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_rsp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_req
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_rsp
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_req
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_command_reject
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[36a]"></a>bt_l2cap_command_reject</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_command_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bt_l2cap_command_reject &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_disc_rsp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
</UL>

<P><STRONG><a name="[31a]"></a>bt_l2cap_conn_param_update_req</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bt_l2cap_le.o(i.bt_l2cap_conn_param_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
</UL>

<P><STRONG><a name="[30c]"></a>bt_l2cap_conn_param_update_rsp</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bt_l2cap_le.o(i.bt_l2cap_conn_param_update_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bt_l2cap_conn_param_update_rsp &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
</UL>

<P><STRONG><a name="[36c]"></a>bt_l2cap_connect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bt_l2cap.o(i.bt_l2cap_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = bt_l2cap_connect &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_connect
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
</UL>

<P><STRONG><a name="[322]"></a>bt_l2cap_connect_rsp</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_connect_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bt_l2cap_connect_rsp &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_l2cap_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_conncet_accept
</UL>

<P><STRONG><a name="[36e]"></a>bt_l2cap_deinit_channel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_l2cap.o(i.bt_l2cap_deinit_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_l2cap_deinit_channel &rArr; bt_l2cap_close_channel &rArr; bt_l2cap_free_channel &rArr; bt_l2cap_get_psm_info_by_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_deinit
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
</UL>

<P><STRONG><a name="[36f]"></a>bt_l2cap_disconnect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bt_l2cap.o(i.bt_l2cap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = bt_l2cap_disconnect &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_timeout_callback
</UL>

<P><STRONG><a name="[370]"></a>bt_l2cap_disconnect_channel_rsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_l2cap_sm.o(i.bt_l2cap_disconnect_channel_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bt_l2cap_disconnect_channel_rsp &rArr; bt_l2cap_send_disconnect_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_rsp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_disc_rsp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
</UL>

<P><STRONG><a name="[389]"></a>bt_l2cap_find_channel_by_local_channel_id</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_l2cap_util.o(i.bt_l2cap_find_channel_by_local_channel_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_l2cap_find_channel_by_local_channel_id
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_data_handle
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[373]"></a>bt_l2cap_find_channel_by_timer_id</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bt_l2cap_util.o(i.bt_l2cap_find_channel_by_timer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_l2cap_find_channel_by_timer_id &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rtx_timer_proc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[367]"></a>bt_l2cap_free_channel</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bt_l2cap_util.o(i.bt_l2cap_free_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_l2cap_free_channel &rArr; bt_l2cap_get_psm_info_by_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_psm_info_by_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
</UL>

<P><STRONG><a name="[375]"></a>bt_l2cap_get_bd_addr_by_channel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_l2cap.o(i.bt_l2cap_get_bd_addr_by_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_l2cap_get_bd_addr_by_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_get_bd_address
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
</UL>

<P><STRONG><a name="[376]"></a>bt_l2cap_get_callback_by_psm</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bt_l2cap.o(i.bt_l2cap_get_callback_by_psm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_l2cap_get_callback_by_psm &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_channel
</UL>

<P><STRONG><a name="[377]"></a>bt_l2cap_get_channel</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, bt_l2cap.o(i.bt_l2cap_get_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_l2cap_get_channel &rArr; bt_l2cap_get_callback_by_psm &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_callback_by_psm
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_session
</UL>

<P><STRONG><a name="[378]"></a>bt_l2cap_get_context_op_callback_by_psm</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bt_l2cap.o(i.bt_l2cap_get_context_op_callback_by_psm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_l2cap_get_context_op_callback_by_psm &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[374]"></a>bt_l2cap_get_psm_info_by_channel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bt_l2cap.o(i.bt_l2cap_get_psm_info_by_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_l2cap_get_psm_info_by_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_req
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_free_channel
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[379]"></a>bt_l2cap_get_tx_mtu</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bt_l2cap.o(i.bt_l2cap_get_tx_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_l2cap_get_tx_mtu
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_record_handle_rsp_packet
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
</UL>

<P><STRONG><a name="[37a]"></a>bt_l2cap_handle_config_req</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, bt_l2cap.o(i.bt_l2cap_handle_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_rsp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_psm_info_by_channel
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_switch_to_open_state
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
</UL>

<P><STRONG><a name="[37d]"></a>bt_l2cap_handle_config_rsp</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_handle_config_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = bt_l2cap_handle_config_rsp &rArr; bt_l2cap_send_auto_config_req &rArr; bt_l2cap_send_config_req &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_req
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_switch_to_open_state
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
</UL>

<P><STRONG><a name="[380]"></a>bt_l2cap_init_channel</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, bt_l2cap.o(i.bt_l2cap_init_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = bt_l2cap_init_channel &rArr; bt_gap_connect &rArr; bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel_info
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
</UL>

<P><STRONG><a name="[381]"></a>bt_l2cap_init_channel_info</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_init_channel_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_l2cap_init_channel_info &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[36b]"></a>bt_l2cap_le_cmd_send</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, bt_l2cap_le.o(i.bt_l2cap_le_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_send
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_rsp
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_req
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_command_reject
</UL>

<P><STRONG><a name="[382]"></a>bt_l2cap_le_command_reject</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bt_l2cap_le.o(i.bt_l2cap_le_command_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bt_l2cap_le_command_reject &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
</UL>

<P><STRONG><a name="[349]"></a>bt_l2cap_le_rx_proc</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bt_l2cap_le.o(i.bt_l2cap_le_rx_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3284<LI>Call Chain = bt_l2cap_le_rx_proc &rArr; bt_smp_proc &rArr; bt_sm_slave_pairing_proc &rArr;  bt_sm_slave_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_rx_proc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[27c]"></a>bt_l2cap_le_send</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bt_l2cap_le.o(i.bt_l2cap_le_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_l2cap_le_send &rArr; bt_hci_acl_le_send &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_le_send
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_send
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
</UL>

<P><STRONG><a name="[384]"></a>bt_l2cap_le_signal_handle</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, bt_l2cap_le.o(i.bt_l2cap_le_signal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bt_l2cap_le_signal_handle &rArr; bt_gap_le_connection_update_proc &rArr; bt_gap_le_update_connection_parameter &rArr; bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel_and_callback
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_conn_param_update_rsp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_command_reject
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_check_valid_conn_update_params
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_rx_proc
</UL>

<P><STRONG><a name="[2ee]"></a>bt_l2cap_link_status_change_notify</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, bt_l2cap.o(i.bt_l2cap_link_status_change_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_psm_info_by_channel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_fail
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[351]"></a>bt_l2cap_notify_flush_timeout</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_notify_flush_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_l2cap_notify_flush_timeout &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
</UL>

<P><STRONG><a name="[372]"></a>bt_l2cap_notify_user_and_close_channel</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bt_l2cap_util.o(i.bt_l2cap_notify_user_and_close_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_l2cap_notify_user_and_close_channel &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_connection
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rtx_timer_proc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_disc_rsp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect_channel_rsp
</UL>

<P><STRONG><a name="[386]"></a>bt_l2cap_notify_user_connect_fail_and_close_channel</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bt_l2cap_util.o(i.bt_l2cap_notify_user_connect_fail_and_close_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_l2cap_notify_user_connect_fail_and_close_channel &rArr; bt_l2cap_close_channel &rArr; bt_l2cap_free_channel &rArr; bt_l2cap_get_psm_info_by_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rtx_timer_proc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_disc_rsp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[86]"></a>bt_l2cap_oom_handler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bt_l2cap_util.o(i.bt_l2cap_oom_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bt_l2cap_oom_handler &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>
<BR>[Address Reference Count : 6]<UL><LI> bt_l2cap_sm.o(i.bt_l2cap_state_w4_upper_conn_rsp)
<LI> bt_l2cap.o(i.bt_l2cap_link_status_change_notify)
<LI> bt_l2cap_sm.o(i.bt_l2cap_state_close)
<LI> bt_l2cap_sm.o(i.bt_l2cap_state_config)
<LI> bt_l2cap_sm.o(i.bt_l2cap_state_open)
<LI> bt_l2cap_util.o(i.bt_l2cap_oom_handler)
</UL>
<P><STRONG><a name="[87]"></a>bt_l2cap_rtx_timer_proc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bt_l2cap_util.o(i.bt_l2cap_rtx_timer_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bt_l2cap_rtx_timer_proc &rArr; bt_l2cap_notify_user_and_close_channel &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_find_channel_by_timer_id
</UL>
<BR>[Address Reference Count : 4]<UL><LI> bt_l2cap.o(i.bt_l2cap_send_config_req)
<LI> bt_l2cap.o(i.bt_l2cap_send_connect_req)
<LI> bt_l2cap.o(i.bt_l2cap_send_disconnect_req)
<LI> bt_l2cap_sm.o(i.bt_l2cap_state_w4_conn_rsp)
</UL>
<P><STRONG><a name="[388]"></a>bt_l2cap_rx_data_handle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_rx_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bt_l2cap_rx_data_handle &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_find_channel_by_local_channel_id
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_proc
</UL>

<P><STRONG><a name="[347]"></a>bt_l2cap_rx_proc</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, bt_l2cap.o(i.bt_l2cap_rx_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = bt_l2cap_rx_proc &rArr; bt_l2cap_signal_handle &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_data_handle
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_retrieve_little_endian_to_16
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[27b]"></a>bt_l2cap_send</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bt_l2cap.o(i.bt_l2cap_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_psm_info_by_channel
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_handle
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_attr_handle
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_attr_handle
</UL>

<P><STRONG><a name="[37e]"></a>bt_l2cap_send_auto_config_req</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bt_l2cap.o(i.bt_l2cap_send_auto_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = bt_l2cap_send_auto_config_req &rArr; bt_l2cap_send_config_req &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_req
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_psm_info_by_channel
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_store_little_endian_from_16
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_rsp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_upper_conn_rsp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
</UL>

<P><STRONG><a name="[38d]"></a>bt_l2cap_send_config_req</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bt_l2cap_send_config_req &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
</UL>

<P><STRONG><a name="[37b]"></a>bt_l2cap_send_config_rsp</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, bt_l2cap.o(i.bt_l2cap_send_config_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_req
</UL>

<P><STRONG><a name="[38e]"></a>bt_l2cap_send_connect_req</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_send_connect_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bt_l2cap_send_connect_req &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[38f]"></a>bt_l2cap_send_connect_rsp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_send_connect_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bt_l2cap_send_connect_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_upper_conn_rsp
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[37f]"></a>bt_l2cap_send_disconnect_req</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_send_disconnect_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bt_l2cap_send_disconnect_req &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_rsp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
</UL>

<P><STRONG><a name="[371]"></a>bt_l2cap_send_disconnect_rsp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bt_l2cap.o(i.bt_l2cap_send_disconnect_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bt_l2cap_send_disconnect_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect_channel_rsp
</UL>

<P><STRONG><a name="[390]"></a>bt_l2cap_send_echo_rsp</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_l2cap.o(i.bt_l2cap_send_echo_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bt_l2cap_send_echo_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[391]"></a>bt_l2cap_send_infomation_rsp</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, bt_l2cap.o(i.bt_l2cap_send_infomation_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bt_l2cap_send_infomation_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[369]"></a>bt_l2cap_send_packet</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bt_l2cap.o(i.bt_l2cap_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bt_l2cap_send_packet &rArr; bt_hci_acl_send_with_auto_flush &rArr; bt_hci_tx_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send_with_auto_flush
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_open
</UL>

<P><STRONG><a name="[38b]"></a>bt_l2cap_signal_handle</STRONG> (Thumb, 880 bytes, Stack size 64 bytes, bt_l2cap.o(i.bt_l2cap_signal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = bt_l2cap_signal_handle &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_infomation_rsp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_echo_rsp
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel_info
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_context_op_callback_by_psm
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_command_reject
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_store_little_endian_from_32
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_store_little_endian_from_16
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_find_channel_by_timer_id
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_find_channel_by_local_channel_id
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_proc
</UL>

<P><STRONG><a name="[393]"></a>bt_l2cap_state_close</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, bt_l2cap_sm.o(i.bt_l2cap_state_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + In Cycle
<LI>Call Chain = bt_l2cap_state_close &rArr;  bt_l2cap_state_machine (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_request
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_rsp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_req
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_psm_info_by_channel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>

<P><STRONG><a name="[394]"></a>bt_l2cap_state_config</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, bt_l2cap_sm.o(i.bt_l2cap_state_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_req
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_rsp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_req
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect_channel_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>

<P><STRONG><a name="[36d]"></a>bt_l2cap_state_machine</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bt_l2cap_sm.o(i.bt_l2cap_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_upper_conn_rsp
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_disc_rsp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_data_handle
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect_rsp
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_oom_handler
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[398]"></a>bt_l2cap_state_open</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, bt_l2cap_sm.o(i.bt_l2cap_state_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = bt_l2cap_state_open &rArr; bt_l2cap_disconnect_channel_rsp &rArr; bt_l2cap_send_disconnect_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_req
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_packet
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect_channel_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>

<P><STRONG><a name="[395]"></a>bt_l2cap_state_w4_conn_rsp</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, bt_l2cap_sm.o(i.bt_l2cap_state_w4_conn_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = bt_l2cap_state_w4_conn_rsp &rArr; bt_l2cap_send_auto_config_req &rArr; bt_l2cap_send_config_req &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_disconnect_req
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_command_reject
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>

<P><STRONG><a name="[397]"></a>bt_l2cap_state_w4_disc_rsp</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bt_l2cap_sm.o(i.bt_l2cap_state_w4_disc_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_l2cap_state_w4_disc_rsp &rArr; bt_l2cap_disconnect_channel_rsp &rArr; bt_l2cap_send_disconnect_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_command_reject
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_store_little_endian_from_16
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_connect_fail_and_close_channel
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect_channel_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>

<P><STRONG><a name="[396]"></a>bt_l2cap_state_w4_upper_conn_rsp</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, bt_l2cap_sm.o(i.bt_l2cap_state_w4_upper_conn_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = bt_l2cap_state_w4_upper_conn_rsp &rArr; bt_l2cap_send_auto_config_req &rArr; bt_l2cap_send_config_req &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_connect_rsp
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_machine
</UL>

<P><STRONG><a name="[37c]"></a>bt_l2cap_switch_to_open_state</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bt_l2cap_sm.o(i.bt_l2cap_switch_to_open_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_l2cap_switch_to_open_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_rsp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_handle_config_req
</UL>

<P><STRONG><a name="[365]"></a>bt_lib_version_hci</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, bt_platform.o(i.bt_lib_version_hci))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = bt_lib_version_hci &rArr; hci_log_util_info &rArr; bt_hci_log &rArr; hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbapc_get_lib_verno
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pbapc_get_lib_lastest_commit
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hid_get_lib_verno
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hid_get_lib_lastest_commit
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hfp_get_lib_verno
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hfp_get_lib_lastest_commit
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_aws_get_lib_verno
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_aws_get_lib_lastest_commit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_avrcp_get_lib_verno
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_avrcp_get_lib_lastest_commit
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_avrcp_eh_get_lib_verno
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_avrcp_eh_get_lib_lastest_commit
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_a2dp_get_lib_verno
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_a2dp_get_lib_lastest_commit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_lib_verno
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_stack_lib_lastest_commit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lib_verno
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_util_info
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lib_lastest_commit
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_get_lib_verno
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_get_lib_lastest_commit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_init
</UL>

<P><STRONG><a name="[7b]"></a>bt_linknode_cmp_backward</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_linknode.o(i.bt_linknode_cmp_backward))
<BR>[Address Reference Count : 6]<UL><LI> bt_hci.o(i.bt_hci_process_rx_oom)
<LI> bt_common.o(i.bt_module_handle_process)
<LI> bt_gap_connection.o(i.bt_gap_disconnect)
<LI> bt_common.o(i.bt_remove_link_node)
<LI> bt_rfcomm_util.o(i.bt_rfcomm_remove_channel)
<LI> bt_l2cap_util.o(i.bt_l2cap_close_channel)
</UL>
<P><STRONG><a name="[88]"></a>bt_linknode_cmp_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_memory.o(i.bt_linknode_cmp_type))
<BR>[Address Reference Count : 2]<UL><LI> bt_memory.o(i.bt_mm_allocate_fixed_size_by_type_internal)
<LI> bt_memory.o(i.bt_mm_is_fixed_size_available_by_type)
</UL>
<P><STRONG><a name="[2f5]"></a>bt_linknode_insert_node</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bt_linknode.o(i.bt_linknode_insert_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_linknode_insert_node
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init_control_block
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_construct
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_rx_cb_proc
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send_with_auto_flush
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_send
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_le_send
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_insert_channel
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_add_channel
</UL>

<P><STRONG><a name="[2bd]"></a>bt_linknode_remove_node</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bt_linknode.o(i.bt_linknode_remove_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_linknode_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_find_conn_by_handle
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_remove_link_node
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_process
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_rx_oom
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_delete_request
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_remove_channel
</UL>

<P><STRONG><a name="[2f3]"></a>bt_linknode_travel_node</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bt_linknode.o(i.bt_linknode_travel_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_linknode_travel_node
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_is_fixed_size_available_by_type
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel_and_callback
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_remove_link_node
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection_by_handle
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_process
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_rx_oom
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_supervision_timeout
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_find
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_close_channel
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_find_channel
</UL>

<P><STRONG><a name="[2f1]"></a>bt_memcmp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bt_platform.o(i.bt_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bt_memcmp &rArr; bt_os_layer_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_equal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_write_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_prepare_write_rsp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cmp_by_address
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_is_uuid32
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[278]"></a>bt_memcpy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bt_platform.o(i.bt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_send_charc_value_notification_indication
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_information_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_fill_value_by_rec
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_copy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_data
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_send_charc_value_confirmation
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_rsp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_type_rsp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_group_type_rsp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_find_information_rsp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_find_by_type_value_rsp
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc_descriptor
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_append_packet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel_and_callback
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_service_search
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_connect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_check_timeout_handler
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_random
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_encrypt
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_infomation_rsp
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_rsp
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_attribute_search
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_search
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_attribute
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_endian_order_swap
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_copy_and_increase
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_TEST_command
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RPN_command
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_send
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_receive
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f4
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_c1
</UL>

<P><STRONG><a name="[35f]"></a>bt_memmove</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bt_platform.o(i.bt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_memmove &rArr; bt_os_layer_memmove &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
</UL>

<P><STRONG><a name="[3b1]"></a>bt_memory_init_control_block</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bt_memory.o(i.bt_memory_init_control_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_memory_init_control_block &rArr; bt_linknode_insert_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_check_size_of_value
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_init
</UL>

<P><STRONG><a name="[3b3]"></a>bt_memory_init_packet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bt_memory.o(i.bt_memory_init_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_memory_init_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_init
</UL>

<P><STRONG><a name="[281]"></a>bt_memset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bt_platform.o(i.bt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_memset &rArr; bt_os_layer_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel_info
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_sco_status
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_handle_connection
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_allocate_channel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[2f4]"></a>bt_mm_allocate_fixed_size_by_type_internal</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, bt_memory.o(i.bt_mm_allocate_fixed_size_by_type_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_mm_allocate_fixed_size_by_type_internal &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_allocate_connection
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_allocate_channel
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_allocate_session
</UL>

<P><STRONG><a name="[26b]"></a>bt_mm_allocate_packet_internal</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, bt_memory.o(i.bt_mm_allocate_packet_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_mm_allocate_packet_internal &rArr; bt_mm_dump_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_dump_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_is_allocatable_packet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_service_search
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_infomation_rsp
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_rsp
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_search
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_attribute
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_allocate_channel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_alloc_rx_packet_with_node
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_allocate_channel
</UL>

<P><STRONG><a name="[346]"></a>bt_mm_append_packet</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bt_memory.o(i.bt_mm_append_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mm_append_packet &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
</UL>

<P><STRONG><a name="[3b6]"></a>bt_mm_check_and_merge</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, bt_memory.o(i.bt_mm_check_and_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_mm_check_and_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_is_allocatable_packet
</UL>

<P><STRONG><a name="[3b5]"></a>bt_mm_dump_state</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bt_memory.o(i.bt_mm_dump_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_mm_dump_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
</UL>

<P><STRONG><a name="[2fe]"></a>bt_mm_free_fixed_size_by_type_internal</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bt_memory.o(i.bt_mm_free_fixed_size_by_type_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mm_free_fixed_size_by_type_internal &rArr; bt_linknode_insert_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_complete_rollback
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_free_connection
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_check_timeout_handler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_fail
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatt_free_channel
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_free_session
</UL>

<P><STRONG><a name="[2de]"></a>bt_mm_free_packet_internal</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, bt_memory.o(i.bt_mm_free_packet_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_is_allocatable_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_destroy
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_read_remote_used_features_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_destroy_conn_ind_buff
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_proc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_complete_rollback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_connect
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single_proc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_process_packet
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_infomation_rsp
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_config_rsp
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_pending_operation
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_acl_proc
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_delete_request
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_free_packet_with_node
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_remove_channel
</UL>

<P><STRONG><a name="[285]"></a>bt_mm_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, bt_init.o(i.bt_mm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mm_init &rArr; bt_memory_init_control_block &rArr; bt_linknode_insert_node
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init_packet
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init_control_block
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_create_task
</UL>

<P><STRONG><a name="[30b]"></a>bt_mm_is_allocatable_packet</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, bt_memory.o(i.bt_mm_is_allocatable_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bt_mm_is_allocatable_packet &rArr; bt_mm_check_and_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_check_and_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_update_proc
</UL>

<P><STRONG><a name="[1cc]"></a>bt_mm_is_fixed_size_available_by_type</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bt_memory.o(i.bt_mm_is_fixed_size_available_by_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mm_is_fixed_size_available_by_type &rArr; bt_linknode_travel_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
</UL>

<P><STRONG><a name="[387]"></a>bt_module_add_to_free_list</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bt_common.o(i.bt_module_add_to_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_module_add_to_free_list &rArr; bt_module_handle_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_trigger
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_oom_handler
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_upper_conn_rsp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_config
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_close
</UL>

<P><STRONG><a name="[3b7]"></a>bt_module_handle_notify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_platform.o(i.bt_module_handle_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_module_handle_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_enable_interrupt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_process
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
</UL>

<P><STRONG><a name="[341]"></a>bt_module_handle_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_common.o(i.bt_module_handle_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_module_handle_process &rArr; bt_module_handle_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
</UL>

<P><STRONG><a name="[3b8]"></a>bt_notify_callback_app</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_callback_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_notify_callback_app &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_parse_xml_callback
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_write_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_sync_cmd_time_out_callback
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_ext_data_notify
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
</UL>

<P><STRONG><a name="[3bd]"></a>bt_notify_check_channel_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_check_channel_valid))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_reset_parse_status
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_handle_new_msg
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_source
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_sync_cmd_time_out_callback
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback_int
</UL>

<P><STRONG><a name="[3fe]"></a>bt_notify_check_handle_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_check_handle_valid))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_callback
</UL>

<P><STRONG><a name="[3bc]"></a>bt_notify_data_handle_new_msg</STRONG> (Thumb, 260 bytes, Stack size 648 bytes, bt_notify_data_parse.o(i.bt_notify_data_handle_new_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = bt_notify_data_handle_new_msg &rArr; bt_notify_xml_parse &rArr; xml_parse_buffer &rArr; xml_parse_element &rArr; xml_process_start_tag &rArr; xml_process_start_tag_internal &rArr; xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_recv_parse_xml_callback
</UL>

<P><STRONG><a name="[3c0]"></a>bt_notify_data_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bt_notify_data_parse.o(i.bt_notify_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_notify_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_init
</UL>

<P><STRONG><a name="[3c2]"></a>bt_notify_deinit_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt_notify_data_parse.o(i.bt_notify_deinit_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_notify_deinit_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
</UL>

<P><STRONG><a name="[8b]"></a>bt_notify_dogp_callback_func</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bt_notify_task.o(i.bt_notify_dogp_callback_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = bt_notify_dogp_callback_func &rArr; bt_notify_handle_ready_to_read_ind &rArr; bt_notify_receive_data_fsm_int &rArr; bt_notify_fsm_idle_hldr &rArr; bt_notify_fsm_cmd_hldr &rArr; bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_write_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_main_recv.o(i.bt_notify_init)
</UL>
<P><STRONG><a name="[3c7]"></a>bt_notify_find_cntx_channel_by_device_addr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_find_cntx_channel_by_device_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bt_notify_find_cntx_channel_by_device_addr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_write_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data
</UL>

<P><STRONG><a name="[3e2]"></a>bt_notify_find_cntx_channel_by_handle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_find_cntx_channel_by_handle))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_handler
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_write_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
</UL>

<P><STRONG><a name="[3b9]"></a>bt_notify_get_callback_struct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_notify_data_parse.o(i.bt_notify_get_callback_struct))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_parse_xml_callback
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_write_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_sync_cmd_time_out_callback
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_ext_data_notify
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_ext_buffer
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
</UL>

<P><STRONG><a name="[3f1]"></a>bt_notify_get_cntx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_get_cntx))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_handler
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_reset_parse_status
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_recv_parse_xml_callback
</UL>

<P><STRONG><a name="[3e3]"></a>bt_notify_get_free_cntx_channel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_get_free_cntx_channel))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_spp_connect_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
</UL>

<P><STRONG><a name="[402]"></a>bt_notify_get_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
</UL>

<P><STRONG><a name="[3ee]"></a>bt_notify_get_parser_buffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_notify_data_parse.o(i.bt_notify_get_parser_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_data
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_recv_parse_xml_callback
</UL>

<P><STRONG><a name="[3fc]"></a>bt_notify_get_sdp_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_get_sdp_id))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_callback
</UL>

<P><STRONG><a name="[3d2]"></a>bt_notify_get_source</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, bt_notify_main_recv.o(i.bt_notify_get_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bt_notify_get_source
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_write_data
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
</UL>

<P><STRONG><a name="[3bb]"></a>bt_notify_get_sync_connection_number</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bt_notify_main_recv.o(i.bt_notify_get_sync_connection_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_notify_get_sync_connection_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_cmd_valid
</UL>

<P><STRONG><a name="[3c4]"></a>bt_notify_handle_connect_cnf</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, bt_notify_main_recv.o(i.bt_notify_handle_connect_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = bt_notify_handle_connect_cnf &rArr; bt_notify_send_data_handshake &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_handle
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_free_cntx_channel
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_callback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_dogp_callback_func
</UL>

<P><STRONG><a name="[3c5]"></a>bt_notify_handle_disconnect_ind</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, bt_notify_main_recv.o(i.bt_notify_handle_disconnect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bt_notify_handle_disconnect_ind &rArr; bt_notify_stop_sync_cmd_wait_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteElem
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Length
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNodeByIndex
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_deinit_data
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_handle
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_release_data
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_stop_sync_cmd_wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_callback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_dogp_callback_func
</UL>

<P><STRONG><a name="[3c6]"></a>bt_notify_handle_ready_to_read_ind</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, bt_notify_main_recv.o(i.bt_notify_handle_ready_to_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = bt_notify_handle_ready_to_read_ind &rArr; bt_notify_receive_data_fsm_int &rArr; bt_notify_fsm_idle_hldr &rArr; bt_notify_fsm_cmd_hldr &rArr; bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_handle
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_free_cntx_channel
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_device_addr
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_receive_data_fsm_int
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_dogp_callback_func
</UL>

<P><STRONG><a name="[3c3]"></a>bt_notify_handle_ready_to_write_ind</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bt_notify_main_recv.o(i.bt_notify_handle_ready_to_write_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_notify_handle_ready_to_write_ind &rArr; bt_notify_callback_app &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_handle
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_device_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_dogp_callback_func
</UL>

<P><STRONG><a name="[3e8]"></a>bt_notify_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bt_notify_init &rArr; bt_notify_service_task_init &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_callback_manager_register_callback
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createList
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_task_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_init
</UL>

<P><STRONG><a name="[3ed]"></a>bt_notify_parse_cmd</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_parse_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + In Cycle
<LI>Call Chain = bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data_header
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_reqv_cmd_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_cmd_valid
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
</UL>

<P><STRONG><a name="[3d3]"></a>bt_notify_parse_data</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, bt_notify_main_recv.o(i.bt_notify_parse_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = bt_notify_parse_data &rArr; bt_notify_read_data &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_parser_buffer
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
</UL>

<P><STRONG><a name="[3d4]"></a>bt_notify_parse_header</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_parse_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
</UL>

<P><STRONG><a name="[3f2]"></a>bt_notify_register_callback</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_notify_register_callback &rArr; bt_notify_register_callback_ext &rArr; bt_notify_register_callback_int &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback_ext
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_device_addr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_init
</UL>

<P><STRONG><a name="[3f4]"></a>bt_notify_register_callback_ext</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_register_callback_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_notify_register_callback_ext &rArr; bt_notify_register_callback_int &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback
</UL>

<P><STRONG><a name="[3c1]"></a>bt_notify_reset_parse_status</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, bt_notify_main_recv.o(i.bt_notify_reset_parse_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bt_notify_reset_parse_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_cntx
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_parse_xml_callback
</UL>

<P><STRONG><a name="[3f6]"></a>bt_notify_send_data</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = bt_notify_send_data &rArr; bt_notify_send_data_by_chnl_num &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_device_addr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_request_download
</UL>

<P><STRONG><a name="[3dc]"></a>bt_notify_send_data_by_chnl_num</STRONG> (Thumb, 174 bytes, Stack size 104 bytes, bt_notify_main_recv.o(i.bt_notify_send_data_by_chnl_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = bt_notify_send_data_by_chnl_num &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_write_data
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_gen_cmd_pre_header
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_reqv_cmd_hldr
</UL>

<P><STRONG><a name="[3d5]"></a>bt_notify_send_data_handshake</STRONG> (Thumb, 180 bytes, Stack size 104 bytes, bt_notify_main_recv.o(i.bt_notify_send_data_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = bt_notify_send_data_handshake &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_write_data
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_gen_cmd_pre_header
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
</UL>

<P><STRONG><a name="[3fa]"></a>bt_notify_service_check_node_buffer</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_service_check_node_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bt_notify_service_check_node_buffer &rArr; bt_spp_release_data &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteElem
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Length
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNodeByIndex
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_send_queue
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_release_data
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_read_spp_ring_data
</UL>

<P><STRONG><a name="[8c]"></a>bt_notify_service_event_callback</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, bt_notify_task.o(i.bt_notify_service_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = bt_notify_service_event_callback &rArr; bt_notify_handle_connect_cnf &rArr; bt_notify_send_data_handshake &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_spp_connect_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_sdp_id
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_handle_valid
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_send_ind
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_main_recv.o(i.bt_notify_init)
</UL>
<P><STRONG><a name="[401]"></a>bt_notify_service_event_handler</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bt_notify_task.o(i.bt_notify_service_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = bt_notify_service_event_handler &rArr; bt_notify_handle_ready_to_read_ind &rArr; bt_notify_receive_data_fsm_int &rArr; bt_notify_fsm_idle_hldr &rArr; bt_notify_fsm_cmd_hldr &rArr; bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_write_ind
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_cntx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_task
</UL>

<P><STRONG><a name="[3f0]"></a>bt_notify_service_read_spp_ring_data</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_service_read_spp_ring_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bt_notify_service_read_spp_ring_data &rArr; bt_notify_service_check_node_buffer &rArr; bt_spp_release_data &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
</UL>

<P><STRONG><a name="[3fb]"></a>bt_notify_service_send_queue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bt_notify_task.o(i.bt_notify_service_send_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_notify_service_send_queue &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_send_data
</UL>

<P><STRONG><a name="[3ff]"></a>bt_notify_service_spp_data_ind</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, bt_notify_task.o(i.bt_notify_service_spp_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bt_notify_service_spp_data_ind &rArr; bt_spp_hold_data &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNode
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Length
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_hold_data
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_head
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_cntx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_handle
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_callback
</UL>

<P><STRONG><a name="[400]"></a>bt_notify_service_spp_send_ind</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, bt_notify_task.o(i.bt_notify_service_spp_send_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_notify_service_spp_send_ind &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_callback
</UL>

<P><STRONG><a name="[8e]"></a>bt_notify_service_task</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, bt_notify_task.o(i.bt_notify_service_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = bt_notify_service_task &rArr; bt_notify_service_event_handler &rArr; bt_notify_handle_ready_to_read_ind &rArr; bt_notify_receive_data_fsm_int &rArr; bt_notify_fsm_idle_hldr &rArr; bt_notify_fsm_cmd_hldr &rArr; bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_task.o(i.bt_notify_service_task_init)
</UL>
<P><STRONG><a name="[3e9]"></a>bt_notify_service_task_init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_notify_task.o(i.bt_notify_service_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_notify_service_task_init &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_init
</UL>

<P><STRONG><a name="[3fd]"></a>bt_notify_spp_connect_ind</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bt_notify_main_recv.o(i.bt_notify_spp_connect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = bt_notify_spp_connect_ind &rArr; bt_spp_connect_response &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connect_response
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_free_cntx_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_callback
</UL>

<P><STRONG><a name="[3be]"></a>bt_notify_xml_parse</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, bt_notify_data_parse.o(i.bt_notify_xml_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = bt_notify_xml_parse &rArr; xml_parse_buffer &rArr; xml_parse_element &rArr; xml_process_start_tag &rArr; xml_process_start_tag_internal &rArr; xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_register_element_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_register_data_handler
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_buffer
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_new_parser
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_close_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_handle_new_msg
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data
</UL>

<P><STRONG><a name="[2ed]"></a>bt_os_give_stack_mutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_platform.o(i.bt_os_give_stack_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_os_give_stack_mutex &rArr; bt_os_layer_give_mutex &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_give_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_set_scan_mode
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_set_max_mtu
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_send_charc_value_notification_indication
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_get_mtu
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_hold_data
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc_descriptor
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_send
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_release_data
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connect_response
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_request
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
</UL>

<P><STRONG><a name="[40e]"></a>bt_os_layer_aes_encrypt</STRONG> (Thumb, 54 bytes, Stack size 296 bytes, bt_os_layer_api.o(i.bt_os_layer_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2404<LI>Call Chain = bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_encrypt
</UL>

<P><STRONG><a name="[362]"></a>bt_os_layer_create_mutex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_create_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_os_layer_create_mutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_init
</UL>

<P><STRONG><a name="[2b2]"></a>bt_os_layer_create_semaphore</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_create_semaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_os_layer_create_semaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
</UL>

<P><STRONG><a name="[292]"></a>bt_os_layer_delete_semaphore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_delete_semaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_os_layer_delete_semaphore &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_close
</UL>

<P><STRONG><a name="[33c]"></a>bt_os_layer_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_notify
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_rx_oom_notify
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify_from_task
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_os_expire
</UL>

<P><STRONG><a name="[33d]"></a>bt_os_layer_enable_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_notify
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_rx_oom_notify
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify_from_task
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_os_expire
</UL>

<P><STRONG><a name="[415]"></a>bt_os_layer_generate_random</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_generate_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_os_layer_generate_random
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_random
</UL>

<P><STRONG><a name="[2a8]"></a>bt_os_layer_get_hal_gpt_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_get_hal_gpt_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_os_layer_get_hal_gpt_time &rArr; hal_gpt_get_free_run_count &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_recv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
</UL>

<P><STRONG><a name="[417]"></a>bt_os_layer_get_system_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_get_system_tick))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_get_current_tick
</UL>

<P><STRONG><a name="[40d]"></a>bt_os_layer_give_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_give_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_os_layer_give_mutex &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
</UL>

<P><STRONG><a name="[41a]"></a>bt_os_layer_give_semaphore</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_give_semaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
</UL>

<P><STRONG><a name="[41b]"></a>bt_os_layer_give_semaphore_from_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_give_semaphore_from_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_os_layer_give_semaphore_from_isr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
</UL>

<P><STRONG><a name="[363]"></a>bt_os_layer_init_timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bt_os_layer_api.o(i.bt_os_layer_init_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_os_layer_init_timer &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_init
</UL>

<P><STRONG><a name="[41c]"></a>bt_os_layer_is_timer_active</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_is_timer_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_os_layer_is_timer_active &rArr; xTimerIsTimerActive &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_stop_timer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_start_timer
</UL>

<P><STRONG><a name="[3ae]"></a>bt_os_layer_memcmp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_os_layer_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
</UL>

<P><STRONG><a name="[3af]"></a>bt_os_layer_memcpy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>

<P><STRONG><a name="[3b0]"></a>bt_os_layer_memmove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_os_layer_memmove &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memmove
</UL>

<P><STRONG><a name="[3b4]"></a>bt_os_layer_memset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_os_layer_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
</UL>

<P><STRONG><a name="[364]"></a>bt_os_layer_register_timer_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_register_timer_callback))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_init
</UL>

<P><STRONG><a name="[2d1]"></a>bt_os_layer_serial_port_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_serial_port_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_os_layer_serial_port_control &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_serial_port_write_data
</UL>

<P><STRONG><a name="[2ad]"></a>bt_os_layer_sleep_manager_lock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_sleep_manager_lock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bt_os_layer_sleep_manager_lock_sleep &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_sleep
</UL>

<P><STRONG><a name="[296]"></a>bt_os_layer_sleep_manager_release_sleep_handle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_sleep_manager_release_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_os_layer_sleep_manager_release_sleep_handle &rArr; hal_sleep_manager_release_sleep_handle &rArr; sleepdrv_release_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_deregister_sleep_handler
</UL>

<P><STRONG><a name="[2ce]"></a>bt_os_layer_sleep_manager_set_sleep_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_sleep_manager_set_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_os_layer_sleep_manager_set_sleep_handle &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_register_sleep_handler
</UL>

<P><STRONG><a name="[295]"></a>bt_os_layer_sleep_manager_unlock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_sleep_manager_unlock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bt_os_layer_sleep_manager_unlock_sleep &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_sleep
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_deregister_sleep_handler
</UL>

<P><STRONG><a name="[2bb]"></a>bt_os_layer_sleep_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_sleep_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_os_layer_sleep_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_device
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[423]"></a>bt_os_layer_start_timer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bt_os_layer_api.o(i.bt_os_layer_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_stop_timer
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_is_timer_active
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start_timer
</UL>

<P><STRONG><a name="[424]"></a>bt_os_layer_stop_timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bt_os_layer_api.o(i.bt_os_layer_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_is_timer_active
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_start_timer
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_stop_timer
</UL>

<P><STRONG><a name="[425]"></a>bt_os_layer_take_mutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bt_os_layer_api.o(i.bt_os_layer_take_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
</UL>

<P><STRONG><a name="[427]"></a>bt_os_layer_take_semaphore</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_take_semaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_os_layer_take_semaphore &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task
</UL>

<P><STRONG><a name="[2cc]"></a>bt_os_layer_time_consuming_to_hci_log</STRONG> (Thumb, 68 bytes, Stack size 88 bytes, bt_os_layer_api.o(i.bt_os_layer_time_consuming_to_hci_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_os_layer_time_consuming_to_hci_log &rArr; bt_hci_log &rArr; hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_recv
</UL>

<P><STRONG><a name="[2eb]"></a>bt_os_take_stack_mutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_platform.o(i.bt_os_take_stack_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_take_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_set_scan_mode
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_set_max_mtu
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_send_charc_value_notification_indication
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_update_connection_parameter
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_get_mtu
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_hold_data
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_prepare_write_charc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_find_included_services
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc_descriptor
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_send
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_release_data
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connect_response
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_request
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connect
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_disconnect
</UL>

<P><STRONG><a name="[3a9]"></a>bt_pbapc_get_lib_lastest_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_pbapc_get_lib_lastest_commit_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6da]"></a>bt_pbapc_get_lib_lastest_commit_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_pbapc_get_lib_lastest_commit_ext), UNUSED)

<P><STRONG><a name="[3a8]"></a>bt_pbapc_get_lib_verno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_platform.o(i.bt_pbapc_get_lib_verno_ext))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[6db]"></a>bt_pbapc_get_lib_verno_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_platform.o(i.bt_pbapc_get_lib_verno_ext), UNUSED)

<P><STRONG><a name="[428]"></a>bt_power_on</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, bt_gap_le.o(i.bt_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = bt_power_on &rArr; bt_driver_power_on &rArr; bt_driver_patch_download &rArr; bt_driver_enable_dut_mode &rArr; bt_driver_send_with_pending_rsp &rArr; bt_free_packet_with_node &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_get_local_configuration
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task
</UL>

<P><STRONG><a name="[315]"></a>bt_profiles_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_common.o(i.bt_profiles_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_profiles_init &rArr; bt_a2dp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hfp_init
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_a2dp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_init_proc
</UL>

<P><STRONG><a name="[303]"></a>bt_remove_link_node</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bt_common.o(i.bt_remove_link_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_remove_link_node &rArr; bt_linknode_travel_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_destroy
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_connection_complete_rollback
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_notify_connection_fail
</UL>

<P><STRONG><a name="[38a]"></a>bt_retrieve_little_endian_to_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_common.o(i.bt_retrieve_little_endian_to_16))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_rx_proc
</UL>

<P><STRONG><a name="[27e]"></a>bt_reverse_key</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_common.o(i.bt_reverse_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_reverse_key
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_reverse_and_encrypt
</UL>

<P><STRONG><a name="[430]"></a>bt_rfcomm_PN_request_handler</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_PN_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_rfcomm_PN_request_handler &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_get_bd_address
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_insert_channel
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_callback_by_server_id
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
</UL>

<P><STRONG><a name="[437]"></a>bt_rfcomm_PN_response_handler</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_PN_response_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_rfcomm_PN_response_handler &rArr; bt_rfcomm_receive_PN_message &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_wait_conn_channel
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_channel
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_receive_PN_message
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
</UL>

<P><STRONG><a name="[43d]"></a>bt_rfcomm_allocate_session</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bt_rfcomm_util.o(i.bt_rfcomm_allocate_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_rfcomm_allocate_session &rArr; bt_mm_allocate_fixed_size_by_type_internal &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_context_op_callback
</UL>

<P><STRONG><a name="[457]"></a>bt_rfcomm_calculate_fcs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bt_rfcomm_util.o(i.bt_rfcomm_calculate_fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_rfcomm_calculate_fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_data
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_credit
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_TEST_command
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RPN_command
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RLS_command
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NSC_command
</UL>

<P><STRONG><a name="[43c]"></a>bt_rfcomm_channel_oom_trigger</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.bt_rfcomm_channel_oom_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_rfcomm_channel_oom_trigger &rArr; bt_module_add_to_free_list &rArr; bt_module_handle_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_disconnect
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
</UL>

<P><STRONG><a name="[43e]"></a>bt_rfcomm_channel_state_machine</STRONG> (Thumb, 1458 bytes, Stack size 64 bytes, bt_rfcomm.o(i.bt_rfcomm_channel_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = bt_rfcomm_channel_state_machine &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_if_channel_exist
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_stop_all_timer
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_credit
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
</UL>

<P><STRONG><a name="[43f]"></a>bt_rfcomm_channel_stop_all_timer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bt_rfcomm_util.o(i.bt_rfcomm_channel_stop_all_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bt_rfcomm_channel_stop_all_timer &rArr; bt_rfcomm_stop_timer &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_notify_user_and_close_channel
</UL>

<P><STRONG><a name="[444]"></a>bt_rfcomm_connect</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, bt_rfcomm.o(i.bt_rfcomm_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = bt_rfcomm_connect &rArr; bt_rfcomm_send_PN_message &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_deinit_channel
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_connect
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_pending
</UL>

<P><STRONG><a name="[446]"></a>bt_rfcomm_connect_response</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, bt_rfcomm.o(i.bt_rfcomm_connect_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = bt_rfcomm_connect_response &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_incoming
</UL>

<P><STRONG><a name="[44c]"></a>bt_rfcomm_deinit_channel</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, bt_rfcomm.o(i.bt_rfcomm_deinit_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_rfcomm_deinit_channel &rArr; bt_rfcomm_session_deinit &rArr; bt_l2cap_deinit_channel &rArr; bt_l2cap_close_channel &rArr; bt_l2cap_free_channel &rArr; bt_l2cap_get_psm_info_by_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_deinit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_pending
</UL>

<P><STRONG><a name="[44e]"></a>bt_rfcomm_disconnect</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bt_rfcomm.o(i.bt_rfcomm_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = bt_rfcomm_disconnect &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
</UL>

<P><STRONG><a name="[431]"></a>bt_rfcomm_find_channel</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bt_rfcomm_util.o(i.bt_rfcomm_find_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_rfcomm_find_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
</UL>

<P><STRONG><a name="[43b]"></a>bt_rfcomm_find_wait_conn_channel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.bt_rfcomm_find_wait_conn_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_rfcomm_find_wait_conn_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
</UL>

<P><STRONG><a name="[44f]"></a>bt_rfcomm_free_session</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bt_rfcomm_util.o(i.bt_rfcomm_free_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_rfcomm_free_session &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_context_op_callback
</UL>

<P><STRONG><a name="[450]"></a>bt_rfcomm_get_bd_address</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_rfcomm.o(i.bt_rfcomm_get_bd_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_rfcomm_get_bd_address &rArr; bt_rfcomm_session_get_bd_address &rArr; bt_l2cap_get_bd_addr_by_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_get_bd_address
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_connect
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disconnected
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_pending
</UL>

<P><STRONG><a name="[432]"></a>bt_rfcomm_get_callback_by_server_id</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bt_rfcomm_util.o(i.bt_rfcomm_get_callback_by_server_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_rfcomm_get_callback_by_server_id &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
</UL>

<P><STRONG><a name="[451]"></a>bt_rfcomm_get_credit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bt_rfcomm.o(i.bt_rfcomm_get_credit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_rfcomm_get_credit &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
</UL>

<P><STRONG><a name="[452]"></a>bt_rfcomm_get_max_frame_size</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bt_rfcomm.o(i.bt_rfcomm_get_max_frame_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_rfcomm_get_max_frame_size &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
</UL>

<P><STRONG><a name="[453]"></a>bt_rfcomm_get_server_id</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bt_rfcomm.o(i.bt_rfcomm_get_server_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_rfcomm_get_server_id &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disconnected
</UL>

<P><STRONG><a name="[454]"></a>bt_rfcomm_get_session</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_rfcomm_session.o(i.bt_rfcomm_get_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_rfcomm_get_session &rArr; bt_l2cap_get_channel &rArr; bt_l2cap_get_callback_by_psm &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_context_op_callback
</UL>

<P><STRONG><a name="[443]"></a>bt_rfcomm_if_channel_exist</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.bt_rfcomm_if_channel_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_rfcomm_if_channel_exist &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
</UL>

<P><STRONG><a name="[435]"></a>bt_rfcomm_insert_channel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.bt_rfcomm_insert_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_rfcomm_insert_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
</UL>

<P><STRONG><a name="[fd]"></a>bt_rfcomm_l2cap_callback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bt_rfcomm_session.o(i.bt_rfcomm_l2cap_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = bt_rfcomm_l2cap_callback &rArr; bt_rfcomm_session_state_machine &rArr; bt_rfcomm_session_state_open &rArr; bt_rfcomm_control_command_handle &rArr; bt_rfcomm_PN_response_handler &rArr; bt_rfcomm_receive_PN_message &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>bt_rfcomm_l2cap_context_op_callback</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bt_rfcomm_session.o(i.bt_rfcomm_l2cap_context_op_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_rfcomm_l2cap_context_op_callback &rArr; bt_rfcomm_stop_timer &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_session
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_free_session
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_allocate_session
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>bt_rfcomm_oom_connect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bt_rfcomm.o(i.bt_rfcomm_oom_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = bt_rfcomm_oom_connect &rArr; bt_rfcomm_send_PN_message &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
</UL>
<BR>[Address Reference Count : 4]<UL><LI> bt_rfcomm.o(i.bt_rfcomm_connect)
<LI> bt_rfcomm_session.o(i.bt_rfcomm_session_state_conn_incoming)
<LI> bt_rfcomm_session.o(i.bt_rfcomm_session_state_conn_pending)
<LI> bt_rfcomm_ctrl.o(i.bt_rfcomm_PN_response_handler)
</UL>
<P><STRONG><a name="[460]"></a>bt_rfcomm_packet_to_frame</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bt_rfcomm_util.o(i.bt_rfcomm_packet_to_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_rfcomm_packet_to_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
</UL>

<P><STRONG><a name="[43a]"></a>bt_rfcomm_receive_PN_message</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_receive_PN_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = bt_rfcomm_receive_PN_message &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
</UL>

<P><STRONG><a name="[440]"></a>bt_rfcomm_remove_channel</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bt_rfcomm_util.o(i.bt_rfcomm_remove_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_rfcomm_remove_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_deinit_channel
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect_response
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_notify_user_and_close_channel
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_receive_PN_message
</UL>

<P><STRONG><a name="[442]"></a>bt_rfcomm_send_MSC_command</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_send_MSC_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = bt_rfcomm_send_MSC_command &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect_response
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
</UL>

<P><STRONG><a name="[44b]"></a>bt_rfcomm_send_NSC_command</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_send_NSC_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = bt_rfcomm_send_NSC_command &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
</UL>

<P><STRONG><a name="[433]"></a>bt_rfcomm_send_NUIH_frame</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_send_NUIH_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_disconnect
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect_response
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_disconnect
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_close
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_receive_PN_message
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
</UL>

<P><STRONG><a name="[436]"></a>bt_rfcomm_send_PN_message</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_send_PN_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = bt_rfcomm_send_PN_message &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_connect
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
</UL>

<P><STRONG><a name="[449]"></a>bt_rfcomm_send_RLS_command</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_send_RLS_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = bt_rfcomm_send_RLS_command &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
</UL>

<P><STRONG><a name="[44a]"></a>bt_rfcomm_send_RPN_command</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_send_RPN_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = bt_rfcomm_send_RPN_command &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
</UL>

<P><STRONG><a name="[448]"></a>bt_rfcomm_send_TEST_command</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, bt_rfcomm_ctrl.o(i.bt_rfcomm_send_TEST_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = bt_rfcomm_send_TEST_command &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
</UL>

<P><STRONG><a name="[441]"></a>bt_rfcomm_send_credit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bt_rfcomm.o(i.bt_rfcomm_send_credit))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = bt_rfcomm_send_credit &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_oom_send_credit
</UL>

<P><STRONG><a name="[45a]"></a>bt_rfcomm_send_data</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, bt_rfcomm.o(i.bt_rfcomm_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = bt_rfcomm_send_data &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_calculate_fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
</UL>

<P><STRONG><a name="[45b]"></a>bt_rfcomm_session_conncet_accept</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_conncet_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bt_rfcomm_session_conncet_accept &rArr; bt_l2cap_connect_rsp &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_close
</UL>

<P><STRONG><a name="[445]"></a>bt_rfcomm_session_connect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bt_rfcomm_session_connect &rArr; bt_l2cap_connect &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect
</UL>

<P><STRONG><a name="[44d]"></a>bt_rfcomm_session_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_rfcomm_session_deinit &rArr; bt_l2cap_deinit_channel &rArr; bt_l2cap_close_channel &rArr; bt_l2cap_free_channel &rArr; bt_l2cap_get_psm_info_by_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_deinit_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_deinit_channel
</UL>

<P><STRONG><a name="[439]"></a>bt_rfcomm_session_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bt_rfcomm_session_disconnect &rArr; bt_l2cap_disconnect &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_timeout_handler
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_close
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_receive_PN_message
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
</UL>

<P><STRONG><a name="[434]"></a>bt_rfcomm_session_get_bd_address</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_get_bd_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_rfcomm_session_get_bd_address &rArr; bt_l2cap_get_bd_addr_by_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_bd_addr_by_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_bd_address
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
</UL>

<P><STRONG><a name="[458]"></a>bt_rfcomm_session_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_data
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_credit
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_TEST_command
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RPN_command
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RLS_command
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NSC_command
</UL>

<P><STRONG><a name="[45e]"></a>bt_rfcomm_session_stop_all_timer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_rfcomm_util.o(i.bt_rfcomm_session_stop_all_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bt_rfcomm_session_stop_all_timer &rArr; bt_rfcomm_stop_timer &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
</UL>

<P><STRONG><a name="[2f]"></a>bt_rfcomm_spp_callback</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, bt_spp.o(i.bt_rfcomm_spp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = bt_rfcomm_spp_callback &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_free_connection
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_allocate_connection
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm_util.o(.data)
</UL>
<P><STRONG><a name="[459]"></a>bt_rfcomm_start_timer</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bt_rfcomm_util.o(i.bt_rfcomm_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_rfcomm_start_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_TEST_command
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RPN_command
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RLS_command
</UL>

<P><STRONG><a name="[438]"></a>bt_rfcomm_stop_timer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.bt_rfcomm_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bt_rfcomm_stop_timer &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_stop_all_timer
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_context_op_callback
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_stop_all_timer
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
</UL>

<P><STRONG><a name="[96]"></a>bt_rfcomm_timeout_handler</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bt_rfcomm_util.o(i.bt_rfcomm_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = bt_rfcomm_timeout_handler &rArr; bt_rfcomm_session_disconnect &rArr; bt_l2cap_disconnect &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm_util.o(i.bt_rfcomm_start_timer)
</UL>
<P><STRONG><a name="[465]"></a>bt_sdp_get_16bit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bt_sdp_util.o(i.bt_sdp_get_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_sdp_get_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_endian_order_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_handle
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_continue_state
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_attribute
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_uuid
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_attribute_id
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_handle
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_attr_handle
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_attr_handle
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[466]"></a>bt_sdp_get_32bit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bt_sdp_util.o(i.bt_sdp_get_32bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_sdp_get_32bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_endian_order_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[467]"></a>bt_sdp_get_attribute</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_sdp_util.o(i.bt_sdp_get_attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_sdp_get_attribute &rArr; bt_sdp_get_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
</UL>

<P><STRONG><a name="[468]"></a>bt_sdp_get_attribute_id</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bt_sdp_util.o(i.bt_sdp_get_attribute_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_sdp_get_attribute_id &rArr; bt_sdp_get_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_attribute
</UL>

<P><STRONG><a name="[469]"></a>bt_sdp_get_continue_state</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bt_sdp_util.o(i.bt_sdp_get_continue_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_sdp_get_continue_state &rArr; bt_sdp_get_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
</UL>

<P><STRONG><a name="[46a]"></a>bt_sdp_get_data_len</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bt_sdp_util.o(i.bt_sdp_get_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_sdp_get_data_len &rArr; bt_sdp_get_32bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_32bit
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_attribute
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_next_uuid
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_next_value_ext
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_verify_search_pattern
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[46e]"></a>bt_sdp_get_data_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_sdp_util.o(i.bt_sdp_get_data_size))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_attribute
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_next_uuid
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_next_value_ext
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_verify_search_pattern
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[46d]"></a>bt_sdp_get_data_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_sdp_util.o(i.bt_sdp_get_data_type))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_attribute
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_next_uuid
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_next_value_ext
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_verify_search_pattern
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[46b]"></a>bt_sdp_get_handle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bt_sdp_util.o(i.bt_sdp_get_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_sdp_get_handle &rArr; bt_sdp_get_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
</UL>

<P><STRONG><a name="[46c]"></a>bt_sdp_get_next_uuid</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, bt_sdp_util.o(i.bt_sdp_get_next_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_sdp_get_next_uuid &rArr; bt_sdp_get_data_len &rArr; bt_sdp_get_32bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_type
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_uuid_match
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
</UL>

<P><STRONG><a name="[46f]"></a>bt_sdp_get_uuid</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bt_sdp_util.o(i.bt_sdp_get_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_sdp_get_uuid &rArr; bt_sdp_get_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_attribute
</UL>

<P><STRONG><a name="[fb]"></a>bt_sdp_l2cap_callback</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, bt_sdp_util.o(i.bt_sdp_l2cap_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = bt_sdp_l2cap_callback &rArr; bt_sdps_data_handle &rArr; bt_sdps_ser_search_attr_handle &rArr; bt_sdps_db_ser_search_attr_match_packet &rArr; bt_sdps_db_search_attr_match_packet_ext &rArr; bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_bd_addr_by_channel
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect_rsp
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_set_state
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_free_channel
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_remove_channel
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_find_channel
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_data_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>bt_sdp_l2cap_context_op_callback</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, bt_sdp_util.o(i.bt_sdp_l2cap_context_op_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bt_sdp_l2cap_context_op_callback &rArr; bt_sdps_remove_channel &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_bd_addr_by_channel
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_remove_channel
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_find_channel
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_allocate_channel
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_add_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_l2cap_config.o(.constdata)
</UL>
<P><STRONG><a name="[479]"></a>bt_sdp_set_16bit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bt_sdp_util.o(i.bt_sdp_set_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_sdp_set_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_endian_order_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_record_handle_rsp_packet
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_attribute_id
</UL>

<P><STRONG><a name="[47a]"></a>bt_sdp_set_32bit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bt_sdp_util.o(i.bt_sdp_set_32bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_sdp_set_32bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_endian_order_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_record_handle_rsp_packet
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
</UL>

<P><STRONG><a name="[47b]"></a>bt_sdp_set_attribute_id</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bt_sdp_util.o(i.bt_sdp_set_attribute_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_sdp_set_attribute_id &rArr; bt_sdp_set_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
</UL>

<P><STRONG><a name="[47c]"></a>bt_sdp_uuid_cmp</STRONG> (Thumb, 68 bytes, Stack size 568 bytes, bt_sdp_util.o(i.bt_sdp_uuid_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = bt_sdp_uuid_cmp &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_equal
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_load
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_endian_order_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_uuid_match
</UL>

<P><STRONG><a name="[47e]"></a>bt_sdpc_allocate_channel</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bt_sdpc.o(i.bt_sdpc_allocate_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_sdpc_allocate_channel &rArr; bt_mm_allocate_packet_internal &rArr; bt_mm_dump_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
</UL>

<P><STRONG><a name="[47f]"></a>bt_sdpc_cancel_callback</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bt_sdpc.o(i.bt_sdpc_cancel_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_sdpc_cancel_callback &rArr; bt_gap_find_connection &rArr; bt_linknode_travel_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_pending
</UL>

<P><STRONG><a name="[475]"></a>bt_sdpc_data_handle</STRONG> (Thumb, 586 bytes, Stack size 608 bytes, bt_sdpc.o(i.bt_sdpc_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = bt_sdpc_data_handle &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_hold_rx_packet
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_handle
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_continue_state
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_attribute
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_set_state
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_delete_request
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
</UL>

<P><STRONG><a name="[480]"></a>bt_sdpc_delete_request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bt_sdpc.o(i.bt_sdpc_delete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_sdpc_delete_request &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_free_channel
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
</UL>

<P><STRONG><a name="[473]"></a>bt_sdpc_free_channel</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bt_sdpc.o(i.bt_sdpc_free_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bt_sdpc_free_channel &rArr; bt_sdpc_delete_request &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_set_state
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_delete_request
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_timeout_callback
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
</UL>

<P><STRONG><a name="[472]"></a>bt_sdpc_handle_current_request</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, bt_sdpc.o(i.bt_sdpc_handle_current_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_deinit_channel
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_connect
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_set_state
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_delete_request
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_oom_handler
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
</UL>

<P><STRONG><a name="[482]"></a>bt_sdpc_parse_attribute</STRONG> (Thumb, 446 bytes, Stack size 88 bytes, bt_sdp_parser.o(i.bt_sdpc_parse_attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bt_sdpc_parse_attribute &rArr; bt_sdp_get_uuid &rArr; bt_sdp_get_16bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_uuid
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_type
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_attribute_id
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
</UL>

<P><STRONG><a name="[483]"></a>bt_sdpc_parse_next_value</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, bt_sdp_parser.o(i.bt_sdpc_parse_next_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bt_sdpc_parse_next_value &rArr; bt_sdpc_parse_next_value_ext &rArr; bt_sdp_get_data_len &rArr; bt_sdp_get_32bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_next_value_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
</UL>

<P><STRONG><a name="[484]"></a>bt_sdpc_parse_next_value_ext</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bt_sdp_parser.o(i.bt_sdpc_parse_next_value_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_sdpc_parse_next_value_ext &rArr; bt_sdp_get_data_len &rArr; bt_sdp_get_32bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_type
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_next_value
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[485]"></a>bt_sdpc_service_attribute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bt_sdpc.o(i.bt_sdpc_service_attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_sdpc_service_attribute &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_attribute_search
</UL>

<P><STRONG><a name="[486]"></a>bt_sdpc_service_search</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bt_sdpc.o(i.bt_sdpc_service_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_add_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_service_search
</UL>

<P><STRONG><a name="[471]"></a>bt_sdpc_set_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_sdpc.o(i.bt_sdpc_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_free_channel
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_allocate_channel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
</UL>

<P><STRONG><a name="[478]"></a>bt_sdps_add_channel</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bt_sdps.o(i.bt_sdps_add_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_sdps_add_channel &rArr; bt_sdps_find_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_find_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
</UL>

<P><STRONG><a name="[477]"></a>bt_sdps_allocate_channel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_sdps.o(i.bt_sdps_allocate_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_sdps_allocate_channel &rArr; bt_mm_allocate_packet_internal &rArr; bt_mm_dump_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
</UL>

<P><STRONG><a name="[476]"></a>bt_sdps_data_handle</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bt_sdps.o(i.bt_sdps_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = bt_sdps_data_handle &rArr; bt_sdps_ser_search_attr_handle &rArr; bt_sdps_db_ser_search_attr_match_packet &rArr; bt_sdps_db_search_attr_match_packet_ext &rArr; bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_handle
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_attr_handle
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_attr_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
</UL>

<P><STRONG><a name="[470]"></a>bt_sdps_find_channel</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bt_sdps.o(i.bt_sdps_find_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_sdps_find_channel &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_add_channel
</UL>

<P><STRONG><a name="[33]"></a>bt_sdps_get_a2dp_snk_record</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_a2dp_snk_record_ext))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[6dc]"></a>bt_sdps_get_a2dp_snk_record_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_a2dp_snk_record_ext), UNUSED)

<P><STRONG><a name="[32]"></a>bt_sdps_get_a2dp_src_record</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_a2dp_src_record_ext))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[6dd]"></a>bt_sdps_get_a2dp_src_record_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_a2dp_src_record_ext), UNUSED)

<P><STRONG><a name="[34]"></a>bt_sdps_get_avrcp_CT_record</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_avrcp_CT_record_ext))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[6de]"></a>bt_sdps_get_avrcp_CT_record_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_avrcp_CT_record_ext), UNUSED)

<P><STRONG><a name="[35]"></a>bt_sdps_get_avrcp_TG_record</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_avrcp_TG_record_ext))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[6df]"></a>bt_sdps_get_avrcp_TG_record_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_avrcp_TG_record_ext), UNUSED)

<P><STRONG><a name="[48f]"></a>bt_sdps_get_customized_record</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_callback_manager.o(i.bt_sdps_get_customized_record))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_curr_record
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
</UL>

<P><STRONG><a name="[36]"></a>bt_sdps_get_gatt_GAP_record</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_gatt_sdp.o(i.bt_sdps_get_gatt_GAP_record))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>bt_sdps_get_gatt_GATT_record</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_gatt_sdp.o(i.bt_sdps_get_gatt_GATT_record))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>bt_sdps_get_hfp_record</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_hfp_record_ext))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[6e0]"></a>bt_sdps_get_hfp_record_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_hfp_record_ext), UNUSED)

<P><STRONG><a name="[474]"></a>bt_sdps_remove_channel</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bt_sdps.o(i.bt_sdps_remove_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_sdps_remove_channel &rArr; bt_mm_free_packet_internal &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_context_op_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
</UL>

<P><STRONG><a name="[498]"></a>bt_sm_cal_key_dist_method</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bt_sm.o(i.bt_sm_cal_key_dist_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_sm_cal_key_dist_method &rArr; bt_sm_gen_key_distribute_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_gen_key_distribute_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[49a]"></a>bt_sm_cal_key_gen_method</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, bt_sm.o(i.bt_sm_cal_key_gen_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_sm_cal_key_gen_method &rArr; bt_sm_print_method &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_print_method
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[49c]"></a>bt_sm_calc_c1</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, bt_sm.o(i.bt_sm_calc_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2588<LI>Call Chain = bt_sm_calc_c1 &rArr; bt_sm_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_xor_16_byte
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_reverse_and_encrypt
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[49e]"></a>bt_sm_calc_f4</STRONG> (Thumb, 308 bytes, Stack size 104 bytes, bt_sm.o(i.bt_sm_calc_f4))
<BR><BR>[Stack]<UL><LI>Max Depth = 2716<LI>Call Chain = bt_sm_calc_f4 &rArr; bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[49f]"></a>bt_sm_calc_f5</STRONG> (Thumb, 378 bytes, Stack size 104 bytes, bt_sm.o(i.bt_sm_calc_f5))
<BR><BR>[Stack]<UL><LI>Max Depth = 2716<LI>Call Chain = bt_sm_calc_f5 &rArr; bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_copy_and_increase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[4a0]"></a>bt_sm_calc_f6</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, bt_sm.o(i.bt_sm_calc_f6))
<BR><BR>[Stack]<UL><LI>Max Depth = 2708<LI>Call Chain = bt_sm_calc_f6 &rArr; bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_copy_and_increase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[4a1]"></a>bt_sm_calc_g2</STRONG> (Thumb, 324 bytes, Stack size 104 bytes, bt_sm.o(i.bt_sm_calc_g2))
<BR><BR>[Stack]<UL><LI>Max Depth = 2716<LI>Call Chain = bt_sm_calc_g2 &rArr; bt_cmac_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_copy_and_increase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[280]"></a>bt_sm_encrypt</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, bt_platform.o(i.bt_sm_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2476<LI>Call Chain = bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_aes_encrypt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_reverse_and_encrypt
</UL>

<P><STRONG><a name="[4a2]"></a>bt_sm_find_next_dist</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bt_sm.o(i.bt_sm_find_next_dist))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_sm_find_next_dist &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[499]"></a>bt_sm_gen_key_distribute_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bt_sm.o(i.bt_sm_gen_key_distribute_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_sm_gen_key_distribute_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_dist_method
</UL>

<P><STRONG><a name="[4a3]"></a>bt_sm_key_dist_receive</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, bt_sm.o(i.bt_sm_key_dist_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_sm_key_dist_receive &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[4a4]"></a>bt_sm_key_dist_send</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, bt_sm.o(i.bt_sm_key_dist_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_sm_key_dist_send &rArr; bt_gap_le_get_local_key &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_local_key
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[9a]"></a>bt_sm_master_pairing_proc</STRONG> (Thumb, 6682 bytes, Stack size 256 bytes, bt_sm.o(i.bt_sm_master_pairing_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2972 + In Cycle
<LI>Call Chain = bt_sm_master_pairing_proc &rArr;  bt_sm_master_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_random
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_reverse_and_encrypt
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_user_input_ind
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_send
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_receive
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_find_next_dist
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_g2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f6
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f5
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f4
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_c1
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_gen_method
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_dist_method
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_sm.o(i.bt_sm_master_pairing_proc)
</UL>
<P><STRONG><a name="[4a5]"></a>bt_sm_pairing_complete_ind</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, bt_sm.o(i.bt_sm_pairing_complete_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_sm_pairing_complete_ind &rArr; bt_gap_le_disconnect &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_disconnect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[4a6]"></a>bt_sm_pairing_user_input_ind</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, bt_sm.o(i.bt_sm_pairing_user_input_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_sm_pairing_user_input_ind &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_random
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_print_method
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[49b]"></a>bt_sm_print_method</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, bt_sm.o(i.bt_sm_print_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_sm_print_method &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_user_input_ind
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_gen_method
</UL>

<P><STRONG><a name="[4a7]"></a>bt_sm_random</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_platform.o(i.bt_sm_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_sm_random &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_generate_random
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_user_input_ind
</UL>

<P><STRONG><a name="[49d]"></a>bt_sm_reverse_and_encrypt</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, bt_sm.o(i.bt_sm_reverse_and_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2540<LI>Call Chain = bt_sm_reverse_and_encrypt &rArr; bt_sm_encrypt &rArr; bt_os_layer_aes_encrypt &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_encrypt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_reverse_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_c1
</UL>

<P><STRONG><a name="[9b]"></a>bt_sm_slave_pairing_proc</STRONG> (Thumb, 6050 bytes, Stack size 264 bytes, bt_sm.o(i.bt_sm_slave_pairing_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2980 + In Cycle
<LI>Call Chain = bt_sm_slave_pairing_proc &rArr;  bt_sm_slave_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_random
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_reverse_and_encrypt
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_user_input_ind
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_send
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_key_dist_receive
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_find_next_dist
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_g2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f6
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f5
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_f4
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_c1
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_gen_method
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_cal_key_dist_method
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_sm.o(i.bt_sm_slave_pairing_proc)
</UL>
<P><STRONG><a name="[310]"></a>bt_smp_connection_destroy</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_smp.o(i.bt_smp_connection_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bt_smp_connection_destroy &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
</UL>

<P><STRONG><a name="[383]"></a>bt_smp_proc</STRONG> (Thumb, 448 bytes, Stack size 280 bytes, bt_smp.o(i.bt_smp_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 3260<LI>Call Chain = bt_smp_proc &rArr; bt_sm_slave_pairing_proc &rArr;  bt_sm_slave_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_addr2str
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_get_pairing_config
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_MM_IS_TIMER_AVAILABLE
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel_and_callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_rx_proc
</UL>

<P><STRONG><a name="[4a8]"></a>bt_smp_send</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bt_smp.o(i.bt_smp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bt_smp_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
</UL>

<P><STRONG><a name="[463]"></a>bt_spp_allocate_connection</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bt_spp_util.o(i.bt_spp_allocate_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_spp_allocate_connection &rArr; bt_mm_allocate_fixed_size_by_type_internal &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_spp_callback
</UL>

<P><STRONG><a name="[406]"></a>bt_spp_connect_response</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bt_spp.o(i.bt_spp_connect_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = bt_spp_connect_response &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_spp_connect_ind
</UL>

<P><STRONG><a name="[462]"></a>bt_spp_connection_state_machine</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bt_spp.o(i.bt_spp_connection_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disconnected
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disc_pending
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_pending
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_conn_incoming
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_send
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connect_response
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_notify_send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_connect
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_spp_callback
</UL>

<P><STRONG><a name="[464]"></a>bt_spp_free_connection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_spp_util.o(i.bt_spp_free_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_spp_free_connection &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_spp_callback
</UL>

<P><STRONG><a name="[3a7]"></a>bt_spp_get_lib_lastest_commit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_spp_util.o(i.bt_spp_get_lib_lastest_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_spp_get_lib_lastest_commit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_lib_lastest_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[3a6]"></a>bt_spp_get_lib_verno</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_spp_util.o(i.bt_spp_get_lib_verno))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_spp_get_lib_verno
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_lib_verno
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[403]"></a>bt_spp_hold_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_spp.o(i.bt_spp_hold_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_spp_hold_data &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_hold_rx_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
</UL>

<P><STRONG><a name="[4ae]"></a>bt_spp_lib_lastest_commit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_spp_lib_verno.o(i.bt_spp_lib_lastest_commit))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_get_lib_lastest_commit
</UL>

<P><STRONG><a name="[4af]"></a>bt_spp_lib_verno</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_spp_lib_verno.o(i.bt_spp_lib_verno))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_get_lib_verno
</UL>

<P><STRONG><a name="[9d]"></a>bt_spp_oom_connect</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, bt_spp.o(i.bt_spp_oom_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = bt_spp_oom_connect &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_bd_address
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_spp.o(i.bt_spp_state_disconnected)
<LI> bt_spp_sdp.o(i.bt_spp_sdp_callback)
</UL>
<P><STRONG><a name="[9e]"></a>bt_spp_oom_notify_send</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bt_spp.o(i.bt_spp_oom_notify_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = bt_spp_oom_notify_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_spp.o(i.bt_spp_state_connected)
</UL>
<P><STRONG><a name="[4b0]"></a>bt_spp_oom_trigger</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bt_spp_util.o(i.bt_spp_oom_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_spp_oom_trigger &rArr; bt_module_add_to_free_list &rArr; bt_module_handle_notify &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_add_to_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disconnected
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_connected
</UL>

<P><STRONG><a name="[3e7]"></a>bt_spp_release_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_spp.o(i.bt_spp_release_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bt_spp_release_data &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_release_rx_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
</UL>

<P><STRONG><a name="[4b1]"></a>bt_spp_sdp_attribute_search</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, bt_spp_sdp.o(i.bt_spp_sdp_attribute_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = bt_spp_sdp_attribute_search &rArr; bt_sdpc_service_attribute &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_attribute
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_callback
</UL>

<P><STRONG><a name="[9c]"></a>bt_spp_sdp_callback</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, bt_spp_sdp.o(i.bt_spp_sdp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = bt_spp_sdp_callback &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_trigger
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_bd_address
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_attribute_search
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_next_value
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_attribute
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_32bit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bt_spp.o(i.bt_spp_state_conn_pending)
<LI> bt_spp_sdp.o(i.bt_spp_sdp_attribute_search)
<LI> bt_spp_sdp.o(i.bt_spp_sdp_service_search)
</UL>
<P><STRONG><a name="[4b2]"></a>bt_spp_sdp_service_search</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, bt_spp_sdp.o(i.bt_spp_sdp_service_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_packet_internal
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_search
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_state_disconnected
</UL>

<P><STRONG><a name="[405]"></a>bt_spp_send</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bt_spp.o(i.bt_spp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_take_stack_mutex
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_give_stack_mutex
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_send_data
</UL>

<P><STRONG><a name="[39d]"></a>bt_stack_lib_lastest_commit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_stack_lib_verno.o(i.bt_stack_lib_lastest_commit))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[39c]"></a>bt_stack_lib_verno</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_stack_lib_verno.o(i.bt_stack_lib_verno))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[38c]"></a>bt_store_little_endian_from_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_common.o(i.bt_store_little_endian_from_16))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send_auto_config_req
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_disc_rsp
</UL>

<P><STRONG><a name="[392]"></a>bt_store_little_endian_from_32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt_common.o(i.bt_store_little_endian_from_32))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
</UL>

<P><STRONG><a name="[70]"></a>bt_task</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bt_task.o(i.bt_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 3388<LI>Call Chain = bt_task &rArr; bt_handle_interrupt &rArr; bt_hci_process_packet &rArr; bt_hci_acl_proc &rArr; bt_l2cap_le_rx_proc &rArr; bt_smp_proc &rArr; bt_sm_slave_pairing_proc &rArr;  bt_sm_slave_pairing_proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_power_on
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_consume_hci_log
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_generate_random_address
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_take_semaphore
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_create_semaphore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_init.o(i.bt_create_task)
</UL>
<P><STRONG><a name="[4b4]"></a>bt_task_consume_hci_log</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, bt_task.o(i.bt_task_consume_hci_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bt_task_consume_hci_log &rArr; bt_hci_log &rArr; hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task
</UL>

<P><STRONG><a name="[275]"></a>bt_timer_cancel</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bt_timer.o(i.bt_timer_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_remove_node
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_stop_timer
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start_timer
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_get_current_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_stop_timer
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel_and_callback
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_connection_destroy
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_rx_proc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_restart_sleep_mode_timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_pairing_complete_ind
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_signal_handle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_l2cap_callback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_start_wakeup_controller_timer
</UL>

<P><STRONG><a name="[352]"></a>bt_timer_cancel_and_callback</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bt_timer.o(i.bt_timer_cancel_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_timer_cancel_and_callback &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_smp_proc
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_evt_proc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
</UL>

<P><STRONG><a name="[33f]"></a>bt_timer_check_timeout_handler</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, bt_timer.o(i.bt_timer_check_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bt_timer_check_timeout_handler &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_stop_timer
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start_timer
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_get_current_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_handle_interrupt
</UL>

<P><STRONG><a name="[34d]"></a>bt_timer_find</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bt_timer.o(i.bt_timer_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_timer_find &rArr; bt_linknode_travel_node
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
</UL>

<P><STRONG><a name="[4b6]"></a>bt_timer_get_current_tick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_platform.o(i.bt_timer_get_current_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_timer_get_current_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_get_system_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_check_timeout_handler
</UL>

<P><STRONG><a name="[27a]"></a>bt_timer_start</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bt_timer.o(i.bt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_allocate_fixed_size_by_type_internal
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_stop_timer
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start_timer
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_get_current_tick
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_find
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_att_send_packet
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_start_timer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_event_callback
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_cmd_send
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_supervision_timeout
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_restart_sleep_mode_timer
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_start_query
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_slave_pairing_proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_master_pairing_proc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_signal_handle
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_le_cmd_send
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_notify_user_and_close_channel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_start_wakeup_controller_timer
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_start_timer
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_state_w4_conn_rsp
</UL>

<P><STRONG><a name="[4b7]"></a>bt_timer_start_timer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_platform.o(i.bt_timer_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_check_timeout_handler
</UL>

<P><STRONG><a name="[4b5]"></a>bt_timer_stop_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bt_platform.o(i.bt_timer_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bt_timer_stop_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_check_timeout_handler
</UL>

<P><STRONG><a name="[35b]"></a>bt_trigger_interrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bt_task.o(i.bt_trigger_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_give_semaphore_from_isr
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_give_semaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_module_handle_notify
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_notify
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_rx_oom_notify
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify_from_task
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_os_expire
</UL>

<P><STRONG><a name="[324]"></a>bt_uuid_copy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bt_uuid.o(i.bt_uuid_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_uuid_copy &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_load
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_read_by_type_rsp
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
</UL>

<P><STRONG><a name="[332]"></a>bt_uuid_equal</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bt_uuid.o(i.bt_uuid_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bt_uuid_equal &rArr; bt_memcmp &rArr; bt_os_layer_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_find_handle_by_uuid
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_uuid_cmp
</UL>

<P><STRONG><a name="[325]"></a>bt_uuid_is_uuid16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_uuid.o(i.bt_uuid_is_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bt_uuid_is_uuid16 &rArr; bt_uuid_is_uuid32 &rArr; bt_memcmp &rArr; bt_os_layer_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_is_uuid32
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_information_req
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_rx_proc_find_by_type_value_rsp
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_charc
</UL>

<P><STRONG><a name="[4b8]"></a>bt_uuid_is_uuid32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_uuid.o(i.bt_uuid_is_uuid32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bt_uuid_is_uuid32 &rArr; bt_memcmp &rArr; bt_os_layer_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_is_uuid16
</UL>

<P><STRONG><a name="[329]"></a>bt_uuid_load</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bt_uuid.o(i.bt_uuid_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_uuid_load &rArr; bt_uuid_copy &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uuid_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_read_by_group_type_req
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_rx_proc_find_by_type_value_req
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_discover_primary_service_by_uuid
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_uuid_cmp
</UL>

<P><STRONG><a name="[27f]"></a>bt_xor_16_byte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_common.o(i.bt_xor_16_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_xor_16_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmac_reverse_and_encrypt
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sm_calc_c1
</UL>

<P><STRONG><a name="[537]"></a>buffer_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gnss_driver.o(i.buffer_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_on
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_init
</UL>

<P><STRONG><a name="[651]"></a>buffer_pool_alloc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, syslog.o(i.buffer_pool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buffer_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[4b9]"></a>buffer_pool_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syslog.o(i.buffer_pool_init))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[4ba]"></a>buffer_pool_release</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, syslog.o(i.buffer_pool_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buffer_pool_release &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_task_entry
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
</UL>

<P><STRONG><a name="[2b7]"></a>chip_is_mt2523E1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, version_code.o(i.chip_is_mt2523E1))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[2b8]"></a>chip_is_mt2523E2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, version_code.o(i.chip_is_mt2523E2))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[17b]"></a>clock_get_freq_lfosc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_clock.o(i.clock_get_freq_lfosc))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_lfosc_clock (via Veneer)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
</UL>

<P><STRONG><a name="[1a5]"></a>clock_get_freq_peri_bus</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, hal_clock.o(i.clock_get_freq_peri_bus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump_info (via Veneer)
</UL>

<P><STRONG><a name="[4c0]"></a>cm4_topsm_init</STRONG> (Thumb, 176 bytes, Stack size 4 bytes, hal_cm4_topsm.o(i.cm4_topsm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cm4_topsm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_rm_init_misc
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_rm_init_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[2c5]"></a>cm4_topsm_lock_BT_MTCMOS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_cm4_topsm.o(i.cm4_topsm_lock_BT_MTCMOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cm4_topsm_lock_BT_MTCMOS &rArr; sys_topsm_mtcmos_control &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_topsm_mtcmos_control (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
</UL>

<P><STRONG><a name="[4c1]"></a>cm4_topsm_rm_init_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm4_topsm.o(i.cm4_topsm_rm_init_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_init
</UL>

<P><STRONG><a name="[4c2]"></a>cm4_topsm_rm_init_misc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_cm4_topsm.o(i.cm4_topsm_rm_init_misc))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_init
</UL>

<P><STRONG><a name="[4c3]"></a>cm4_topsm_sleep_default_callback_function</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_cm4_topsm.o(i.cm4_topsm_sleep_default_callback_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cm4_topsm_sleep_default_callback_function &rArr; hal_module_sleep_register_callback &rArr; hal_cm4_topsm_register_suspend_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_module_sleep_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[2c1]"></a>cm4_topsm_unlock_BT_MTCMOS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_cm4_topsm.o(i.cm4_topsm_unlock_BT_MTCMOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cm4_topsm_unlock_BT_MTCMOS &rArr; sys_topsm_mtcmos_control &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_topsm_mtcmos_control (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
</UL>

<P><STRONG><a name="[4c5]"></a>consume_data</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gnss_ring_buffer.o(i.consume_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = consume_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_msg_handler
</UL>

<P><STRONG><a name="[3ea]"></a>createList</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_notify_list.o(i.createList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = createList &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_init
</UL>

<P><STRONG><a name="[536]"></a>cust_gnss_gpio_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gnss_config.o(i.cust_gnss_gpio_config))
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_init
</UL>

<P><STRONG><a name="[1ee]"></a>custom_get_NORFLASH_Size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash_custom.o(i.custom_get_NORFLASH_Size))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_Init_Common
</UL>

<P><STRONG><a name="[4c7]"></a>data_item_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, nvdm_data.o(i.data_item_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = data_item_init &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_malloc
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_get_data_item_config
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
</UL>

<P><STRONG><a name="[4cb]"></a>data_item_scan</STRONG> (Thumb, 548 bytes, Stack size 72 bytes, nvdm_data.o(i.data_item_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = data_item_scan &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_add_free
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_add_drity
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_header_print_info
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_data_item_checksum
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
</UL>

<P><STRONG><a name="[4d1]"></a>date_item_migration</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, nvdm_data.o(i.date_item_migration))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_sub_free
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_migration
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_data_item_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
</UL>

<P><STRONG><a name="[271]"></a>bt_gap_ata_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_gap_le.o(i.default_bt_gap_ata_callback))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
</UL>

<P><STRONG><a name="[6e1]"></a>default_bt_gap_ata_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_gap_le.o(i.default_bt_gap_ata_callback), UNUSED)

<P><STRONG><a name="[317]"></a>bt_gap_le_set_advertising_weak</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, bt_gap_le_adv.o(i.default_bt_gap_le_set_advertising_weak))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_gap_le_set_advertising_weak
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising
</UL>

<P><STRONG><a name="[4d3]"></a>default_bt_gap_le_set_advertising_weak</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bt_gap_le_adv.o(i.default_bt_gap_le_set_advertising_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising_single
</UL>

<P><STRONG><a name="[356]"></a>bt_hci_log_enabled</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bt_hci_log.o(i.default_bt_hci_log_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
</UL>

<P><STRONG><a name="[6e2]"></a>default_bt_hci_log_enabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_hci_log.o(i.default_bt_hci_log_enabled), UNUSED)

<P><STRONG><a name="[2d]"></a>bt_rfcomm_hfp_callback</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.default_bt_rfcomm_hfp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_rfcomm_hfp_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm_util.o(.data)
</UL>
<P><STRONG><a name="[4d4]"></a>default_bt_rfcomm_hfp_callback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.default_bt_rfcomm_hfp_callback), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>

<P><STRONG><a name="[2e]"></a>bt_rfcomm_obex_callback</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.default_bt_rfcomm_obex_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_rfcomm_obex_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm_util.o(.data)
</UL>
<P><STRONG><a name="[4d5]"></a>default_bt_rfcomm_obex_callback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bt_rfcomm_util.o(i.default_bt_rfcomm_obex_callback), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>

<P><STRONG><a name="[3e6]"></a>deleteElem</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_notify_list.o(i.deleteElem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = deleteElem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
</UL>

<P><STRONG><a name="[4d9]"></a>dma_disable_clock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.dma_disable_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_disable_clock &rArr; hal_clock_disable &rArr; _hal_clock_disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_deinit
</UL>

<P><STRONG><a name="[4da]"></a>dma_enable_clock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.dma_enable_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_enable_clock &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
</UL>

<P><STRONG><a name="[578]"></a>dsp_topsm_init</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, hal_dsp_topsm.o(i.dsp_topsm_init))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[4]"></a>dump_module_buffer</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, syslog.o(i.dump_module_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dump_module_buffer &rArr; vdump_module_buffer &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>
<BR>[Address Reference Count : 12]<UL><LI> ble_app_common.o(.data)
<LI> gnss_api.o(.data)
<LI> hal_log.o(.data)
<LI> ble_dogp_adp_service.o(.data)
<LI> ble_dogp_service.o(.data)
<LI> bt_debug.o(.data)
<LI> at_command.o(.data)
<LI> syslog.o(.data)
<LI> bt_notify_data_parse.o(.data)
<LI> ble_dogp_common.o(.data)
<LI> atci_main.o(.data)
<LI> bt_notify_main_recv.o(.data)
</UL>
<P><STRONG><a name="[4de]"></a>dvfs_notify_is_valid</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hal_dvfs_internal.o(i.dvfs_notify_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dvfs_notify_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_target_frequency
</UL>

<P><STRONG><a name="[4df]"></a>dvfs_notify_prepare</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hal_dvfs_internal.o(i.dvfs_notify_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dvfs_notify_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_target_frequency
</UL>

<P><STRONG><a name="[4e1]"></a>dvfs_query_frequency</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_dvfs_internal.o(i.dvfs_query_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dvfs_query_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_domain_initialize
</UL>

<P><STRONG><a name="[4dc]"></a>dvfs_register_domain</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_dvfs_internal.o(i.dvfs_register_domain))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dvfs_register_domain &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_domain_initialize
</UL>

<P><STRONG><a name="[4e0]"></a>dvfs_vcore_domain_initialize</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, hal_dvfs_internal_vcore.o(i.dvfs_vcore_domain_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dvfs_vcore_domain_initialize &rArr; dvfs_register_domain &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_register_domain
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_query_frequency
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dvfs_init
</UL>

<P><STRONG><a name="[55d]"></a>eint_ack_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_eint.o(i.eint_ack_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_deinit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_isr
</UL>

<P><STRONG><a name="[4e2]"></a>eint_mask_wakeup_source</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_eint.o(i.eint_mask_wakeup_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eint_mask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask
</UL>

<P><STRONG><a name="[4e3]"></a>eint_unmask_wakeup_source</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_eint.o(i.eint_unmask_wakeup_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eint_unmask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
</UL>

<P><STRONG><a name="[4eb]"></a>epo_demo_read_data</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, epo_demo.o(i.epo_demo_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = epo_demo_read_data &rArr; hal_flash_read &rArr; readRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_get_segment
</UL>

<P><STRONG><a name="[4ee]"></a>epo_demo_send_assistance_data</STRONG> (Thumb, 208 bytes, Stack size 224 bytes, epo_demo.o(i.epo_demo_send_assistance_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = epo_demo_send_assistance_data &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_time
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_repeat_timer
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_send_cmd
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_read_data
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_init_mem_info
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_get_segment
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_process_pmtk_response
</UL>

<P><STRONG><a name="[cb]"></a>epo_download_task</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, epo_download.o(i.epo_download_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = epo_download_task &rArr; epo_btnotify_msg_hdlr &rArr; epo_request_download &rArr; bt_notify_send_data &rArr; bt_notify_send_data_by_chnl_num &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4e9]"></a>epo_update_notify</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, epo_download.o(i.epo_update_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = epo_update_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
</UL>

<P><STRONG><a name="[4fa]"></a>eraseRawDiskBlock</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_flash_disk.o(i.eraseRawDiskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = eraseRawDiskBlock &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_FDM_lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>

<P><STRONG><a name="[630]"></a>exception_reboot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exception_handler.o(i.exception_reboot))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[5ad]"></a>exception_register_callbacks</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, exception_handler.o(i.exception_register_callbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exception_register_callbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[4fb]"></a>excute_timer</STRONG> (Thumb, 260 bytes, Stack size 152 bytes, gnss_timer.o(i.excute_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = excute_timer &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_timer_item_to_free_list
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
</UL>

<P><STRONG><a name="[4ff]"></a>f32k_measure_clock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hal_rtc.o(i.f32k_measure_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = f32k_measure_clock &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lpd_init
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_eosc32_calibration
</UL>

<P><STRONG><a name="[64]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_init.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fputc &rArr; log_write &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</UL>
<BR>[Address Reference Count : 3]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[515]"></a>get_rawdisk_error_code</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_flash_disk.o(i.get_rawdisk_error_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_rawdisk_error_code &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>

<P><STRONG><a name="[1]"></a>gnss_agps_at_handler</STRONG> (Thumb, 154 bytes, Stack size 1056 bytes, gnss_bridge_task.o(i.gnss_agps_at_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = gnss_agps_at_handler &rArr; serial_port_config_write_dev_number &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_setting
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_deinit
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_port_reinit
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_number
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_bridge_task.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>gnss_agps_pmtk_cmd_handler</STRONG> (Thumb, 122 bytes, Stack size 1056 bytes, gnss_bridge_task.o(i.gnss_agps_pmtk_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = gnss_agps_pmtk_cmd_handler &rArr; atci_send_response &rArr; atci_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_bridge_task.o(.data)
</UL>
<P><STRONG><a name="[51a]"></a>gnss_app_forward_cmd</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gnss_app.o(i.gnss_app_forward_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gnss_app_forward_cmd &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_msg_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_pmtk_cmd_handler
</UL>

<P><STRONG><a name="[4f0]"></a>gnss_app_send_cmd</STRONG> (Thumb, 174 bytes, Stack size 288 bytes, gnss_app.o(i.gnss_app_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_send_command
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_wakeup_handle
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_set_preport_and_fix_period
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data_int
</UL>

<P><STRONG><a name="[521]"></a>gnss_bridge_atcmd_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gnss_bridge_task.o(i.gnss_bridge_atcmd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gnss_bridge_atcmd_init &rArr; atci_register_handler &rArr; atci_local_check_duplicate_cm4_handler &rArr; atci_local_find_cm4_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_register_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_create
</UL>

<P><STRONG><a name="[525]"></a>gnss_bridge_port_init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, gnss_uart_bridge.o(i.gnss_bridge_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = gnss_bridge_port_init &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_port_reinit
</UL>

<P><STRONG><a name="[519]"></a>gnss_bridge_port_reinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gnss_bridge_task.o(i.gnss_bridge_port_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = gnss_bridge_port_reinit &rArr; gnss_bridge_port_init &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_serial_port_deinit
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_port_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
</UL>

<P><STRONG><a name="[528]"></a>gnss_bridge_put_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gnss_bridge_task.o(i.gnss_bridge_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gnss_bridge_put_data &rArr; put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_callback_func
</UL>

<P><STRONG><a name="[523]"></a>gnss_bridge_read_command</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gnss_uart_bridge.o(i.gnss_bridge_read_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gnss_bridge_read_command &rArr; gnss_serial_port_read_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_serial_port_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_msg_handler
</UL>

<P><STRONG><a name="[524]"></a>gnss_bridge_send_debug_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gnss_uart_bridge.o(i.gnss_bridge_send_debug_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gnss_bridge_send_debug_data &rArr; gnss_serial_port_send_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_serial_port_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_msg_handler
</UL>

<P><STRONG><a name="[527]"></a>gnss_bridge_task_init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, gnss_bridge_task.o(i.gnss_bridge_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gnss_bridge_task_init &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buf_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_port_reinit
</UL>

<P><STRONG><a name="[a5]"></a>gnss_bt_app_event_callback</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bt_common.o(i.gnss_bt_app_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = gnss_bt_app_event_callback &rArr; gnss_save_link_key &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_set_scan_mode
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_save_link_key
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_find_link_key_edr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epo_download.o(i.epo_download_init)
</UL>
<P><STRONG><a name="[a6]"></a>gnss_bt_gap_get_local_configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bt_common.o(i.gnss_bt_gap_get_local_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gnss_bt_gap_get_local_configuration &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epo_download.o(i.epo_download_init)
</UL>
<P><STRONG><a name="[a7]"></a>gnss_bt_gap_le_get_bonding_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_common.o(i.gnss_bt_gap_le_get_bonding_info))
<BR>[Address Reference Count : 1]<UL><LI> epo_download.o(i.epo_download_init)
</UL>
<P><STRONG><a name="[a9]"></a>gnss_bt_gap_le_get_local_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_common.o(i.gnss_bt_gap_le_get_local_config))
<BR>[Address Reference Count : 1]<UL><LI> epo_download.o(i.epo_download_init)
</UL>
<P><STRONG><a name="[a8]"></a>gnss_bt_gap_le_get_pairing_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_common.o(i.gnss_bt_gap_le_get_pairing_config))
<BR>[Address Reference Count : 1]<UL><LI> epo_download.o(i.epo_download_init)
</UL>
<P><STRONG><a name="[52e]"></a>gnss_demo_app_config</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, gnss_app.o(i.gnss_demo_app_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gnss_demo_app_config &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_main
</UL>

<P><STRONG><a name="[52f]"></a>gnss_demo_app_create</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, gnss_app.o(i.gnss_demo_app_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gnss_demo_app_create &rArr; gnss_task_init &rArr; gnss_init &rArr; gnss_driver_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_atcmd_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[532]"></a>gnss_demo_app_start</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gnss_app.o(i.gnss_demo_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gnss_demo_app_start &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_main
</UL>

<P><STRONG><a name="[b1]"></a>gnss_driver_eint_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gnss_driver.o(i.gnss_driver_eint_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gnss_driver_eint_irq &rArr; hal_eint_mask &rArr; eint_mask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_driver.o(i.gnss_driver_power_on)
</UL>
<P><STRONG><a name="[535]"></a>gnss_driver_init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, gnss_driver.o(i.gnss_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = gnss_driver_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cust_gnss_gpio_config
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_init
</UL>

<P><STRONG><a name="[53b]"></a>gnss_driver_power_off</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gnss_driver.o(i.gnss_driver_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gnss_driver_power_off &rArr; hal_eint_deinit &rArr; hal_eint_mask &rArr; eint_mask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_output
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_direction
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_power_off
</UL>

<P><STRONG><a name="[53e]"></a>gnss_driver_power_on</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gnss_driver.o(i.gnss_driver_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gnss_driver_power_on &rArr; hal_eint_init &rArr; hal_eint_set_debounce_time &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_output
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_direction
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_register_callback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_power_on
</UL>

<P><STRONG><a name="[b0]"></a>gnss_driver_uart_irq</STRONG> (Thumb, 164 bytes, Stack size 5144 bytes, gnss_driver.o(i.gnss_driver_uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 5176<LI>Call Chain = gnss_driver_uart_irq &rArr; hal_uart_receive_dma &rArr; vdma_pop_data
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_driver.o(i.gnss_driver_init)
</UL>
<P><STRONG><a name="[54b]"></a>gnss_driver_uart_read</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gnss_driver.o(i.gnss_driver_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gnss_driver_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_read_sentence
</UL>

<P><STRONG><a name="[541]"></a>gnss_driver_uart_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gnss_driver.o(i.gnss_driver_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_send_command
</UL>

<P><STRONG><a name="[543]"></a>gnss_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gnss_api.o(i.gnss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gnss_init &rArr; gnss_driver_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_init
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_init
</UL>

<P><STRONG><a name="[4f6]"></a>gnss_load_link_key</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bt_common.o(i.gnss_load_link_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gnss_load_link_key &rArr; nvdm_read_data_item &rArr; search_data_item_by_name &rArr; peb_read_data &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_init
</UL>

<P><STRONG><a name="[546]"></a>gnss_power_off</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gnss_api.o(i.gnss_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gnss_power_off &rArr; gnss_driver_power_off &rArr; hal_eint_deinit &rArr; hal_eint_mask &rArr; eint_mask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_off
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_on_off_timer_handle_func
</UL>

<P><STRONG><a name="[548]"></a>gnss_power_on</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gnss_api.o(i.gnss_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gnss_power_on &rArr; gnss_driver_power_on &rArr; hal_eint_init &rArr; hal_eint_set_debounce_time &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_on
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_on_off_timer_handle_func
</UL>

<P><STRONG><a name="[54a]"></a>gnss_read_sentence</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, gnss_api.o(i.gnss_read_sentence))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gnss_read_sentence &rArr; gnss_driver_uart_read
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_nmea_checksum
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_uart_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
</UL>

<P><STRONG><a name="[52d]"></a>gnss_save_link_key</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bt_common.o(i.gnss_save_link_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = gnss_save_link_key &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_app_event_callback
</UL>

<P><STRONG><a name="[51f]"></a>gnss_send_command</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gnss_api.o(i.gnss_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd_helper
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_send_cmd
</UL>

<P><STRONG><a name="[ab]"></a>gnss_serial_port_data_callback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gnss_uart_bridge.o(i.gnss_serial_port_data_callback))
<BR>[Address Reference Count : 1]<UL><LI> gnss_uart_bridge.o(i.gnss_bridge_port_init)
</UL>
<P><STRONG><a name="[526]"></a>gnss_serial_port_deinit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gnss_uart_bridge.o(i.gnss_serial_port_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gnss_serial_port_deinit &rArr; serial_port_close
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_port_reinit
</UL>

<P><STRONG><a name="[52a]"></a>gnss_serial_port_read_data</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gnss_uart_bridge.o(i.gnss_serial_port_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gnss_serial_port_read_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_read_command
</UL>

<P><STRONG><a name="[52b]"></a>gnss_serial_port_send_data</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gnss_uart_bridge.o(i.gnss_serial_port_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gnss_serial_port_send_data &rArr; serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_send_debug_data
</UL>

<P><STRONG><a name="[4f2]"></a>gnss_start_repeat_timer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gnss_timer.o(i.gnss_start_repeat_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gnss_start_repeat_timer &rArr; gnss_start_timer_internal &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
</UL>

<P><STRONG><a name="[547]"></a>gnss_start_timer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gnss_timer.o(i.gnss_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gnss_start_timer &rArr; gnss_start_timer_internal &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_wakeup_handle
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_on_off_timer_handle_func
</UL>

<P><STRONG><a name="[4f3]"></a>gnss_stop_timer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gnss_timer.o(i.gnss_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gnss_stop_timer &rArr; delete_timer_item &rArr; gnss_ajust_timer &rArr; move_exp_timer_to_excute_list &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_timer_item
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data_int
</UL>

<P><STRONG><a name="[552]"></a>gnss_timer_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gnss_timer.o(i.gnss_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gnss_timer_init &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_init
</UL>

<P><STRONG><a name="[b2]"></a>gnss_uart_handle</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gnss_api.o(i.gnss_uart_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gnss_uart_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_api.o(i.gnss_init)
</UL>
<P><STRONG><a name="[261]"></a>gpio_dir_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_dir_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_dir_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[260]"></a>gpio_mode_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, bsp_gpio_ept_config.o(i.gpio_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_mode_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[264]"></a>gpio_output_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_output_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[262]"></a>gpio_pull_sel_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_pull_sel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pull_sel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[263]"></a>gpio_pullen_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_pullen_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pullen_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[265]"></a>gpio_pupd_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_pupd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pupd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[266]"></a>gpio_r0_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_r0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_r0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[267]"></a>gpio_r1_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_gpio_ept_config.o(i.gpio_r1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_r1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>

<P><STRONG><a name="[608]"></a>hal_cache_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_enable))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[555]"></a>hal_cache_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal_cache.o(i.hal_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_init &rArr; hal_cache_invalidate_all_cache_lines
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[150]"></a>hal_cache_is_cacheable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_cache.o(i.hal_cache_is_cacheable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_is_cacheable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume (via Veneer)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_configure
</UL>

<P><STRONG><a name="[556]"></a>hal_cache_region_config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_cache.o(i.hal_cache_region_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_cache_region_config
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[607]"></a>hal_cache_region_disable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_region_disable))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[606]"></a>hal_cache_region_enable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_region_enable))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[605]"></a>hal_cache_set_size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[18d]"></a>hal_clock_get_mcu_clock_frequency</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_clock.o(i.hal_clock_get_mcu_clock_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_clock_get_mcu_clock_frequency &rArr; freq_monitor &rArr; clock_get_freq_meter &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_monitor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_frequency (via Veneer)
</UL>

<P><STRONG><a name="[557]"></a>hal_cm4_topsm_register_resume_cb</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_cm4_topsm.o(i.hal_cm4_topsm_register_resume_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_cm4_topsm_register_resume_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_module_sleep_register_callback
</UL>

<P><STRONG><a name="[558]"></a>hal_cm4_topsm_register_suspend_cb</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_cm4_topsm.o(i.hal_cm4_topsm_register_suspend_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_cm4_topsm_register_suspend_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_module_sleep_register_callback
</UL>

<P><STRONG><a name="[559]"></a>hal_dcxo_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_dcxo.o(i.hal_dcxo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hal_dcxo_init &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[55a]"></a>hal_dvfs_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_dvfs.o(i.hal_dvfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hal_dvfs_init &rArr; dvfs_vcore_domain_initialize &rArr; dvfs_register_domain &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_domain_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[55b]"></a>hal_dvfs_target_cpu_frequency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_dvfs.o(i.hal_dvfs_target_cpu_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hal_dvfs_target_cpu_frequency &rArr; dvfs_target_frequency &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_target_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[11d]"></a>hal_dwt_init</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, hal_dwt.o(i.hal_dwt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hal_dwt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via Veneer)
</UL>

<P><STRONG><a name="[643]"></a>hal_dwt_request_watchpoint</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, hal_dwt.o(i.hal_dwt_request_watchpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_dwt_request_watchpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck
</UL>

<P><STRONG><a name="[55c]"></a>hal_dwt_reset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hal_dwt.o(i.hal_dwt_reset))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_init
</UL>

<P><STRONG><a name="[297]"></a>hal_eint_deinit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_eint.o(i.hal_eint_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_eint_deinit &rArr; hal_eint_mask &rArr; eint_mask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_ack_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_off
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_deinit
</UL>

<P><STRONG><a name="[29e]"></a>hal_eint_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hal_eint.o(i.hal_eint_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_eint_init &rArr; hal_eint_set_debounce_time &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_trigger_mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_debounce_time
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_ack_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_on
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_eint
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_init
</UL>

<P><STRONG><a name="[534]"></a>hal_eint_mask</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_eint.o(i.hal_eint_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_eint_mask &rArr; eint_mask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_mask_wakeup_source
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_deinit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_eint_irq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_isr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_eint_callback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_handler
</UL>

<P><STRONG><a name="[29f]"></a>hal_eint_register_callback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_eint.o(i.hal_eint_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_eint_register_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_on
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_eint
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_init
</UL>

<P><STRONG><a name="[560]"></a>hal_eint_set_debounce_time</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hal_eint.o(i.hal_eint_set_debounce_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_eint_set_debounce_time &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_caculate_debounce_time
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
</UL>

<P><STRONG><a name="[55f]"></a>hal_eint_set_trigger_mode</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, hal_eint.o(i.hal_eint_set_trigger_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_eint_set_trigger_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
</UL>

<P><STRONG><a name="[2a0]"></a>hal_eint_unmask</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_eint.o(i.hal_eint_unmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_eint_unmask &rArr; eint_unmask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_unmask_wakeup_source
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_sleep_timer_handle_func
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_on
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_eint
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_eint_callback
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_complete
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_init
</UL>

<P><STRONG><a name="[4f8]"></a>hal_flash_erase</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_flash_disk.o(i.hal_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hal_flash_erase &rArr; eraseRawDiskBlock &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rawdisk_error_code
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseRawDiskBlock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_BlockIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_start
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_pack
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_erase
</UL>

<P><STRONG><a name="[562]"></a>hal_flash_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_flash_disk.o(i.hal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hal_flash_init &rArr; NOR_init &rArr; Custom_NOR_Init &rArr; CMEM_Init_FullDriver &rArr; SF_DAL_Init_Driver &rArr; SF_DAL_Init_Vendor &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_init
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[4ed]"></a>hal_flash_read</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_flash_disk.o(i.hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_flash_read &rArr; readRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRawDiskData
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rawdisk_error_code
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_read_data
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_read
</UL>

<P><STRONG><a name="[4f9]"></a>hal_flash_write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal_flash_disk.o(i.hal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_is_cacheable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line (via Veneer)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rawdisk_error_code
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_pack
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_write
</UL>

<P><STRONG><a name="[53c]"></a>hal_gpio_set_direction</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_gpio.o(i.hal_gpio_set_direction))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_on
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_off
</UL>

<P><STRONG><a name="[53d]"></a>hal_gpio_set_output</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_gpio.o(i.hal_gpio_set_output))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_on
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_power_off
</UL>

<P><STRONG><a name="[565]"></a>hal_gpio_set_pupd_register</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hal_gpio.o(i.hal_gpio_set_pupd_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_gpio_set_pupd_register &rArr; is_pin_with_pullsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pin_with_pullsel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_msdc_mode
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_gpio_mode
</UL>

<P><STRONG><a name="[567]"></a>hal_gpt_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hal_gpt.o(i.hal_gpt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = hal_gpt_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_open_clock_source (via Veneer)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[c0]"></a>hal_i2c_backup_all_register</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, hal_i2c_master.o(i.hal_i2c_backup_all_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_i2c_backup_all_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[c1]"></a>hal_i2c_restore_all_register</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, hal_i2c_master.o(i.hal_i2c_restore_all_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_i2c_restore_all_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[4c4]"></a>hal_module_sleep_register_callback</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hal_misc.o(i.hal_module_sleep_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_module_sleep_register_callback &rArr; hal_cm4_topsm_register_suspend_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cm4_topsm_register_suspend_cb
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cm4_topsm_register_resume_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_sleep_default_callback_function
</UL>

<P><STRONG><a name="[5bc]"></a>hal_mpu_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_mpu.o(i.hal_mpu_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[569]"></a>hal_mpu_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, hal_mpu.o(i.hal_mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_mpu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[56a]"></a>hal_mpu_region_configure</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, hal_mpu.o(i.hal_mpu_region_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_mpu_region_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[5bb]"></a>hal_mpu_region_disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_mpu.o(i.hal_mpu_region_disable))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[5ba]"></a>hal_mpu_region_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_mpu.o(i.hal_mpu_region_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[58e]"></a>hal_nvic_disable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_nvic.o(i.hal_nvic_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_nvic_set
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[55e]"></a>hal_nvic_enable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_nvic.o(i.hal_nvic_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_nvic_set
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[56b]"></a>hal_nvic_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_nvic.o(i.hal_nvic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nvic_init
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[2cd]"></a>hal_nvic_register_isr_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_nvic.o(i.hal_nvic_register_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_register_irq
</UL>

<P><STRONG><a name="[56e]"></a>hal_pinmux_set_function</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal_gpio.o(i.hal_pinmux_set_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pinmux_set_function
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_msdc_mode
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_gpio_mode
</UL>

<P><STRONG><a name="[60f]"></a>hal_rtc_get_alarm</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, hal_rtc.o(i.hal_rtc_get_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_check_alarm_power_on
</UL>

<P><STRONG><a name="[4ef]"></a>hal_rtc_get_time</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_rtc.o(i.hal_rtc_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_rtc_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_process_pmtk_response
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_check_alarm_power_on
</UL>

<P><STRONG><a name="[56f]"></a>hal_rtc_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hal_rtc.o(i.hal_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = hal_rtc_init &rArr; f32k_osc32_Init &rArr; rtc_set_power_key &rArr; rtc_lpd_init &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_eint
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_2sec_reboot
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_check_alarm_power_on
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[574]"></a>hal_rtc_set_time</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, hal_rtc.o(i.hal_rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = hal_rtc_set_time &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_is_time_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_by_pmtk_process
</UL>

<P><STRONG><a name="[576]"></a>hal_sleep_manager_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = hal_sleep_manager_init &rArr; hal_gpt_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_driver_init
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_topsm_init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_sleep_default_callback_function
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm4_topsm_init
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_topsm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[57b]"></a>hal_sleep_manager_is_sleep_handle_alive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_sleep_manager.o(i.hal_sleep_manager_is_sleep_handle_alive))
<BR><BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle_status
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
</UL>

<P><STRONG><a name="[41f]"></a>hal_sleep_manager_lock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_lock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_wakeup_handle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_lock_sleep
</UL>

<P><STRONG><a name="[420]"></a>hal_sleep_manager_release_sleep_handle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_release_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_sleep_manager_release_sleep_handle &rArr; sleepdrv_release_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_release_sleep_handle
</UL>

<P><STRONG><a name="[421]"></a>hal_sleep_manager_set_sleep_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_set_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_init
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_set_sleep_handle
</UL>

<P><STRONG><a name="[422]"></a>hal_sleep_manager_unlock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_unlock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_sleep_timer_handle_func
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_unlock_sleep
</UL>

<P><STRONG><a name="[42c]"></a>hal_trng_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_trng.o(i.hal_trng_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_trng_deinit &rArr; trng_deinit &rArr; hal_clock_disable &rArr; _hal_clock_disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_generate_random_address
</UL>

<P><STRONG><a name="[42b]"></a>hal_trng_get_generated_random_number</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_trng.o(i.hal_trng_get_generated_random_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_trng_get_generated_random_number &rArr; trng_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_stop
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_start
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get_random_data
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_enable_mode
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_config_timeout_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_generate_random_address
</UL>

<P><STRONG><a name="[42a]"></a>hal_trng_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_trng.o(i.hal_trng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_trng_init &rArr; trng_init &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task_generate_random_address
</UL>

<P><STRONG><a name="[588]"></a>hal_uart_deinit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, hal_uart.o(i.hal_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hal_uart_deinit &rArr; vdma_deinit &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable (via Veneer)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_stop
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_disable_interrupt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_deinit
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset_default_value
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_empty
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_open
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_deinit
</UL>

<P><STRONG><a name="[53f]"></a>hal_uart_get_available_receive_bytes</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_get_available_receive_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_get_available_receive_bytes &rArr; vdma_get_available_receive_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_receive_bytes
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_uart_irq
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_control
</UL>

<P><STRONG><a name="[591]"></a>hal_uart_get_available_send_space</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_get_available_send_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_get_available_send_space &rArr; vdma_get_available_send_space
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_send_space
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_control
</UL>

<P><STRONG><a name="[538]"></a>hal_uart_init</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, hal_uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_sleep_mode
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_format
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_fifo
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset_default_value
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_is_valid
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_init
</UL>

<P><STRONG><a name="[599]"></a>hal_uart_put_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(i.hal_uart_put_char))
<BR><BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_putchar
</UL>

<P><STRONG><a name="[540]"></a>hal_uart_receive_dma</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hal_uart.o(i.hal_uart_receive_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_receive_dma &rArr; vdma_pop_data
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_pop_data
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_receive_bytes
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_uart_irq
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_control
</UL>

<P><STRONG><a name="[53a]"></a>hal_uart_register_callback</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, hal_uart.o(i.hal_uart_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_uart_register_callback &rArr; uart_start_dma_transmission &rArr; vdma_start
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_register_callback
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_channel_to_callback_data
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_init
</UL>

<P><STRONG><a name="[2d0]"></a>hal_uart_send_dma</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hal_uart.o(i.hal_uart_send_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_push_data
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_send_space
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_uart_write
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_control
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_recv
</UL>

<P><STRONG><a name="[539]"></a>hal_uart_set_dma</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, hal_uart.o(i.hal_uart_set_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hal_uart_set_dma &rArr; vdma_init &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_threshold
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_alert_length
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_configure
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_uart_init
</UL>

<P><STRONG><a name="[358]"></a>hci_log_acl_in</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_hci_log_uart.o(i.hci_log_acl_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_a2dp_streaming_data_omit
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
</UL>

<P><STRONG><a name="[35a]"></a>hci_log_acl_out</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_hci_log_uart.o(i.hci_log_acl_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_log_acl_out &rArr; hci_log
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
</UL>

<P><STRONG><a name="[359]"></a>hci_log_cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_hci_log_uart.o(i.hci_log_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_log_cmd &rArr; hci_log
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
</UL>

<P><STRONG><a name="[357]"></a>hci_log_event</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bt_hci_log_uart.o(i.hci_log_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_log_event &rArr; hci_log
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
</UL>

<P><STRONG><a name="[39a]"></a>hci_log_util_info</STRONG> (Thumb, 76 bytes, Stack size 272 bytes, bt_platform.o(i.hci_log_util_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hci_log_util_info &rArr; bt_hci_log &rArr; hci_log_acl_in &rArr; hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_lib_version_hci
</UL>

<P><STRONG><a name="[5a7]"></a>hex_dump_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, syslog.o(i.hex_dump_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hex_dump_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_dump
</UL>

<P><STRONG><a name="[5e3]"></a>i2c_config_hardware</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, hal_i2c_master_internal.o(i.i2c_config_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_config_hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_polling
</UL>

<P><STRONG><a name="[5e5]"></a>i2c_get_transaction_status</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hal_i2c_master_internal.o(i.i2c_get_transaction_status))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_polling
</UL>

<P><STRONG><a name="[5e6]"></a>i2c_read_fifo</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, hal_i2c_master_internal.o(i.i2c_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling
</UL>

<P><STRONG><a name="[5e2]"></a>i2c_set_frequency</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hal_i2c_master_internal.o(i.i2c_set_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_set_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_init
</UL>

<P><STRONG><a name="[5e4]"></a>i2c_write_fifo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_i2c_master_internal.o(i.i2c_write_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_polling
</UL>

<P><STRONG><a name="[566]"></a>is_pin_with_pullsel</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, hal_gpio.o(i.is_pin_with_pullsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = is_pin_with_pullsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_pupd_register
</UL>

<P><STRONG><a name="[180]"></a>log_hal_error_internal</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, hal_log.o(i.log_hal_error_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_isr
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_to_receive_polling
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_send_polling
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_reset
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_power_key
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lpd_init
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_is_time_valid
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_eint
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_command_ready
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_data_test
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_card_not_busy
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_command_ready
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>

<P><STRONG><a name="[1a3]"></a>log_hal_info_internal</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, hal_log.o(i.log_hal_info_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dvfs_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dcxo_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_target_frequency
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_is_time_valid
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_eosc32_calibration
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_PSI_PMOD_CONFIG
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_CONTROL
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_deinit
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_pmu_ctrl_power
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_register_domain
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump_info (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_dump_log (via Veneer)
</UL>

<P><STRONG><a name="[502]"></a>log_hal_warning_internal</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, hal_log.o(i.log_hal_warning_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_2sec_reboot
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_check_alarm_power_on
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[5ab]"></a>log_init</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, syslog.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = log_init &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_register_callbacks
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_create
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_init
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5ae]"></a>log_putchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syslog.o(i.log_putchar))
<BR><BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
</UL>

<P><STRONG><a name="[5ac]"></a>log_queue_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, syslog.o(i.log_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = log_queue_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[5af]"></a>log_queue_receive</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, syslog.o(i.log_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = log_queue_receive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_task_entry
</UL>

<P><STRONG><a name="[5b0]"></a>log_queue_send</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, syslog.o(i.log_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[5b1]"></a>log_uart_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, syslog.o(i.log_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = log_uart_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_switch
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_exception_cb
</UL>

<P><STRONG><a name="[50d]"></a>log_write</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, syslog.o(i.log_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = log_write &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_putchar
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[52]"></a>main</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = main &rArr; serial_port_config_write_dev_number &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_create
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_create_task
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_common_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_init
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInitStatus_Set
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_setting
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_number
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[411]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_aes_encrypt
</UL>

<P><STRONG><a name="[5b6]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 956 bytes, Stack size 40 bytes, aes.o(i.mbedtls_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[5b7]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, aes.o(i.mbedtls_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[412]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_aes_encrypt
</UL>

<P><STRONG><a name="[40f]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_aes_encrypt
</UL>

<P><STRONG><a name="[410]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108<LI>Call Chain = mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_aes_encrypt
</UL>

<P><STRONG><a name="[1cf]"></a>memoryDumpAll</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, exception_handler.o(i.memoryDumpAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[61c]"></a>msdc_card_is_present</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_card_is_present))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_send_command
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_command_ready
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_card_not_busy
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_send_command
</UL>

<P><STRONG><a name="[61d]"></a>msdc_get_output_clock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_get_output_clock))
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_backup_all
</UL>

<P><STRONG><a name="[611]"></a>msdc_get_owner</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_get_owner))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_backup_all
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_backup_all
</UL>

<P><STRONG><a name="[5c4]"></a>msdc_get_pinmux</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_get_pinmux))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_gpio_mode
</UL>

<P><STRONG><a name="[5bd]"></a>msdc_get_vcore_voltage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_get_vcore_voltage))
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
</UL>

<P><STRONG><a name="[5be]"></a>msdc_nvic_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_nvic_set))
<BR><BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command52
</UL>

<P><STRONG><a name="[6]"></a>msdc_prepare</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, hal_msdc.o(i.msdc_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = msdc_prepare &rArr; sd_output_clock_tuning &rArr; sd_latch_data_test &rArr; sd_latch_read_blocks &rArr; sd_stop_transfer &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_set_output_clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_msdc.o(.data)
</UL>
<P><STRONG><a name="[620]"></a>msdc_record_command_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_record_command_status))
<BR><BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_command_ready
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_command_ready
</UL>

<P><STRONG><a name="[5c1]"></a>msdc_reset</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hal_msdc.o(i.msdc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = msdc_reset &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
</UL>

<P><STRONG><a name="[5c0]"></a>msdc_set_output_clock</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, hal_msdc.o(i.msdc_set_output_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = msdc_set_output_clock &rArr; hal_gpt_delay_ms &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_mux_sel (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_prepare
</UL>

<P><STRONG><a name="[5c3]"></a>msdc_switch_pinmux_to_gpio_mode</STRONG> (Thumb, 474 bytes, Stack size 8 bytes, hal_msdc.o(i.msdc_switch_pinmux_to_gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = msdc_switch_pinmux_to_gpio_mode &rArr; hal_gpio_set_pupd_register &rArr; is_pin_with_pullsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_pupd_register
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_get_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_backup_all
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_backup_all
</UL>

<P><STRONG><a name="[5c5]"></a>msdc_switch_pinmux_to_msdc_mode</STRONG> (Thumb, 580 bytes, Stack size 8 bytes, hal_msdc.o(i.msdc_switch_pinmux_to_msdc_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = msdc_switch_pinmux_to_msdc_mode &rArr; hal_gpio_set_pupd_register &rArr; is_pin_with_pullsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_pupd_register
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_restore_all
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_restore_all
</UL>

<P><STRONG><a name="[5]"></a>msdc_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_msdc.o(i.msdc_valid))
<BR>[Address Reference Count : 1]<UL><LI> hal_msdc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>null_function</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_pmu_wrap_interface.o(i.null_function))
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[5b3]"></a>nvdm_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, nvdm_main.o(i.nvdm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = nvdm_init &rArr; peb_scan &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff_time_set
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_creat
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_malloc
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_get_peb_config
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_print_info
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_total_avail_space
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5ca]"></a>nvdm_port_flash_erase</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nvdm_port.o(i.nvdm_port_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nvdm_port_flash_erase &rArr; hal_flash_erase &rArr; eraseRawDiskBlock &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_erase
</UL>

<P><STRONG><a name="[5cb]"></a>nvdm_port_flash_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nvdm_port.o(i.nvdm_port_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_read
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_erase
</UL>

<P><STRONG><a name="[5cc]"></a>nvdm_port_flash_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nvdm_port.o(i.nvdm_port_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
</UL>

<P><STRONG><a name="[512]"></a>nvdm_port_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvdm_port_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
</UL>

<P><STRONG><a name="[4c8]"></a>nvdm_port_get_data_item_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_get_data_item_config))
<BR><BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_init
</UL>

<P><STRONG><a name="[5d6]"></a>nvdm_port_get_peb_address</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_get_peb_address))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_read
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_erase
</UL>

<P><STRONG><a name="[5c7]"></a>nvdm_port_get_peb_config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_get_peb_config))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
</UL>

<P><STRONG><a name="[4ca]"></a>nvdm_port_log_error</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nvdm_port.o(i.nvdm_port_log_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_take
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_give
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_creat
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_write
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_erase
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_erase
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_update_status
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_header
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_version
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_peb_reserved
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_magic_number
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_erase_count
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_data_item_by_name
</UL>

<P><STRONG><a name="[4bf]"></a>nvdm_port_log_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_log_info))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_is_enough
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_print_info
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_header_print_info
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_reclaim_pebs
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_peb
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_total_avail_space
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_data_item_by_name
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_header_print_info
</UL>

<P><STRONG><a name="[50f]"></a>nvdm_port_log_notice</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, nvdm_port.o(i.nvdm_port_log_notice))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nvdm_port_log_notice &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
</UL>

<P><STRONG><a name="[4c9]"></a>nvdm_port_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nvdm_port_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
</UL>

<P><STRONG><a name="[5c9]"></a>nvdm_port_mutex_creat</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nvdm_port.o(i.nvdm_port_mutex_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nvdm_port_mutex_creat &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
</UL>

<P><STRONG><a name="[5cd]"></a>nvdm_port_mutex_give</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nvdm_port.o(i.nvdm_port_mutex_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nvdm_port_mutex_give &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
</UL>

<P><STRONG><a name="[5ce]"></a>nvdm_port_mutex_take</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nvdm_port.o(i.nvdm_port_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nvdm_port_mutex_take &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
</UL>

<P><STRONG><a name="[4ce]"></a>nvdm_port_poweroff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_poweroff))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_activing
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[5c6]"></a>nvdm_port_poweroff_time_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nvdm_port.o(i.nvdm_port_poweroff_time_set))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
</UL>

<P><STRONG><a name="[429]"></a>nvdm_read_data_item</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, nvdm_data.o(i.nvdm_read_data_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nvdm_read_data_item &rArr; search_data_item_by_name &rArr; peb_read_data &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_take
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_give
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_data_item_by_name
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_data_item_checksum
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_load_link_key
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_number
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_check_default_setting
</UL>

<P><STRONG><a name="[42d]"></a>nvdm_write_data_item</STRONG> (Thumb, 752 bytes, Stack size 104 bytes, nvdm_data.o(i.nvdm_write_data_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_take
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_give
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_is_enough
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_allocation
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_update_status
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_sub_free
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_add_drity
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_activing
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_data_item_by_name
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_header_print_info
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_checksum
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_save_link_key
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_setting
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_number
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_check_default_setting
</UL>

<P><STRONG><a name="[d2]"></a>pd_domain_dma_interrupt_hander</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, hal_pdma_internal.o(i.pd_domain_dma_interrupt_hander))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pd_domain_dma_interrupt_hander
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pdma_internal.o(i.vdma_init)
</UL>
<P><STRONG><a name="[5d2]"></a>peb_activing</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nvdm_main.o(i.peb_activing))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = peb_activing &rArr; peb_update_status &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_update_status
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_peb_reserved
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[4cc]"></a>peb_add_drity</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nvdm_main.o(i.peb_add_drity))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[4cf]"></a>peb_add_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nvdm_main.o(i.peb_add_free))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
</UL>

<P><STRONG><a name="[5d5]"></a>peb_erase</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, nvdm_io.o(i.peb_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = peb_erase &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_get_peb_address
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
</UL>

<P><STRONG><a name="[5d8]"></a>peb_io_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nvdm_io.o(i.peb_io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_get_peb_address
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_header
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
</UL>

<P><STRONG><a name="[5d9]"></a>peb_io_write</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, nvdm_io.o(i.peb_io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_get_peb_address
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_write
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_flash_read
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_buffer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_update_status
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_version
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_peb_reserved
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_magic_number
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_erase_count
</UL>

<P><STRONG><a name="[4bd]"></a>peb_read_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nvdm_main.o(i.peb_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = peb_read_data &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_data_item_by_name
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_migration
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_data_item_checksum
</UL>

<P><STRONG><a name="[5db]"></a>peb_read_header</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nvdm_main.o(i.peb_read_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = peb_read_header &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
</UL>

<P><STRONG><a name="[4d2]"></a>peb_sub_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nvdm_main.o(i.peb_sub_free))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[5d3]"></a>peb_update_status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nvdm_main.o(i.peb_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = peb_update_status &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_activing
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[4cd]"></a>peb_write_data</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, nvdm_main.o(i.peb_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_header
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_header_is_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_migration
</UL>

<P><STRONG><a name="[1fe]"></a>platform_assert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, exception_handler.o(i.platform_assert))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[5e1]"></a>pmic_i2c_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_i2c_pmic.o(i.pmic_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pmic_i2c_init &rArr; i2c_set_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable (via Veneer)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
</UL>

<P><STRONG><a name="[1f5]"></a>pmic_i2c_send_polling</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, hal_i2c_pmic.o(i.pmic_i2c_send_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pmic_i2c_send_polling &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fifo
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_transaction_status
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrap_D2D_I2C_Write
</UL>

<P><STRONG><a name="[1f3]"></a>pmic_i2c_send_to_receive_polling</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, hal_i2c_pmic.o(i.pmic_i2c_send_to_receive_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pmic_i2c_send_to_receive_polling &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fifo
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_fifo
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_transaction_status
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_config_hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrap_D2D_I2C_Read
</UL>

<P><STRONG><a name="[5e7]"></a>pmu_auxadc_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_pmu_auxadc.o(i.pmu_auxadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_auxadc_init &rArr; pmu_set_register_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
</UL>

<P><STRONG><a name="[a]"></a>pmu_control_mtcmos_mt6385</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_control_mtcmos_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pmu_control_mtcmos_mt6385 &rArr; pmu_set_mtcmos_mt6385 &rArr; pmu_set_register_value
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_mtcmos_mt6385
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[2c2]"></a>pmu_ctrl_driver_power</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_pmu_wrap_interface.o(i.pmu_ctrl_driver_power))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
</UL>

<P><STRONG><a name="[5a9]"></a>pmu_ctrl_va28_ldo_mt6385</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hal_pmu_internal.o(i.pmu_ctrl_va28_ldo_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pmu_ctrl_va28_ldo_mt6385 &rArr; PMIC_VR_SLEEP_WKUP_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_pmu_ctrl_power
</UL>

<P><STRONG><a name="[5a8]"></a>pmu_ctrl_vbt_ldo_mt6385</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_ctrl_vbt_ldo_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pmu_ctrl_vbt_ldo_mt6385 &rArr; PMIC_VR_SLEEP_WKUP_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_pmu_ctrl_power
</UL>

<P><STRONG><a name="[cc]"></a>pmu_eint_handler</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, hal_pmu.o(i.pmu_eint_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pmu_eint_handler &rArr; hal_eint_unmask &rArr; eint_unmask_wakeup_source
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu.o(i.pmu_eint_init)
</UL>
<P><STRONG><a name="[5e9]"></a>pmu_eint_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_pmu.o(i.pmu_eint_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pmu_eint_init &rArr; hal_eint_init &rArr; hal_eint_set_debounce_time &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_register_callback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
</UL>

<P><STRONG><a name="[12]"></a>pmu_enter_power_off_mt6385</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_pmu_internal.o(i.pmu_enter_power_off_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_enter_power_off_mt6385 &rArr; pmu_set_register_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[1ea]"></a>pmu_get_register_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_pmu_wrap_interface.o(i.pmu_get_register_value))
<BR><BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_2sec_reboot
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage_mt6385
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_voltage_mt6385
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_usb_input_status_mt6385
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_va28_ldo_mt6385
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_auxadc_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_PSI_PMOD_CONFIG
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_CONTROL
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_handler
</UL>

<P><STRONG><a name="[9]"></a>pmu_get_register_value_mt6385</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_pmu.o(i.pmu_get_register_value_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pmu_get_register_value_mt6385 &rArr; Wrap_D2D_I2C_Read &rArr; pmic_i2c_send_to_receive_polling &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrap_D2D_I2C_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>pmu_get_usb_input_status_mt6385</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_get_usb_input_status_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_get_usb_input_status_mt6385 &rArr; pmu_set_register_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[5ea]"></a>pmu_get_vcore_setting_index</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, hal_pmu_internal.o(i.pmu_get_vcore_setting_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pmu_get_vcore_setting_index
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage_mt6385
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_voltage_mt6385
</UL>

<P><STRONG><a name="[2b0]"></a>pmu_get_vcore_voltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_pmu_wrap_interface.o(i.pmu_get_vcore_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_get_vcore_voltage
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_s1_buck_mt6385
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_voltage
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_voltage
</UL>

<P><STRONG><a name="[b]"></a>pmu_get_vcore_voltage_mt6385</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_get_vcore_voltage_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pmu_get_vcore_voltage_mt6385 &rArr; pmu_get_vcore_setting_index
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_setting_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[577]"></a>pmu_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_pmu_wrap_interface.o(i.pmu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pmu_init &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[7]"></a>pmu_init_mt6385</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, hal_pmu.o(i.pmu_init_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pmu_init_mt6385 &rArr; pmu_init_power_mode &rArr; PMIC_VR_SLEEP_WKUP_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vrc_key_mt6385
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmic_i2c_init
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_auxadc_init
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_power_mode
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[5eb]"></a>pmu_init_power_mode</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, hal_pmu.o(i.pmu_init_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pmu_init_power_mode &rArr; PMIC_VR_SLEEP_WKUP_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vrc_key_mt6385
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_PSI_PMOD_CONFIG
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
</UL>

<P><STRONG><a name="[13]"></a>pmu_reset_mt6385</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_reset_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_reset_mt6385 &rArr; pmu_set_register_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[5e8]"></a>pmu_set_mtcmos_mt6385</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_set_mtcmos_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_set_mtcmos_mt6385 &rArr; pmu_set_register_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_control_mtcmos_mt6385
</UL>

<P><STRONG><a name="[1e7]"></a>pmu_set_ovr_mode_mt6385</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_set_ovr_mode_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pmu_set_ovr_mode_mt6385 &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_s1_buck_mt6385
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_PSI_PMOD_CONFIG
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_power_mode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
</UL>

<P><STRONG><a name="[1e8]"></a>pmu_set_register_value</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_pmu_wrap_interface.o(i.pmu_set_register_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_set_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vrc_key_mt6385
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_2sec_reboot
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_s1_buck_mt6385
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_mtcmos_mt6385
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_reset_mt6385
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_usb_input_status_mt6385
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enter_power_off_mt6385
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_auxadc_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_PSI_PMOD_CONFIG
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_CONTROL
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_power_mode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_eint_handler
</UL>

<P><STRONG><a name="[8]"></a>pmu_set_register_value_mt6385</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hal_pmu.o(i.pmu_set_register_value_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pmu_set_register_value_mt6385 &rArr; Wrap_D2D_I2C_Read &rArr; pmic_i2c_send_to_receive_polling &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrap_D2D_I2C_Write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrap_D2D_I2C_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>pmu_set_vcore_s1_buck_mt6385</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, hal_pmu_internal.o(i.pmu_set_vcore_s1_buck_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pmu_set_vcore_s1_buck_mt6385 &rArr; pmu_set_ovr_mode_mt6385 &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vrc_key_mt6385
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_ovr_mode_mt6385
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_voltage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[2af]"></a>pmu_set_vcore_voltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_pmu_wrap_interface.o(i.pmu_set_vcore_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_vcore_switch_voltage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_voltage
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_voltage
</UL>

<P><STRONG><a name="[c]"></a>pmu_set_vcore_voltage_mt6385</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, hal_pmu_internal.o(i.pmu_set_vcore_voltage_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pmu_set_vcore_voltage_mt6385 &rArr; PMIC_VCORE_VOSEL_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSI_LP_RUN_AT_HP
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSI_HP_RUN_AT_LP
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_setting_index
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[1e6]"></a>pmu_set_vrc_key_mt6385</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_pmu_internal.o(i.pmu_set_vrc_key_mt6385))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_set_vrc_key_mt6385 &rArr; pmu_set_register_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_s1_buck_mt6385
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_SLEEP_WKUP_CONFIG
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_PSI_PMOD_CONFIG
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_power_mode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_init_mt6385
</UL>

<P><STRONG><a name="[1cd]"></a>printBusFaultErrorMsg</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, exception_handler.o(i.printBusFaultErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = printBusFaultErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[1de]"></a>printMemoryManagementErrorMsg</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, exception_handler.o(i.printMemoryManagementErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = printMemoryManagementErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[1dd]"></a>printUsageErrorMsg</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, exception_handler.o(i.printUsageErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printUsageErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[5ee]"></a>print_hex_dump</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, syslog.o(i.print_hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_hex_dump &rArr; hex_dump_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump_data
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_log_message
</UL>

<P><STRONG><a name="[3]"></a>print_module_log</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, syslog.o(i.print_module_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = print_module_log &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Address Reference Count : 12]<UL><LI> ble_app_common.o(.data)
<LI> gnss_api.o(.data)
<LI> hal_log.o(.data)
<LI> ble_dogp_adp_service.o(.data)
<LI> ble_dogp_service.o(.data)
<LI> bt_debug.o(.data)
<LI> at_command.o(.data)
<LI> syslog.o(.data)
<LI> bt_notify_data_parse.o(.data)
<LI> ble_dogp_common.o(.data)
<LI> atci_main.o(.data)
<LI> bt_notify_main_recv.o(.data)
</UL>
<P><STRONG><a name="[5ef]"></a>print_normal_log</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, syslog.o(i.print_normal_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_normal_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_log_message
</UL>

<P><STRONG><a name="[5f0]"></a>process_log_message</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, syslog.o(i.process_log_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_log_message &rArr; print_hex_dump &rArr; hex_dump_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_normal_log
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_dump
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_task_entry
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_buffer_dump
</UL>

<P><STRONG><a name="[529]"></a>put_data</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gnss_ring_buffer.o(i.put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_put_data
</UL>

<P><STRONG><a name="[20b]"></a>pvPortMalloc</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_relay
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_malloc
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNode
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_handle_new_msg
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_page_number
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_node_content
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_send_ind
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_alloc
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_check_node_buffer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_send_data
</UL>

<P><STRONG><a name="[65a]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[407]"></a>pvTimerGetTimerID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_sync_cmd_time_out_callback
</UL>

<P><STRONG><a name="[ba]"></a>pwm_backup_register_call_back</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, hal_pwm.o(i.pwm_backup_register_call_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pwm_backup_register_call_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[bb]"></a>pwm_restore_register_call_back</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, hal_pwm.o(i.pwm_restore_register_call_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pwm_restore_register_call_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[65e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[563]"></a>readRawDiskData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_flash_disk.o(i.readRawDiskData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = readRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_FDM_lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>

<P><STRONG><a name="[1e0]"></a>retrieve_FDM_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_flash_disk.o(i.retrieve_FDM_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFDMLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRawDiskData
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseRawDiskBlock
</UL>

<P><STRONG><a name="[52c]"></a>ring_buf_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gnss_ring_buffer.o(i.ring_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_init
</UL>

<P><STRONG><a name="[501]"></a>rtc_read_osc32con</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_rtc.o(i.rtc_read_osc32con))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = rtc_read_osc32con &rArr;  rtc_write_trigger_wait (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_2sec_reboot
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[c2]"></a>sd_backup_all</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_sd_internal.o(i.sd_backup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sd_backup_all &rArr; msdc_switch_pinmux_to_gpio_mode &rArr; hal_gpio_set_pupd_register &rArr; is_pin_with_pullsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_gpio_mode
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_get_owner
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_backup_all_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[612]"></a>sd_backup_all_register</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_sd_internal.o(i.sd_backup_all_register))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_backup_all
</UL>

<P><STRONG><a name="[619]"></a>sd_check_card_status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_sd_internal.o(i.sd_check_card_status))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_set_block_length
</UL>

<P><STRONG><a name="[613]"></a>sd_get_card_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_sd_internal.o(i.sd_get_card_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sd_get_card_status &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_command_test
</UL>

<P><STRONG><a name="[615]"></a>sd_latch_command_test</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_sd_internal.o(i.sd_latch_command_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sd_latch_command_test &rArr; sd_get_card_status &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_get_card_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
</UL>

<P><STRONG><a name="[616]"></a>sd_latch_data_test</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_sd_internal.o(i.sd_latch_data_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sd_latch_data_test &rArr; sd_latch_read_blocks &rArr; sd_stop_transfer &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_set_block_length
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_output_clock_tuning
</UL>

<P><STRONG><a name="[618]"></a>sd_latch_read_blocks</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, hal_sd_internal.o(i.sd_latch_read_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sd_latch_read_blocks &rArr; sd_stop_transfer &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_reset
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_card_is_present
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_card_not_busy
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_stop_transfer
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_send_command
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_card_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_restore_all
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_data_test
</UL>

<P><STRONG><a name="[5bf]"></a>sd_output_clock_tuning</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, hal_sd_internal.o(i.sd_output_clock_tuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sd_output_clock_tuning &rArr; sd_latch_data_test &rArr; sd_latch_read_blocks &rArr; sd_stop_transfer &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_set_output_clock
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_get_vcore_voltage
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_get_output_clock
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_data_test
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_command_test
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_prepare
</UL>

<P><STRONG><a name="[c3]"></a>sd_restore_all</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_sd_internal.o(i.sd_restore_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sd_restore_all &rArr; sd_latch_read_blocks &rArr; sd_stop_transfer &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_msdc_mode
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_restore_all_register
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[61e]"></a>sd_restore_all_register</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_sd_internal.o(i.sd_restore_all_register))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_restore_all
</UL>

<P><STRONG><a name="[614]"></a>sd_send_command</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hal_sd_internal.o(i.sd_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_card_is_present
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wait_command_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_stop_transfer
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_set_block_length
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_get_card_status
</UL>

<P><STRONG><a name="[617]"></a>sd_set_block_length</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_sd_internal.o(i.sd_set_block_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sd_set_block_length &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_send_command
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_card_status
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_data_test
</UL>

<P><STRONG><a name="[61a]"></a>sd_stop_transfer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_sd_internal.o(i.sd_stop_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sd_stop_transfer &rArr; sd_send_command &rArr; sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
</UL>

<P><STRONG><a name="[61b]"></a>sd_wait_card_not_busy</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, hal_sd_internal.o(i.sd_wait_card_not_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sd_wait_card_not_busy &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_card_is_present
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_latch_read_blocks
</UL>

<P><STRONG><a name="[61f]"></a>sd_wait_command_ready</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, hal_sd_internal.o(i.sd_wait_command_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sd_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_record_command_status
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_card_is_present
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_send_command
</UL>

<P><STRONG><a name="[c4]"></a>sdio_backup_all</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hal_sdio_internal.o(i.sdio_backup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sdio_backup_all &rArr; msdc_switch_pinmux_to_gpio_mode &rArr; hal_gpio_set_pupd_register &rArr; is_pin_with_pullsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_gpio_mode
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_get_owner
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_get_output_clock
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_backup_all_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[621]"></a>sdio_backup_all_register</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hal_sdio_internal.o(i.sdio_backup_all_register))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_backup_all
</UL>

<P><STRONG><a name="[622]"></a>sdio_command52</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, hal_sdio_internal.o(i.sdio_command52))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sdio_command52 &rArr; sdio_send_command &rArr; sdio_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_nvic_set
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_send_command
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_card_not_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_get_cccr
</UL>

<P><STRONG><a name="[625]"></a>sdio_get_cccr</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, hal_sdio_internal.o(i.sdio_get_cccr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sdio_get_cccr &rArr; sdio_command52 &rArr; sdio_send_command &rArr; sdio_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command52
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_restore_all
</UL>

<P><STRONG><a name="[c5]"></a>sdio_restore_all</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_sdio_internal.o(i.sdio_restore_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sdio_restore_all &rArr; sdio_get_cccr &rArr; sdio_command52 &rArr; sdio_send_command &rArr; sdio_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_switch_pinmux_to_msdc_mode
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_get_cccr
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_restore_all_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[626]"></a>sdio_restore_all_register</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_sdio_internal.o(i.sdio_restore_all_register))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_restore_all
</UL>

<P><STRONG><a name="[623]"></a>sdio_send_command</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, hal_sdio_internal.o(i.sdio_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sdio_send_command &rArr; sdio_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_card_is_present
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_command_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command52
</UL>

<P><STRONG><a name="[624]"></a>sdio_wait_card_not_busy</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hal_sdio_internal.o(i.sdio_wait_card_not_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sdio_wait_card_not_busy &rArr; hal_gpt_get_free_run_count &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command52
</UL>

<P><STRONG><a name="[627]"></a>sdio_wait_command_ready</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, hal_sdio_internal.o(i.sdio_wait_command_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sdio_wait_command_ready &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msdc_record_command_status
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_send_command
</UL>

<P><STRONG><a name="[234]"></a>serial_port_close</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, serial_port.o(i.serial_port_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_port_close
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_is_valid
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_get_device_type
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_serial_port_deinit
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_switch
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_data_callback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_port_deinit
</UL>

<P><STRONG><a name="[516]"></a>serial_port_config_read_dev_number</STRONG> (Thumb, 126 bytes, Stack size 160 bytes, serial_port_para.o(i.serial_port_config_read_dev_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = serial_port_config_read_dev_number &rArr; nvdm_read_data_item &rArr; search_data_item_by_name &rArr; peb_read_data &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_task_entry
</UL>

<P><STRONG><a name="[62b]"></a>serial_port_config_read_dev_setting</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, serial_port_para.o(i.serial_port_config_read_dev_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_check_default_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open
</UL>

<P><STRONG><a name="[517]"></a>serial_port_config_write_dev_number</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, serial_port_para.o(i.serial_port_config_write_dev_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = serial_port_config_write_dev_number &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
</UL>

<P><STRONG><a name="[518]"></a>serial_port_config_write_dev_setting</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, serial_port_para.o(i.serial_port_config_write_dev_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = serial_port_config_write_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_check_default_setting
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_agps_at_handler
</UL>

<P><STRONG><a name="[248]"></a>serial_port_control</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, serial_port.o(i.serial_port_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_port_control
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_is_valid
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_get_device_type
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_serial_port_send_data
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_serial_port_read_data
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_serial_port_control
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_send_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_read_data
</UL>

<P><STRONG><a name="[629]"></a>serial_port_get_device_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, serial_port.o(i.serial_port_get_device_type))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close
</UL>

<P><STRONG><a name="[247]"></a>serial_port_open</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, serial_port.o(i.serial_port_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_return_handle
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_get_device_type
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_port_init
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_open
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_serial_port_init
</UL>

<P><STRONG><a name="[27]"></a>serial_port_uart_control</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, serial_port_uart.o(i.serial_port_uart_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = serial_port_uart_control &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_send_space
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_port.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>serial_port_uart_deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serial_port_uart.o(i.serial_port_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = serial_port_uart_deinit &rArr; hal_uart_deinit &rArr; vdma_deinit &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_port.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>serial_port_uart_init</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, serial_port_uart.o(i.serial_port_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = serial_port_uart_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_port.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>serial_port_uart_reset_para</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial_port_para.o(i.serial_port_uart_reset_para))
<BR>[Address Reference Count : 1]<UL><LI> serial_port.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>serial_port_usb_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_port_usb.o(i.serial_port_usb_control))
<BR>[Address Reference Count : 1]<UL><LI> serial_port.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>serial_port_usb_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_port_usb.o(i.serial_port_usb_deinit))
<BR>[Address Reference Count : 1]<UL><LI> serial_port.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>serial_port_usb_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_port_usb.o(i.serial_port_usb_init))
<BR>[Address Reference Count : 1]<UL><LI> serial_port.o(.data)
</UL>
<P><STRONG><a name="[51e]"></a>set_time_by_pmtk_process</STRONG> (Thumb, 218 bytes, Stack size 304 bytes, gnss_app.o(i.set_time_by_pmtk_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = set_time_by_pmtk_process &rArr; hal_rtc_set_time &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_set_time
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_get_sentence_param
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd_helper
</UL>

<P><STRONG><a name="[62d]"></a>sleep_driver_debug_lock_sleep_timelog</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleep_driver_debug_lock_sleep_timelog))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sleep_driver_debug_lock_sleep_timelog &rArr; hal_gpt_get_free_run_count &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>

<P><STRONG><a name="[57a]"></a>sleep_driver_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_sleep_driver.o(i.sleep_driver_init))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[57f]"></a>sleepdrv_get_handle</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, hal_sleep_driver.o(i.sleepdrv_get_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>

<P><STRONG><a name="[57c]"></a>sleepdrv_get_handle_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_sleep_driver.o(i.sleepdrv_get_handle_status))
<BR><BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_is_sleep_handle_alive
</UL>

<P><STRONG><a name="[62e]"></a>sleepdrv_get_mutex</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_get_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_get_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
</UL>

<P><STRONG><a name="[57d]"></a>sleepdrv_hold_sleep_lock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_hold_sleep_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask (via Veneer)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_driver_debug_lock_sleep_timelog
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
</UL>

<P><STRONG><a name="[57e]"></a>sleepdrv_release_handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_release_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleepdrv_release_handle &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_release_sleep_handle
</UL>

<P><STRONG><a name="[62f]"></a>sleepdrv_release_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_release_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_handle
</UL>

<P><STRONG><a name="[580]"></a>sleepdrv_release_sleep_lock</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_release_sleep_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAndSetIRQMask (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreIRQMask (via Veneer)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_driver_debug_lock_sleep_timelog
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
</UL>

<P><STRONG><a name="[5d1]"></a>space_allocation</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nvdm_main.o(i.space_allocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_peb
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[5d0]"></a>space_is_enough</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nvdm_main.o(i.space_is_enough))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = space_is_enough
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[be]"></a>spi_slave_backup_all_register</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_spi_slave_internal.o(i.spi_slave_backup_all_register))
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[bf]"></a>spi_slave_restore_all_register</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_spi_slave_internal.o(i.spi_slave_restore_all_register))
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[bc]"></a>spim_backup_register_callback</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, hal_spi_master.o(i.spim_backup_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spim_backup_register_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[bd]"></a>spim_restore_register_callback</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, hal_spi_master.o(i.spim_restore_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spim_restore_register_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_misc.o(i.hal_module_sleep_register_callback)
</UL>
<P><STRONG><a name="[1ce]"></a>stackDump</STRONG> (Thumb, 644 bytes, Stack size 16 bytes, exception_handler.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_reboot
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[579]"></a>sys_topsm_init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, hal_sys_topsm.o(i.sys_topsm_init))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
</UL>

<P><STRONG><a name="[632]"></a>syslog_serial_port_switch</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, syslog.o(i.syslog_serial_port_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = syslog_serial_port_switch &rArr; syslog_serial_port_open &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_open
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_port_service_callback
</UL>

<P><STRONG><a name="[c9]"></a>syslog_task_entry</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, syslog.o(i.syslog_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = syslog_task_entry &rArr; syslog_serial_port_open &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_log_message
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_receive
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_release
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_open
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_number
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syslog.o(i.log_init)
</UL>
<P><STRONG><a name="[5b2]"></a>system_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sys_init.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = system_init &rArr; nvdm_init &rArr; peb_scan &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dvfs_target_cpu_frequency
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dvfs_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_init (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[582]"></a>trng_config_timeout_limit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_trng_internal.o(i.trng_config_timeout_limit))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
</UL>

<P><STRONG><a name="[581]"></a>trng_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_trng_internal.o(i.trng_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trng_deinit &rArr; hal_clock_disable &rArr; _hal_clock_disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_deinit
</UL>

<P><STRONG><a name="[583]"></a>trng_enable_mode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_trng_internal.o(i.trng_enable_mode))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
</UL>

<P><STRONG><a name="[585]"></a>trng_get_random_data</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_trng_internal.o(i.trng_get_random_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trng_get_random_data
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
</UL>

<P><STRONG><a name="[587]"></a>trng_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_trng_internal.o(i.trng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trng_init &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_init
</UL>

<P><STRONG><a name="[584]"></a>trng_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_trng_internal.o(i.trng_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trng_start
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
</UL>

<P><STRONG><a name="[586]"></a>trng_stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_trng_internal.o(i.trng_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trng_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
</UL>

<P><STRONG><a name="[63c]"></a>uart_clear_timeout_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_clear_timeout_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
</UL>

<P><STRONG><a name="[59d]"></a>uart_dma_channel_to_callback_data</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_uart_internal_platform.o(i.uart_dma_channel_to_callback_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_dma_channel_to_callback_data
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[640]"></a>uart_enable_dma</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_internal_platform.o(i.uart_enable_dma))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[638]"></a>uart_error_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal_uart.o(i.uart_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_verify_error
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_purge_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>

<P><STRONG><a name="[c7]"></a>uart_interrupt_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hal_uart_internal_platform.o(i.uart_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = uart_interrupt_handler &rArr; uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_purge_fifo
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handler
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_interrupt_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(i.hal_uart_register_callback)
</UL>
<P><STRONG><a name="[58a]"></a>uart_port_to_dma_channel</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_uart_internal_platform.o(i.uart_port_to_dma_channel))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_send_space
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[63a]"></a>uart_purge_fifo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_purge_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handler
</UL>

<P><STRONG><a name="[59a]"></a>uart_put_char_block</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_put_char_block))
<BR><BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char_block
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char_block
</UL>

<P><STRONG><a name="[589]"></a>uart_query_empty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_query_empty))
<BR><BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_empty
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[63b]"></a>uart_query_interrupt_type</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_query_interrupt_type))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>

<P><STRONG><a name="[637]"></a>uart_receive_handler</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hal_uart.o(i.uart_receive_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_receive_handler &rArr; vdma_get_available_receive_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_receive_bytes
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_disable_interrupt
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clear_timeout_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_callback_handler
</UL>

<P><STRONG><a name="[58f]"></a>uart_reset_default_value</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_reset_default_value))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[636]"></a>uart_send_handler</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, hal_uart.o(i.uart_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_send_space
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_disable_interrupt
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_is_sleep_handle_alive
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_callback_handler
</UL>

<P><STRONG><a name="[595]"></a>uart_set_baudrate</STRONG> (Thumb, 196 bytes, Stack size 104 bytes, hal_uart_internal.o(i.uart_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_set_baudrate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_clk_use_lfosc (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_freq_lfosc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[597]"></a>uart_set_fifo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_set_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[596]"></a>uart_set_format</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, hal_uart_internal.o(i.uart_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_set_format
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[598]"></a>uart_set_sleep_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_set_sleep_mode))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[63e]"></a>uart_unmask_receive_interrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_unmask_receive_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[63d]"></a>uart_unmask_send_interrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_unmask_send_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[639]"></a>uart_verify_error</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_uart_internal.o(i.uart_verify_error))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handler
</UL>

<P><STRONG><a name="[5fb]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[23c]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_get_item_num
</UL>

<P><STRONG><a name="[642]"></a>uxTaskGetBottomOfStack</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetBottomOfStack))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck
</UL>

<P><STRONG><a name="[656]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[641]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_port_callback.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[d4]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(i.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(i.xEventGroupSetBitsFromISR)
</UL>
<P><STRONG><a name="[5f5]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[65d]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[5f2]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[64a]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[11e]"></a>vPortCurrentTaskStackOverflowCheck</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(i.vPortCurrentTaskStackOverflowCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortCurrentTaskStackOverflowCheck &rArr; hal_dwt_request_watchpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_request_watchpoint
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetBottomOfStack
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via Veneer)
</UL>

<P><STRONG><a name="[5f4]"></a>vPortEnterCritical</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_open
</UL>

<P><STRONG><a name="[5f7]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_open
</UL>

<P><STRONG><a name="[231]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_free
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_event_handler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteElem
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_handle_new_msg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_parse_xml_callback
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_release
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_free
</UL>

<P><STRONG><a name="[644]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port_tick.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortSetupTimerInterrupt &rArr; hal_clock_get_mcu_clock_frequency &rArr; freq_monitor &rArr; clock_get_freq_meter &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_get_mcu_clock_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[645]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[5f6]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[414]"></a>vQueueDelete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_delete_semaphore
</UL>

<P><STRONG><a name="[647]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[609]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2a4]"></a>vTaskDelay</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_task
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_dut_mode
</UL>

<P><STRONG><a name="[60c]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[649]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[648]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[64b]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[64c]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[635]"></a>vTaskPrioritySet</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, tasks.o(i.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPrioritySet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_task_entry
</UL>

<P><STRONG><a name="[64d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[5b5]"></a>vTaskStartScheduler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f9]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[11f]"></a>vTaskSwitchContext</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via Veneer)
</UL>

<P><STRONG><a name="[5a2]"></a>vdma_configure</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vdma_configure &rArr; hal_cache_is_cacheable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_is_cacheable
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[58d]"></a>vdma_deinit</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hal_pdma_internal.o(i.vdma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = vdma_deinit &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable_clock
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[58b]"></a>vdma_disable_interrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_disable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[59c]"></a>vdma_enable_interrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_enable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_enable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[590]"></a>vdma_get_available_receive_bytes</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_get_available_receive_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_get_available_receive_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
</UL>

<P><STRONG><a name="[592]"></a>vdma_get_available_send_space</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_get_available_send_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_get_available_send_space
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_send_space
</UL>

<P><STRONG><a name="[5a1]"></a>vdma_init</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, hal_pdma_internal.o(i.vdma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = vdma_init &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_clock
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[59b]"></a>vdma_pop_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_pop_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_pop_data
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_dma
</UL>

<P><STRONG><a name="[5a0]"></a>vdma_push_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_push_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_push_data
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
</UL>

<P><STRONG><a name="[59e]"></a>vdma_register_callback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_register_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[5a4]"></a>vdma_set_alert_length</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_set_alert_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_set_alert_length
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[5a3]"></a>vdma_set_threshold</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_set_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_set_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_dma
</UL>

<P><STRONG><a name="[63f]"></a>vdma_start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hal_pdma_internal.o(i.vdma_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vdma_start
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_dma_transmission
</UL>

<P><STRONG><a name="[58c]"></a>vdma_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_pdma_internal.o(i.vdma_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vdma_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_check_valid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
</UL>

<P><STRONG><a name="[4db]"></a>vdump_module_buffer</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, syslog.o(i.vdump_module_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vdump_module_buffer &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump_data
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_alloc
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_module_buffer
</UL>

<P><STRONG><a name="[5aa]"></a>vprint_module_log</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, syslog.o(i.vprint_module_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_alloc
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_module_log
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_notice
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_warning_internal
</UL>

<P><STRONG><a name="[564]"></a>writeRawDiskData</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, hal_flash_disk.o(i.writeRawDiskData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountDevice
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockSize (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockIndex (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_FDM_lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>

<P><STRONG><a name="[531]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_create
</UL>

<P><STRONG><a name="[520]"></a>xEventGroupSetBits</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd_helper
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
</UL>

<P><STRONG><a name="[533]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event_groups.o(i.xEventGroupSetBitsFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_callback_func
</UL>

<P><STRONG><a name="[51c]"></a>xEventGroupWaitBits</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_send_cmd
</UL>

<P><STRONG><a name="[230]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mem_alloc
</UL>

<P><STRONG><a name="[64f]"></a>xPortStartScheduler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; hal_clock_get_mcu_clock_frequency &rArr; freq_monitor &rArr; clock_get_freq_meter &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[243]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_create
</UL>

<P><STRONG><a name="[413]"></a>xQueueCreateMutex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_creat
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_create_mutex
</UL>

<P><STRONG><a name="[23b]"></a>xQueueGenericCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_init
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_create
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_task
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_task_entry
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_create
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_task
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_create
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_create_semaphore
</UL>

<P><STRONG><a name="[232]"></a>xQueueGenericReceive</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_main
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_timer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_task
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_stop_timer
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_repeat_timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_callback
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_take
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_receive
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_task
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_take
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_receive_no_wait
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_lock
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_take_semaphore
</UL>

<P><STRONG><a name="[659]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[233]"></a>xQueueGenericSend</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_timer_callback
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_init
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_timer
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_start
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_config
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_relay
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_stop_timer
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_repeat_timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_callback
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_give
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_send_ind
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_data_ind
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_send_queue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_send
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_unlock
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_give_semaphore
</UL>

<P><STRONG><a name="[23e]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_callback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_expiry_notify
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_driver_callback_func
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_queue_send
</UL>

<P><STRONG><a name="[244]"></a>xQueueGiveFromISR</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_port_service_callback
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_semaphore_give
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_give_semaphore_from_isr
</UL>

<P><STRONG><a name="[419]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_give_mutex
</UL>

<P><STRONG><a name="[426]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_take_mutex
</UL>

<P><STRONG><a name="[65b]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[288]"></a>xTaskGenericCreate</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_create
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_create_task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_init
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_task_init
</UL>

<P><STRONG><a name="[65c]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[418]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_take
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_mutex_give
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_take_mutex
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_give_mutex
</UL>

<P><STRONG><a name="[259]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_timer_list
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_run_timer
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_ajust_timer
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_init
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_update_connection_interval
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_start_timer
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_get_system_tick
</UL>

<P><STRONG><a name="[120]"></a>xTaskIncrementTick</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler (via Veneer)
</UL>

<P><STRONG><a name="[5fe]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[60b]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[653]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[5fa]"></a>xTaskResumeAll</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[258]"></a>xTimerCreate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_init_timer
</UL>

<P><STRONG><a name="[64e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[25a]"></a>xTimerGenericCommand</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_exp_timer_to_excute_list
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_run_timer
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_ajust_timer
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_init
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_update_connection_interval
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval_timerout
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_connect_cnf
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_stop_timer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_start_timer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_sync_cmd_time_out_callback
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_stop_sync_cmd_wait_timer
</UL>

<P><STRONG><a name="[25b]"></a>xTimerIsTimerActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTimerIsTimerActive &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_update_connection_interval
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval_timerout
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_is_timer_active
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_sync_cmd_time_out_callback
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_stop_sync_cmd_wait_timer
</UL>

<P><STRONG><a name="[654]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, timers.o(i.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
</UL>

<P><STRONG><a name="[40c]"></a>xml_close_parser</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, xml_main.o(i.xml_close_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xml_close_parser &rArr; xml_free_tag_list &rArr; xml_free_buffer &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_tag_list
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
</UL>

<P><STRONG><a name="[d7]"></a>xml_doctype_end_hdlr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xml_main.o(i.xml_doctype_end_hdlr))
<BR>[Address Reference Count : 1]<UL><LI> xml_main.o(i.xml_new_parser)
</UL>
<P><STRONG><a name="[d6]"></a>xml_doctype_start_hdlr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xml_main.o(i.xml_doctype_start_hdlr))
<BR>[Address Reference Count : 1]<UL><LI> xml_main.o(i.xml_new_parser)
</UL>
<P><STRONG><a name="[d9]"></a>xml_elem_end_hdlr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xml_main.o(i.xml_elem_end_hdlr))
<BR>[Address Reference Count : 2]<UL><LI> xml_main.o(i.xml_new_parser)
<LI> xml_main.o(i.xml_register_element_handler)
</UL>
<P><STRONG><a name="[d8]"></a>xml_elem_start_hdlr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xml_main.o(i.xml_elem_start_hdlr))
<BR>[Address Reference Count : 2]<UL><LI> xml_main.o(i.xml_new_parser)
<LI> xml_main.o(i.xml_register_element_handler)
</UL>
<P><STRONG><a name="[da]"></a>xml_general_data_hdlr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xml_main.o(i.xml_general_data_hdlr))
<BR>[Address Reference Count : 2]<UL><LI> xml_main.o(i.xml_new_parser)
<LI> xml_main.o(i.xml_register_data_handler)
</UL>
<P><STRONG><a name="[408]"></a>xml_new_parser</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, xml_main.o(i.xml_new_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xml_new_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
</UL>

<P><STRONG><a name="[40b]"></a>xml_parse_buffer</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xml_main.o(i.xml_parse_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = xml_parse_buffer &rArr; xml_parse_element &rArr; xml_process_start_tag &rArr; xml_process_start_tag_internal &rArr; xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
</UL>

<P><STRONG><a name="[40a]"></a>xml_register_data_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xml_main.o(i.xml_register_data_handler))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
</UL>

<P><STRONG><a name="[409]"></a>xml_register_element_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xml_main.o(i.xml_register_element_handler))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_xml_parse
</UL>

<P><STRONG><a name="[3bf]"></a>xml_stop_parse</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, xml_main.o(i.xml_stop_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xml_stop_parse &rArr; xml_free_tag_list &rArr; xml_free_buffer &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_tag_list
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_hdlr
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4ea]"></a>epo_demo_get_segment</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, epo_demo.o(i.epo_demo_get_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = epo_demo_get_segment &rArr; epo_demo_read_data &rArr; hal_flash_read &rArr; readRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_read_data
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_gnss_hour
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
</UL>

<P><STRONG><a name="[4f1]"></a>epo_demo_init_mem_info</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, epo_demo.o(i.epo_demo_init_mem_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = epo_demo_init_mem_info
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
</UL>

<P><STRONG><a name="[a4]"></a>epo_demo_send_assistance_data_int</STRONG> (Thumb, 168 bytes, Stack size 288 bytes, epo_demo.o(i.epo_demo_send_assistance_data_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = epo_demo_send_assistance_data_int &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_stop_timer
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_send_cmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epo_demo.o(i.epo_demo_send_assistance_data)
</UL>
<P><STRONG><a name="[4ec]"></a>utc_to_gnss_hour</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, epo_demo.o(i.utc_to_gnss_hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utc_to_gnss_hour &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_get_segment
</UL>

<P><STRONG><a name="[4e4]"></a>epo_btnotify_msg_hdlr</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, epo_download.o(i.epo_btnotify_msg_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = epo_btnotify_msg_hdlr &rArr; epo_request_download &rArr; bt_notify_send_data &rArr; bt_notify_send_data_by_chnl_num &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_update_notify
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_request_download
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_start
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_pack
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_end
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_task
</UL>

<P><STRONG><a name="[aa]"></a>epo_btnotify_msg_relay</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, epo_download.o(i.epo_btnotify_msg_relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = epo_btnotify_msg_relay &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epo_download.o(i.epo_download_init)
</UL>
<P><STRONG><a name="[4f4]"></a>epo_download_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, epo_download.o(i.epo_download_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = epo_download_init &rArr; gnss_load_link_key &rArr; nvdm_read_data_item &rArr; search_data_item_by_name &rArr; peb_read_data &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_load_link_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_callback_manager_register_callback
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_init_mem_info
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_task
</UL>

<P><STRONG><a name="[4f5]"></a>epo_init_mem_info</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, epo_download.o(i.epo_init_mem_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = epo_init_mem_info
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_download_init
</UL>

<P><STRONG><a name="[4e8]"></a>epo_recv_data_end</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, epo_download.o(i.epo_recv_data_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = epo_recv_data_end &rArr; epo_reply_int_value &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_reply_int_value
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
</UL>

<P><STRONG><a name="[4e7]"></a>epo_recv_data_pack</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, epo_download.o(i.epo_recv_data_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = epo_recv_data_pack &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_reply_int_value
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
</UL>

<P><STRONG><a name="[4e6]"></a>epo_recv_data_start</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, epo_download.o(i.epo_recv_data_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = epo_recv_data_start &rArr; hal_flash_erase &rArr; eraseRawDiskBlock &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
</UL>

<P><STRONG><a name="[4f7]"></a>epo_reply_int_value</STRONG> (Thumb, 120 bytes, Stack size 104 bytes, epo_download.o(i.epo_reply_int_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = epo_reply_int_value &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_pack
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_recv_data_end
</UL>

<P><STRONG><a name="[4e5]"></a>epo_request_download</STRONG> (Thumb, 100 bytes, Stack size 120 bytes, epo_download.o(i.epo_request_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = epo_request_download &rArr; bt_notify_send_data &rArr; bt_notify_send_data_by_chnl_num &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_btnotify_msg_hdlr
</UL>

<P><STRONG><a name="[51d]"></a>gnss_app_forward_cmd_helper</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, gnss_app.o(i.gnss_app_forward_cmd_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = gnss_app_forward_cmd_helper &rArr; set_time_by_pmtk_process &rArr; hal_rtc_set_time &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_send_command
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_by_pmtk_process
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
</UL>

<P><STRONG><a name="[b4]"></a>gnss_driver_callback_func</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gnss_app.o(i.gnss_driver_callback_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gnss_driver_callback_func &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_put_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_app.o(i.gnss_task_init)
</UL>
<P><STRONG><a name="[542]"></a>gnss_get_location</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, gnss_app.o(i.gnss_get_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gnss_get_location &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_periodic_timer_handle_func
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_on_off_timer_handle_func
</UL>

<P><STRONG><a name="[549]"></a>gnss_get_sentence_param</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, gnss_app.o(i.gnss_get_sentence_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gnss_get_sentence_param
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_by_pmtk_process
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_process_pmtk_response
</UL>

<P><STRONG><a name="[544]"></a>gnss_nmea_data_process</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, gnss_app.o(i.gnss_nmea_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = gnss_nmea_data_process &rArr; gnss_process_pmtk_response &rArr; epo_demo_send_assistance_data &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_process_pmtk_response
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
</UL>

<P><STRONG><a name="[b3]"></a>gnss_on_off_timer_handle_func</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gnss_app.o(i.gnss_on_off_timer_handle_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gnss_on_off_timer_handle_func &rArr; gnss_start_timer &rArr; gnss_start_timer_internal &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_power_on
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_power_off
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_get_location
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gnss_app.o(i.gnss_on_off_timer_handle_func)
<LI> gnss_app.o(i.gnss_task_msg_handler)
</UL>
<P><STRONG><a name="[b6]"></a>gnss_periodic_timer_handle_func</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gnss_app.o(i.gnss_periodic_timer_handle_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gnss_periodic_timer_handle_func &rArr; gnss_get_location &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_get_location
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_app.o(i.gnss_task_msg_handler)
</UL>
<P><STRONG><a name="[545]"></a>gnss_process_pmtk_response</STRONG> (Thumb, 118 bytes, Stack size 280 bytes, gnss_app.o(i.gnss_process_pmtk_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = gnss_process_pmtk_response &rArr; epo_demo_send_assistance_data &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_get_sentence_param
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_time
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epo_demo_send_assistance_data
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_nmea_data_process
</UL>

<P><STRONG><a name="[54e]"></a>gnss_set_preport_and_fix_period</STRONG> (Thumb, 68 bytes, Stack size 216 bytes, gnss_app.o(i.gnss_set_preport_and_fix_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = gnss_set_preport_and_fix_period &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_send_cmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
</UL>

<P><STRONG><a name="[b7]"></a>gnss_sleep_timer_handle_func</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gnss_app.o(i.gnss_sleep_timer_handle_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gnss_sleep_timer_handle_func &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gnss_app.o(i.gnss_task_msg_handler)
<LI> gnss_app.o(i.gnss_wakeup_handle)
</UL>
<P><STRONG><a name="[530]"></a>gnss_task_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gnss_app.o(i.gnss_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gnss_task_init &rArr; gnss_init &rArr; gnss_driver_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buf_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_init
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_create
</UL>

<P><STRONG><a name="[af]"></a>gnss_task_main</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gnss_app.o(i.gnss_task_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = gnss_task_main &rArr; gnss_task_msg_handler &rArr; gnss_nmea_data_process &rArr; gnss_process_pmtk_response &rArr; epo_demo_send_assistance_data &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_start
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_config
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_app.o(i.gnss_demo_app_create)
</UL>
<P><STRONG><a name="[553]"></a>gnss_task_msg_handler</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, gnss_app.o(i.gnss_task_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = gnss_task_msg_handler &rArr; gnss_nmea_data_process &rArr; gnss_process_pmtk_response &rArr; epo_demo_send_assistance_data &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_read_sentence
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_power_on
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_power_off
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_timer
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_demo_app_start
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_wakeup_handle
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_set_preport_and_fix_period
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_nmea_data_process
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd_helper
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_stop_timer
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_repeat_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_main
</UL>

<P><STRONG><a name="[b5]"></a>gnss_timer_expiry_notify</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gnss_app.o(i.gnss_timer_expiry_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gnss_timer_expiry_notify &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_app.o(i.gnss_task_init)
</UL>
<P><STRONG><a name="[554]"></a>gnss_wakeup_handle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gnss_app.o(i.gnss_wakeup_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = gnss_wakeup_handle &rArr; gnss_app_send_cmd &rArr; gnss_send_command &rArr; gnss_driver_uart_write &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_task_msg_handler
</UL>

<P><STRONG><a name="[522]"></a>gnss_bridge_msg_handler</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gnss_bridge_task.o(i.gnss_bridge_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gnss_bridge_msg_handler &rArr; gnss_app_forward_cmd &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_app_forward_cmd
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_send_debug_data
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_read_command
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_task_main
</UL>

<P><STRONG><a name="[ac]"></a>gnss_bridge_task_callback</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gnss_bridge_task.o(i.gnss_bridge_task_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gnss_bridge_task_callback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_bridge_task.o(i.gnss_bridge_port_reinit)
</UL>
<P><STRONG><a name="[ae]"></a>gnss_bridge_task_main</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gnss_bridge_task.o(i.gnss_bridge_task_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gnss_bridge_task_main &rArr; gnss_bridge_msg_handler &rArr; gnss_app_forward_cmd &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bridge_msg_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_bridge_task.o(i.gnss_bridge_task_init)
</UL>
<P><STRONG><a name="[ad]"></a>gnss_bridge_timer_callback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gnss_bridge_task.o(i.gnss_bridge_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gnss_bridge_timer_callback &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_bridge_task.o(i.gnss_bridge_task_init)
</UL>
<P><STRONG><a name="[551]"></a>append_excute_time_list</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gnss_timer.o(i.append_excute_time_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = append_excute_time_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_exp_timer_to_excute_list
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer_internal
</UL>

<P><STRONG><a name="[4d6]"></a>delete_timer_item</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gnss_timer.o(i.delete_timer_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = delete_timer_item &rArr; gnss_ajust_timer &rArr; move_exp_timer_to_excute_list &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_timer_item_to_free_list
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_ajust_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_stop_timer
</UL>

<P><STRONG><a name="[4d8]"></a>gnss_ajust_timer</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gnss_timer.o(i.gnss_ajust_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gnss_ajust_timer &rArr; move_exp_timer_to_excute_list &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_exp_timer_to_excute_list
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_timer_list
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_timer_item
</UL>

<P><STRONG><a name="[54d]"></a>gnss_run_timer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gnss_timer.o(i.gnss_run_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gnss_run_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_timer_list
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_callback
</UL>

<P><STRONG><a name="[54f]"></a>gnss_start_timer_internal</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gnss_timer.o(i.gnss_start_timer_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gnss_start_timer_internal &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_timer_list
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_excute_time_list
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_repeat_timer
</UL>

<P><STRONG><a name="[b8]"></a>gnss_timer_callback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gnss_timer.o(i.gnss_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gnss_timer_callback &rArr; move_exp_timer_to_excute_list &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_exp_timer_to_excute_list
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_run_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gnss_timer.o(i.gnss_timer_init)
</UL>
<P><STRONG><a name="[550]"></a>insert_to_timer_list</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, gnss_timer.o(i.insert_to_timer_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_run_timer
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_ajust_timer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_exp_timer_to_excute_list
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_start_timer_internal
</UL>

<P><STRONG><a name="[51b]"></a>move_exp_timer_to_excute_list</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gnss_timer.o(i.move_exp_timer_to_excute_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = move_exp_timer_to_excute_list &rArr; insert_to_timer_list &rArr;  gnss_ajust_timer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_timer_list
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_excute_time_list
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_timer_callback
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_ajust_timer
</UL>

<P><STRONG><a name="[4d7]"></a>put_timer_item_to_free_list</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gnss_timer.o(i.put_timer_item_to_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = put_timer_item_to_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_timer
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_timer_item
</UL>

<P><STRONG><a name="[ca]"></a>atci_def_task</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.atci_def_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352 + In Cycle
<LI>Call Chain = atci_def_task &rArr;  atci_def_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_processing
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_def_task
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_def_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[203]"></a>_bt_find_link_key_edr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bt_common.o(i._bt_find_link_key_edr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _bt_find_link_key_edr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_bt_app_event_callback
</UL>

<P><STRONG><a name="[5a5]"></a>hci_log</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bt_hci_log_uart.o(i.hci_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_log
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_event
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_cmd
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_acl_out
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_acl_in
</UL>

<P><STRONG><a name="[5a6]"></a>hci_log_a2dp_streaming_data_omit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bt_hci_log_uart.o(i.hci_log_a2dp_streaming_data_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_log_a2dp_streaming_data_omit &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_log_acl_in
</UL>

<P><STRONG><a name="[286]"></a>bt_preread_local_address</STRONG> (Thumb, 506 bytes, Stack size 72 bytes, bt_init.o(i.bt_preread_local_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = bt_preread_local_address &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_show_address
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_create_task
</UL>

<P><STRONG><a name="[287]"></a>bt_show_address</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, bt_init.o(i.bt_show_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_show_address
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_preread_local_address
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_create_task
</UL>

<P><STRONG><a name="[5b9]"></a>mpu_init</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, sys_init.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_init &rArr; hal_mpu_region_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_region_enable
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_region_disable
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_region_configure
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_init
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[604]"></a>prvSetupHardware</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sys_init.o(i.prvSetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = prvSetupHardware &rArr; hal_rtc_init &rArr; f32k_osc32_Init &rArr; rtc_set_power_key &rArr; rtc_lpd_init &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_init
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_init
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dcxo_init
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_set_size
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_enable
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_disable
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_region_config
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ept_gpio_setting_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[249]"></a>ble_app_advertise_data_init</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, ble_app_common.o(i.ble_app_advertise_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ble_app_advertise_data_init &rArr; bt_gap_le_set_advertising &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gatts_set_max_mtu
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_le_set_advertising
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_event_callback
</UL>

<P><STRONG><a name="[6b]"></a>ble_app_event_callback</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ble_app_common.o(i.ble_app_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_app_event_callback &rArr; ble_app_advertise_data_init &rArr; bt_gap_le_set_advertising &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_advertise_data_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_common.o(i.ble_app_common_init)
</UL>
<P><STRONG><a name="[6a]"></a>ble_app_gap_le_get_bonding_info</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_app_common.o(i.ble_app_gap_le_get_bonding_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_app_gap_le_get_bonding_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_common.o(i.ble_app_common_init)
</UL>
<P><STRONG><a name="[68]"></a>ble_app_gap_le_get_local_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_app_common.o(i.ble_app_gap_le_get_local_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_app_gap_le_get_local_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_common.o(i.ble_app_common_init)
</UL>
<P><STRONG><a name="[69]"></a>ble_app_gap_le_get_pairing_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_app_common.o(i.ble_app_gap_le_get_pairing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_app_gap_le_get_pairing_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_common.o(i.ble_app_common_init)
</UL>
<P><STRONG><a name="[dc]"></a>bt_if_gap_appearance_callback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gatt_service.o(i.bt_if_gap_appearance_callback))
<BR>[Address Reference Count : 1]<UL><LI> gatt_service.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>bt_if_gap_dev_name_callback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gatt_service.o(i.bt_if_gap_dev_name_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_if_gap_dev_name_callback &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gatt_service.o(.constdata)
<LI> gatt_service.o(.constdata)
</UL>
<P><STRONG><a name="[5f3]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[5ff]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[600]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[601]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[602]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[603]"></a>prvSwitchTimerLists</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[d5]"></a>prvTimerTask</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[5fc]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[5fd]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[60a]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[5f1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[5f8]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[d1]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[65f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[60d]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[60e]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[655]"></a>prvTestWaitCondition</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[cd]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[54c]"></a>gnss_nmea_checksum</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, gnss_api.o(i.gnss_nmea_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gnss_nmea_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_read_sentence
</UL>

<P><STRONG><a name="[4dd]"></a>dvfs_target_frequency</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, hal_dvfs.o(i.dvfs_target_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dvfs_target_frequency &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_notify_prepare
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvfs_notify_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dvfs_target_cpu_frequency
</UL>

<P><STRONG><a name="[561]"></a>eint_caculate_debounce_time</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, hal_eint.o(i.eint_caculate_debounce_time))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_set_debounce_time
</UL>

<P><STRONG><a name="[b9]"></a>hal_eint_isr</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hal_eint.o(i.hal_eint_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hal_eint_isr &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eint_ack_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_eint.o(i.hal_eint_init)
</UL>
<P><STRONG><a name="[1df]"></a>MountDevice</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_flash_disk.o(i.MountDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_FDM_lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeFDMLock
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRawDiskData
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRawDiskData
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseRawDiskBlock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_init
</UL>

<P><STRONG><a name="[126]"></a>LookupAddress</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, hal_flash_mtd.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LookupAddress &rArr; BlockAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapWindow
</UL>

<P><STRONG><a name="[568]"></a>hal_gpt_is_port_valid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_gpt.o(i.hal_gpt_is_port_valid))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_init
</UL>

<P><STRONG><a name="[56d]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_nvic.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
</UL>

<P><STRONG><a name="[56c]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_nvic.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_init
</UL>

<P><STRONG><a name="[650]"></a>vdma_check_valid_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_pdma_internal.o(i.vdma_check_valid_channel))
<BR><BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_stop
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_threshold
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_set_alert_length
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_register_callback
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_push_data
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_pop_data
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_init
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_send_space
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_get_available_receive_bytes
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_disable_interrupt
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_deinit
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_configure
</UL>

<P><STRONG><a name="[4fc]"></a>f32k_eosc32_calibration</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, hal_rtc.o(i.f32k_eosc32_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f32k_eosc32_calibration &rArr; rtc_write_osc32con1 &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con1
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con1
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_measure_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[500]"></a>f32k_osc32_Init</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, hal_rtc.o(i.f32k_osc32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f32k_osc32_Init &rArr; rtc_set_power_key &rArr; rtc_lpd_init &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_warning_internal
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con2
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con1
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_scxo_mode
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_power_key
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con2
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con1
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lpd_init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_eosc32_calibration
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_measure_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
</UL>

<P><STRONG><a name="[571]"></a>rtc_check_alarm_power_on</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, hal_rtc.o(i.rtc_check_alarm_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rtc_check_alarm_power_on &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_time
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_warning_internal
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
</UL>

<P><STRONG><a name="[50b]"></a>rtc_dump_register</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, hal_rtc.o(i.rtc_dump_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_warning_internal
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reload
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con2
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_power_key
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lpd_init
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[ce]"></a>rtc_eint_callback</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_eint_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtc_eint_callback &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_mask
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_rtc.o(i.rtc_init_eint)
</UL>
<P><STRONG><a name="[572]"></a>rtc_enable_2sec_reboot</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hal_rtc.o(i.rtc_enable_2sec_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtc_enable_2sec_reboot &rArr; rtc_write_osc32con &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_register_value
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_warning_internal
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
</UL>

<P><STRONG><a name="[573]"></a>rtc_init_eint</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_init_eint))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rtc_init_eint &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_register_callback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
</UL>

<P><STRONG><a name="[575]"></a>rtc_is_time_valid</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_is_time_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rtc_is_time_valid &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_set_time
</UL>

<P><STRONG><a name="[50a]"></a>rtc_lpd_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, hal_rtc.o(i.rtc_lpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rtc_lpd_init &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_measure_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_power_key
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[4fd]"></a>rtc_read_osc32con1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_rtc.o(i.rtc_read_osc32con1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = rtc_read_osc32con1 &rArr;  rtc_write_trigger_wait (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_scxo_mode
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_eosc32_calibration
</UL>

<P><STRONG><a name="[503]"></a>rtc_read_osc32con2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_rtc.o(i.rtc_read_osc32con2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = rtc_read_osc32con2 &rArr;  rtc_write_trigger_wait (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_scxo_mode
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[506]"></a>rtc_register_init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hal_rtc.o(i.rtc_register_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rtc_register_init &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[610]"></a>rtc_reload</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_rtc.o(i.rtc_reload))
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_power_key
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con2
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con1
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con
</UL>

<P><STRONG><a name="[508]"></a>rtc_set_power_key</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_set_power_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rtc_set_power_key &rArr; rtc_lpd_init &rArr; rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reload
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lpd_init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[509]"></a>rtc_set_scxo_mode</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, hal_rtc.o(i.rtc_set_scxo_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtc_set_scxo_mode &rArr; rtc_write_osc32con2 &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us (via Veneer)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con2
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con1
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con2
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con1
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[570]"></a>rtc_wait_busy</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, hal_rtc.o(i.rtc_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_register_value
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_dump_register
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_measure_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_trigger_wait
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con2
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con1
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write_osc32con
</UL>

<P><STRONG><a name="[505]"></a>rtc_write_osc32con</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_write_osc32con))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtc_write_osc32con &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_enable_2sec_reboot
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[4fe]"></a>rtc_write_osc32con1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_write_osc32con1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtc_write_osc32con1 &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_scxo_mode
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_eosc32_calibration
</UL>

<P><STRONG><a name="[504]"></a>rtc_write_osc32con2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_write_osc32con2))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtc_write_osc32con2 &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_scxo_mode
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
</UL>

<P><STRONG><a name="[507]"></a>rtc_write_trigger_wait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rtc.o(i.rtc_write_trigger_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtc_write_trigger_wait &rArr; rtc_wait_busy &rArr; rtc_dump_register &rArr; log_hal_warning_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_set_time
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_power_key
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reload
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con2
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con1
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lpd_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_eint_callback
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_check_alarm_power_on
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32k_osc32_Init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read_osc32con
</UL>

<P><STRONG><a name="[594]"></a>uart_config_is_valid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_uart.o(i.uart_config_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[c6]"></a>uart_dma_callback_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_uart.o(i.uart_dma_callback_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = uart_dma_callback_handler &rArr; uart_send_handler &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_handler
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(i.hal_uart_register_callback)
</UL>
<P><STRONG><a name="[593]"></a>uart_port_is_valid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(i.uart_port_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[59f]"></a>uart_start_dma_transmission</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hal_uart.o(i.uart_start_dma_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_start_dma_transmission &rArr; vdma_start
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_start
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdma_enable_interrupt
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_unmask_send_interrupt
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_unmask_receive_interrupt
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_to_dma_channel
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_register_callback
</UL>

<P><STRONG><a name="[a3]"></a>dvfs_vcore_get_next_module</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_dvfs_internal_vcore.o(i.dvfs_vcore_get_next_module))
<BR>[Address Reference Count : 1]<UL><LI> hal_dvfs_internal_vcore.o(i.dvfs_vcore_domain_initialize)
</UL>
<P><STRONG><a name="[a1]"></a>dvfs_vcore_switch_voltage</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_dvfs_internal_vcore.o(i.dvfs_vcore_switch_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dvfs_vcore_switch_voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_dvfs_internal_vcore.o(i.dvfs_vcore_domain_initialize)
</UL>
<P><STRONG><a name="[f]"></a>internal_pmu_audio_lock_voltage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_pmu_wrap_interface.o(i.internal_pmu_audio_lock_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = internal_pmu_audio_lock_voltage &rArr; PMIC_VCORE_VOSEL_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VCORE_VOSEL_CONFIG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>internal_pmu_ctrl_power</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hal_pmu_wrap_interface.o(i.internal_pmu_ctrl_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = internal_pmu_ctrl_power &rArr; pmu_ctrl_va28_ldo_mt6385 &rArr; PMIC_VR_SLEEP_WKUP_CONFIG &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_vbt_ldo_mt6385
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_ctrl_va28_ldo_mt6385
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMIC_VR_CONTROL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_pmu_wrap_interface.o(.data)
</UL>
<P><STRONG><a name="[514]"></a>get_current_time_in_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, syslog.o(i.get_current_time_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_current_time_in_ms &rArr; hal_gpt_get_free_run_count &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[633]"></a>log_switch_to_dma_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, syslog.o(i.log_switch_to_dma_mode))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_open
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_port_service_callback
</UL>

<P><STRONG><a name="[631]"></a>syslog_buffer_dump</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, syslog.o(i.syslog_buffer_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = syslog_buffer_dump &rArr; process_log_message &rArr; print_hex_dump &rArr; hex_dump_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_log_message
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_exception_cb
</UL>

<P><STRONG><a name="[c8]"></a>syslog_exception_cb</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, syslog.o(i.syslog_exception_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = syslog_exception_cb &rArr; log_uart_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_buffer_dump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syslog.o(i.log_init)
</UL>
<P><STRONG><a name="[d0]"></a>syslog_port_service_callback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, syslog.o(i.syslog_port_service_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = syslog_port_service_callback &rArr; syslog_serial_port_switch &rArr; syslog_serial_port_open &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_switch
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_switch_to_dma_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syslog.o(i.syslog_serial_port_open)
</UL>
<P><STRONG><a name="[634]"></a>syslog_serial_port_open</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, syslog.o(i.syslog_serial_port_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = syslog_serial_port_open &rArr; serial_port_open &rArr; serial_port_config_read_dev_setting &rArr; serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_deinit
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_switch_to_dma_mode
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_task_entry
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syslog_serial_port_switch
</UL>

<P><STRONG><a name="[91]"></a>bt_notify_data_hdlr</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, bt_notify_data_parse.o(i.bt_notify_data_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bt_notify_data_hdlr &rArr; xml_stop_parse &rArr; xml_free_tag_list &rArr; xml_free_buffer &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_stop_parse
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(i.bt_notify_xml_parse)
</UL>
<P><STRONG><a name="[89]"></a>bt_notify_data_parse_xml_callback</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, bt_notify_data_parse.o(i.bt_notify_data_parse_xml_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_notify_data_parse_xml_callback &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_reset_parse_status
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(i.bt_notify_data_handle_new_msg)
</UL>
<P><STRONG><a name="[8f]"></a>bt_notify_elem_end_hdlr</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bt_notify_data_parse.o(i.bt_notify_elem_end_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_notify_elem_end_hdlr &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(i.bt_notify_xml_parse)
</UL>
<P><STRONG><a name="[90]"></a>bt_notify_elem_start_hdlr</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, bt_notify_data_parse.o(i.bt_notify_elem_start_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_notify_elem_start_hdlr &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(i.bt_notify_xml_parse)
</UL>
<P><STRONG><a name="[17]"></a>bt_notify_node_action</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_notify_node_action &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>bt_notify_node_action_id</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bt_notify_data_parse.o(i.bt_notify_node_action_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_notify_node_action_id &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>bt_notify_node_action_name</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, bt_notify_data_parse.o(i.bt_notify_node_action_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_notify_node_action_name &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>bt_notify_node_action_number</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_action_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_notify_node_action_number &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>bt_notify_node_appid</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_appid))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_notify_node_appid &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>bt_notify_node_category</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_category))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_notify_node_category &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>bt_notify_node_content</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, bt_notify_data_parse.o(i.bt_notify_node_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_notify_node_content &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>bt_notify_node_group_id</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bt_notify_data_parse.o(i.bt_notify_node_group_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_notify_node_group_id &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>bt_notify_node_missed_call_count</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_missed_call_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_notify_node_missed_call_count &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>bt_notify_node_msgid</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_msgid))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_notify_node_msgid &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>bt_notify_node_number</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bt_notify_data_parse.o(i.bt_notify_node_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_notify_node_number &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>bt_notify_node_page_indx</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bt_notify_data_parse.o(i.bt_notify_node_page_indx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_notify_node_page_indx &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>bt_notify_node_page_number</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, bt_notify_data_parse.o(i.bt_notify_node_page_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_notify_node_page_number &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>bt_notify_node_sender</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, bt_notify_data_parse.o(i.bt_notify_node_sender))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_notify_node_sender &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>bt_notify_node_subtype</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_subtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_notify_node_subtype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>bt_notify_node_timestamp</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, bt_notify_data_parse.o(i.bt_notify_node_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_notify_node_timestamp &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>bt_notify_node_title</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bt_notify_data_parse.o(i.bt_notify_node_title))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_notify_node_title &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_data_parse.o(.data)
</UL>
<P><STRONG><a name="[652]"></a>vir_read_file</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, xml_main.o(i.vir_read_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vir_read_file &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
</UL>

<P><STRONG><a name="[660]"></a>xml_attr_handle_entity</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, xml_main.o(i.xml_attr_handle_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_valid_entity_start
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_min_entity_mark
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
</UL>

<P><STRONG><a name="[667]"></a>xml_extract_token</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xml_main.o(i.xml_extract_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xml_extract_token &rArr; strtok_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
</UL>

<P><STRONG><a name="[668]"></a>xml_filter_comment_pi</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, xml_main.o(i.xml_filter_comment_pi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xml_filter_comment_pi &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
</UL>

<P><STRONG><a name="[665]"></a>xml_find_min_entity_mark</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, xml_main.o(i.xml_find_min_entity_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xml_find_min_entity_mark &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
</UL>

<P><STRONG><a name="[66f]"></a>xml_find_min_ptr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, xml_main.o(i.xml_find_min_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
</UL>

<P><STRONG><a name="[662]"></a>xml_find_valid_entity_start</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, xml_main.o(i.xml_find_valid_entity_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xml_find_valid_entity_start &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
</UL>

<P><STRONG><a name="[664]"></a>xml_free_buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xml_main.o(i.xml_free_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xml_free_buffer &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_stop_parse
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_close_parser
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_save_content_data
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_replace_entity
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_cdata
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_pop_start_tag
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_tag_list
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
</UL>

<P><STRONG><a name="[666]"></a>xml_free_tag_list</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, xml_main.o(i.xml_free_tag_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xml_free_tag_list &rArr; xml_free_buffer &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_stop_parse
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_close_parser
</UL>

<P><STRONG><a name="[661]"></a>xml_get_buffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xml_main.o(i.xml_get_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xml_get_buffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_replace_entity
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_cdata
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
</UL>

<P><STRONG><a name="[677]"></a>xml_get_curr_position</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xml_main.o(i.xml_get_curr_position))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_cdata
</UL>

<P><STRONG><a name="[663]"></a>xml_get_entity_value</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, xml_main.o(i.xml_get_entity_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_replace_entity
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
</UL>

<P><STRONG><a name="[66c]"></a>xml_parse_element</STRONG> (Thumb, 974 bytes, Stack size 48 bytes, xml_main.o(i.xml_parse_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = xml_parse_element &rArr; xml_process_start_tag &rArr; xml_process_start_tag_internal &rArr; xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_min_ptr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_buffer
</UL>

<P><STRONG><a name="[66b]"></a>xml_parse_prolog</STRONG> (Thumb, 886 bytes, Stack size 80 bytes, xml_main.o(i.xml_parse_prolog))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = xml_parse_prolog &rArr; xml_process_doctype &rArr; xml_process_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_seek_xmltext
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_min_ptr
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_buffer
</UL>

<P><STRONG><a name="[675]"></a>xml_pop_start_tag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xml_main.o(i.xml_pop_start_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xml_pop_start_tag &rArr; xml_free_buffer &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
</UL>

<P><STRONG><a name="[676]"></a>xml_process_cdata</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, xml_main.o(i.xml_process_cdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xml_process_cdata &rArr; xml_get_buffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_seek_xmltext
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_curr_position
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
</UL>

<P><STRONG><a name="[670]"></a>xml_process_data</STRONG> (Thumb, 554 bytes, Stack size 80 bytes, xml_main.o(i.xml_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xml_process_data &rArr; xml_scan_named_char &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_seek_xmltext
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_save_content_data
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_reset_end_position
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_cdata
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_curr_position
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_filter_comment_pi
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
</UL>

<P><STRONG><a name="[673]"></a>xml_process_doctype</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, xml_main.o(i.xml_process_doctype))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = xml_process_doctype &rArr; xml_process_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_seek_xmltext
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_curr_position
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_extract_token
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
</UL>

<P><STRONG><a name="[66e]"></a>xml_process_end_tag</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, xml_main.o(i.xml_process_end_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xml_process_end_tag &rArr; xml_set_error &rArr; xml_get_buffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_seek_xmltext
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_pop_start_tag
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_curr_position
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_extract_token
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
</UL>

<P><STRONG><a name="[67c]"></a>xml_process_entity</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, xml_main.o(i.xml_process_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = xml_process_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_valid_entity_start
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_min_entity_mark
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_extract_token
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
</UL>

<P><STRONG><a name="[672]"></a>xml_process_prolog</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, xml_main.o(i.xml_process_prolog))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xml_process_prolog &rArr; xml_get_buffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_seek_xmltext
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_curr_position
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
</UL>

<P><STRONG><a name="[66d]"></a>xml_process_start_tag</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, xml_main.o(i.xml_process_start_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = xml_process_start_tag &rArr; xml_process_start_tag_internal &rArr; xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_pop_start_tag
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
</UL>

<P><STRONG><a name="[67d]"></a>xml_process_start_tag_internal</STRONG> (Thumb, 764 bytes, Stack size 264 bytes, xml_main.o(i.xml_process_start_tag_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = xml_process_start_tag_internal &rArr; xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_set_error
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_seek_xmltext
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_read_xmltext
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_curr_position
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_extract_token
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_attr_handle_entity
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag
</UL>

<P><STRONG><a name="[671]"></a>xml_read_xmltext</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, xml_main.o(i.xml_read_xmltext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xml_read_xmltext &rArr; vir_read_file &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vir_read_file
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_cdata
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_element
</UL>

<P><STRONG><a name="[669]"></a>xml_replace_entity</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, xml_main.o(i.xml_replace_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xml_replace_entity &rArr; xml_get_buffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
</UL>

<P><STRONG><a name="[678]"></a>xml_reset_end_position</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, xml_main.o(i.xml_reset_end_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xml_reset_end_position &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
</UL>

<P><STRONG><a name="[67a]"></a>xml_save_content_data</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, xml_main.o(i.xml_save_content_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xml_save_content_data &rArr; xml_free_buffer &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_scan_named_char
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
</UL>

<P><STRONG><a name="[679]"></a>xml_scan_named_char</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, xml_main.o(i.xml_scan_named_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = xml_scan_named_char &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_save_content_data
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_entity_value
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_valid_entity_start
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_find_min_entity_mark
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
</UL>

<P><STRONG><a name="[674]"></a>xml_seek_xmltext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xml_main.o(i.xml_seek_xmltext))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_prolog
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_cdata
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_parse_prolog
</UL>

<P><STRONG><a name="[67b]"></a>xml_set_error</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xml_main.o(i.xml_set_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xml_set_error &rArr; xml_get_buffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_get_buffer
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_free_buffer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_start_tag_internal
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_entity
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_end_tag
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_doctype
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xml_process_data
</UL>

<P><STRONG><a name="[6c]"></a>ble_dogp_adp_read_evt_handler</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, ble_dogp_adp_service.o(i.ble_dogp_adp_read_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ble_dogp_adp_read_evt_handler &rArr; ble_dogp_service_read_characteristic_send &rArr; bt_gatts_send_charc_value_notification_indication &rArr; bt_att_send_packet &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gattc_get_mtu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_service_read_characteristic_send
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dogp_adp_service.o(i.ble_dogp_adp_init)
</UL>
<P><STRONG><a name="[6d]"></a>ble_dogp_adp_write_evt_handler</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, ble_dogp_adp_service.o(i.ble_dogp_adp_write_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ble_dogp_adp_write_evt_handler &rArr; ble_dogp_adp_update_connection_interval &rArr; ble_dogp_update_connection_interval &rArr; bt_gap_le_update_connection_parameter &rArr; bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_update_connection_interval
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dogp_adp_service.o(i.ble_dogp_adp_init)
</UL>
<P><STRONG><a name="[6e]"></a>ble_dogp_adp_update_connection_interval_timerout</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_dogp_common.o(i.ble_dogp_adp_update_connection_interval_timerout))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ble_dogp_adp_update_connection_interval_timerout &rArr; ble_dogp_update_connection_interval &rArr; bt_gap_le_update_connection_parameter &rArr; bt_l2cap_conn_param_update_req &rArr; bt_l2cap_le_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_update_connection_interval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dogp_common.o(i.ble_dogp_adp_update_connection_interval)
</UL>
<P><STRONG><a name="[dd]"></a>ble_dogp_read_char_callback</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ble_dogp_service.o(i.ble_dogp_read_char_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dogp_read_char_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dogp_service.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>ble_dogp_read_char_cccd_callback</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, ble_dogp_service.o(i.ble_dogp_read_char_cccd_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dogp_read_char_cccd_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dogp_service.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>ble_dogp_write_char_callback</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, ble_dogp_service.o(i.ble_dogp_write_char_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_dogp_write_char_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dogp_service.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>bt_os_layer_rtos_timer_os_expire</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_os_layer_api.o(i.bt_os_layer_rtos_timer_os_expire))
<BR>[Address Reference Count : 1]<UL><LI> bt_os_layer_api.o(i.bt_os_layer_init_timer)
</UL>
<P><STRONG><a name="[4b3]"></a>bt_task_generate_random_address</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bt_task.o(i.bt_task_generate_random_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_task_generate_random_address &rArr; hal_trng_get_generated_random_number &rArr; trng_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_get_generated_random_number
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trng_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_task
</UL>

<P><STRONG><a name="[5b8]"></a>aes_gen_tables</STRONG> (Thumb, 412 bytes, Stack size 2084 bytes, aes.o(i.aes_gen_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 2084<LI>Call Chain = aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>

<P><STRONG><a name="[22e]"></a>atci_check_end_valid_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, atci_handler.o(i.atci_check_end_valid_char))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_parse_input_at_cmd
</UL>

<P><STRONG><a name="[22d]"></a>atci_local_caculate_hash_value</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, atci_handler.o(i.atci_local_caculate_hash_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = atci_local_caculate_hash_value
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_register_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_parse_input_at_cmd
</UL>

<P><STRONG><a name="[224]"></a>atci_local_check_duplicate_cm4_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, atci_handler.o(i.atci_local_check_duplicate_cm4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = atci_local_check_duplicate_cm4_handler &rArr; atci_local_find_cm4_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_find_cm4_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_register_handler
</UL>

<P><STRONG><a name="[223]"></a>atci_local_dispatch_cm4_general_handler</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, atci_handler.o(i.atci_local_dispatch_cm4_general_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atci_local_dispatch_cm4_general_handler &rArr; atci_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_unlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_mutex_lock
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_input_command_handler
</UL>

<P><STRONG><a name="[222]"></a>atci_local_parse_input_at_cmd</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, atci_handler.o(i.atci_local_parse_input_at_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atci_local_parse_input_at_cmd &rArr; atci_local_caculate_hash_value
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_local_caculate_hash_value
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_check_end_valid_char
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_input_command_handler
</UL>

<P><STRONG><a name="[245]"></a>atci_process_flag</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, atci_handler.o(i.atci_process_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atci_process_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atci_send_response
</UL>

<P><STRONG><a name="[628]"></a>handle_is_valid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_port.o(i.handle_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_control
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_close
</UL>

<P><STRONG><a name="[62c]"></a>port_return_handle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_port.o(i.port_return_handle))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_open
</UL>

<P><STRONG><a name="[62a]"></a>serial_port_config_check_default_setting</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, serial_port_para.o(i.serial_port_config_check_default_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = serial_port_config_check_default_setting &rArr; nvdm_write_data_item &rArr; space_allocation &rArr; garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_write_dev_setting
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_port_config_read_dev_setting
</UL>

<P><STRONG><a name="[cf]"></a>serial_port_uart_callback</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, serial_port_uart.o(i.serial_port_uart_callback))
<BR>[Address Reference Count : 1]<UL><LI> serial_port_uart.o(i.serial_port_uart_init)
</UL>
<P><STRONG><a name="[3c]"></a>general_pll_enable_op</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = general_pll_enable_op &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[3d]"></a>general_pll_disable_op</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = general_pll_disable_op
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[3e]"></a>general_pll_req_save_release_op</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = general_pll_req_save_release_op
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[3f]"></a>general_pll_req_restore_op</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = general_pll_req_restore_op
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[40]"></a>general_clock_src_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_src_set
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[41]"></a>general_clock_src_clear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_src_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[42]"></a>general_clock_src_get_state</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[43]"></a>general_clock_div_enable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_div_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[44]"></a>general_clock_div_disable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_div_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[45]"></a>general_clock_force_on_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = general_clock_force_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[46]"></a>general_clock_force_on_clear</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = general_clock_force_on_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[47]"></a>general_clock_change_bit_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = general_clock_change_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[48]"></a>general_clock_change_bit_verified</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = general_clock_change_bit_verified &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[49]"></a>general_clock_mux_sel</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = general_clock_mux_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[4a]"></a>general_clock_mux_get_state</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[4b]"></a>general_clock_mux_request_pll</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_mux_request_pll
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[190]"></a>clock_api_internal_reset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_api_internal_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_lfosc_lfosc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_mpll_mpll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_mpll
</UL>

<P><STRONG><a name="[191]"></a>clock_api_internal_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_api_internal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_dcxo_dcxo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_hfosc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_hfosc_hfosc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m_lfosc_lfosc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m_mpll_mpll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m_mpll_mpll
</UL>

<P><STRONG><a name="[4c]"></a>general_grp_get_state_op</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[39]"></a>general_clock_enable_op</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_enable_op
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[3a]"></a>general_clock_disable_op</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_disable_op
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[3b]"></a>general_clock_force_disable_op</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = general_clock_force_disable_op
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[4d]"></a>general_clock_suspend_op</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = general_clock_suspend_op &rArr; cm_bus_clk_26m &rArr; cm_bus_clk_26m_dcxo_dcxo &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_DynamicClockSwitch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_SWITCH_TO_LOW_FQ
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[4e]"></a>general_clock_resume_op</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = general_clock_resume_op &rArr; cm_bus_clk_104m &rArr; cm_bus_clk_104m_hfosc_hfosc &rArr; clock_change_bit_verified_all &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_us
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_DynamicClockSwitch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_DEV_SWITCH_TO_HIGH_FQ
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_26m
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_104m
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_bus_clk_208m
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_clock.o(.tcm_rwdata)
</UL>
<P><STRONG><a name="[193]"></a>id_to_clock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_is_enabled
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hal_clock_disable_
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hal_clock_enable_
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_force_disable
</UL>

<P><STRONG><a name="[194]"></a>_hal_clock_enable_</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_to_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_enable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_all_on
</UL>

<P><STRONG><a name="[196]"></a>_hal_clock_disable_</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_clock.o(.tcm_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _hal_clock_disable_
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_to_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clock_disable
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_all_off
</UL>

<P><STRONG><a name="[3ba]"></a>bt_notify_check_cmd_valid</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, bt_notify_main_recv.o(i.bt_notify_check_cmd_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_notify_check_cmd_valid &rArr; bt_notify_get_sync_connection_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_sync_connection_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3c8]"></a>bt_notify_fsm_cmd_hldr</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_cmd_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = bt_notify_fsm_cmd_hldr &rArr; bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data_header
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_reqv_cmd_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_cmd_valid
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_receive_data_fsm_int
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_idle_hldr
</UL>

<P><STRONG><a name="[3ce]"></a>bt_notify_fsm_data_cmd_hldr</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_data_cmd_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + In Cycle
<LI>Call Chain = bt_notify_fsm_data_cmd_hldr &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_source
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3d6]"></a>bt_notify_fsm_data_hldr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_data_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + In Cycle
<LI>Call Chain = bt_notify_fsm_data_hldr &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_source
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_data
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_receive_data_fsm_int
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data
</UL>

<P><STRONG><a name="[3cc]"></a>bt_notify_fsm_ext_cmd_hldr</STRONG> (Thumb, 300 bytes, Stack size 88 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_ext_cmd_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_source
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_ext_notify
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_ext_buffer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_ext_data
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3da]"></a>bt_notify_fsm_ext_data_hldr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_ext_data_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + In Cycle
<LI>Call Chain = bt_notify_fsm_ext_data_hldr &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_source
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_ext_notify
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_ext_buffer
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_receive_data_fsm_int
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data
</UL>

<P><STRONG><a name="[3db]"></a>bt_notify_fsm_idle_hldr</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_idle_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = bt_notify_fsm_idle_hldr &rArr; bt_notify_fsm_cmd_hldr &rArr; bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_receive_data_fsm_int
</UL>

<P><STRONG><a name="[3d0]"></a>bt_notify_fsm_reqv_cmd_hldr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_reqv_cmd_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + In Cycle
<LI>Call Chain = bt_notify_fsm_reqv_cmd_hldr &rArr;  bt_notify_receive_data_fsm_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_receive_data_fsm_int
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3cf]"></a>bt_notify_fsm_sync_cmd_hldr</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, bt_notify_main_recv.o(i.bt_notify_fsm_sync_cmd_hldr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = bt_notify_fsm_sync_cmd_hldr &rArr; bt_notify_send_data_handshake &rArr; bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_set_remote_device_type
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_stop_sync_cmd_wait_timer
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_remote_vern
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_remote_system
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3f8]"></a>bt_notify_gen_cmd_pre_header</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_gen_cmd_pre_header))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
</UL>

<P><STRONG><a name="[3c9]"></a>bt_notify_move_recv_buffer_to_head</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_move_recv_buffer_to_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_notify_move_recv_buffer_to_head &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_ext_buffer
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_reqv_cmd_hldr
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_idle_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3cd]"></a>bt_notify_parse_data_header</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, bt_notify_main_recv.o(i.bt_notify_parse_data_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_notify_parse_data_header &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3d7]"></a>bt_notify_parse_ext_data</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, bt_notify_main_recv.o(i.bt_notify_parse_ext_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_notify_parse_ext_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
</UL>

<P><STRONG><a name="[3cb]"></a>bt_notify_parse_ext_header</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_parse_ext_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_notify_parse_ext_header &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_cmd
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3e0]"></a>bt_notify_parse_remote_system</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_parse_remote_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bt_notify_parse_remote_system &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
</UL>

<P><STRONG><a name="[3df]"></a>bt_notify_parse_remote_vern</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bt_notify_main_recv.o(i.bt_notify_parse_remote_vern))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_notify_parse_remote_vern &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
</UL>

<P><STRONG><a name="[3ef]"></a>bt_notify_read_data</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + In Cycle
<LI>Call Chain = bt_notify_read_data &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_header
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_find_cntx_channel_by_device_addr
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data_ext
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_parse_data
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_ext_data_notify
</UL>

<P><STRONG><a name="[3ca]"></a>bt_notify_read_data_ext</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_read_data_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bt_notify_read_data_ext &rArr; bt_notify_service_read_spp_ring_data &rArr; bt_notify_service_check_node_buffer &rArr; bt_spp_release_data &rArr; bt_os_take_stack_mutex &rArr; bt_os_layer_take_mutex &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_read_data
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_read_spp_ring_data
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_source
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_idle_hldr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>

<P><STRONG><a name="[3dd]"></a>bt_notify_receive_data_fsm_int</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_receive_data_fsm_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = bt_notify_receive_data_fsm_int &rArr; bt_notify_fsm_idle_hldr &rArr; bt_notify_fsm_cmd_hldr &rArr; bt_notify_fsm_ext_cmd_hldr &rArr; bt_notify_parse_header &rArr; bt_notify_parse_cmd &rArr;  bt_notify_parse_header (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_idle_hldr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_cmd_hldr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_ready_to_read_ind
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_reqv_cmd_hldr
</UL>

<P><STRONG><a name="[8d]"></a>bt_notify_recv_parse_xml_callback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_recv_parse_xml_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = bt_notify_recv_parse_xml_callback &rArr; bt_notify_data_handle_new_msg &rArr; bt_notify_xml_parse &rArr; xml_parse_buffer &rArr; xml_parse_element &rArr; xml_process_start_tag &rArr; xml_process_start_tag_internal &rArr; xml_attr_handle_entity &rArr; xml_get_entity_value &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_parser_buffer
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_data_handle_new_msg
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_cntx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_notify_main_recv.o(i.bt_notify_parse_data)
</UL>
<P><STRONG><a name="[3f3]"></a>bt_notify_register_callback_int</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, bt_notify_main_recv.o(i.bt_notify_register_callback_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_notify_register_callback_int &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_register_callback_ext
</UL>

<P><STRONG><a name="[3d1]"></a>bt_notify_save_data</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, bt_notify_main_recv.o(i.bt_notify_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_notify_save_data &rArr; bt_notify_strcat_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_parser_buffer
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_strcat_ex
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_hldr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_data_cmd_hldr
</UL>

<P><STRONG><a name="[3d8]"></a>bt_notify_save_ext_buffer</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_save_ext_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_notify_save_ext_buffer &rArr; bt_notify_move_recv_buffer_to_head &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_move_recv_buffer_to_head
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
</UL>

<P><STRONG><a name="[3f9]"></a>bt_notify_send_ext_data_notify</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_send_ext_data_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = bt_notify_send_ext_data_notify &rArr;  bt_notify_read_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_ext_notify
</UL>

<P><STRONG><a name="[3d9]"></a>bt_notify_send_ext_notify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_notify_main_recv.o(i.bt_notify_send_ext_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_notify_send_ext_notify &rArr; bt_notify_send_ext_data_notify &rArr;  bt_notify_read_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_ext_data_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_data_hldr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_ext_cmd_hldr
</UL>

<P><STRONG><a name="[404]"></a>bt_notify_service_spp_send_data</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_service_spp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_send_queue
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_write_data
</UL>

<P><STRONG><a name="[3de]"></a>bt_notify_stop_sync_cmd_wait_timer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_stop_sync_cmd_wait_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bt_notify_stop_sync_cmd_wait_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_handle_disconnect_ind
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_fsm_sync_cmd_hldr
</UL>

<P><STRONG><a name="[3f5]"></a>bt_notify_strcat_ex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_strcat_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_notify_strcat_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_save_data
</UL>

<P><STRONG><a name="[8a]"></a>bt_notify_sync_cmd_time_out_callback</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bt_notify_main_recv.o(i.bt_notify_sync_cmd_time_out_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bt_notify_sync_cmd_time_out_callback &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_check_channel_valid
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_callback_app
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_callback_struct
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_notify_main_recv.o(i.bt_notify_handle_connect_cnf)
<LI> bt_notify_main_recv.o(i.bt_notify_handle_ready_to_read_ind)
</UL>
<P><STRONG><a name="[3f7]"></a>bt_notify_write_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bt_notify_main_recv.o(i.bt_notify_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = bt_notify_write_data &rArr; bt_notify_service_spp_send_data &rArr; bt_spp_send &rArr; bt_spp_connection_state_machine &rArr; bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dogp_adp_write_data
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_get_source
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_service_spp_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_handshake
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_notify_send_data_by_chnl_num
</UL>

<P><STRONG><a name="[2df]"></a>bt_gap_auth_cmplete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bt_gap_auth.o(i.bt_gap_auth_cmplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_gap_auth_cmplete &rArr; bt_app_event_callback_wrap &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
</UL>

<P><STRONG><a name="[2e3]"></a>bt_gap_auth_start_timer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, bt_gap_auth.o(i.bt_gap_auth_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bt_gap_auth_start_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
</UL>

<P><STRONG><a name="[2e4]"></a>bt_gap_auth_stop_timer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bt_gap_auth.o(i.bt_gap_auth_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bt_gap_auth_stop_timer &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_evt_callback
</UL>

<P><STRONG><a name="[74]"></a>bt_gap_auth_timeout</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bt_gap_auth.o(i.bt_gap_auth_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = bt_gap_auth_timeout &rArr; bt_gap_cancel_auth &rArr; bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_cancel_auth
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_gap_auth.o(i.bt_gap_auth_start_timer)
</UL>
<P><STRONG><a name="[31c]"></a>bt_gap_send_auth_operation</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bt_gap_auth.o(i.bt_gap_send_auth_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bt_gap_send_auth_operation &rArr; bt_hci_cmd_send_w_pkg &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send_w_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_user_confirm_request
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_reply_io_capability_request
</UL>

<P><STRONG><a name="[3b2]"></a>bt_mm_check_size_of_value</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_memory.o(i.bt_mm_check_size_of_value))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memory_init_control_block
</UL>

<P><STRONG><a name="[84]"></a>bt_timer_os_expire</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_platform.o(i.bt_timer_os_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_timer_os_expire &rArr; bt_trigger_interrupt &rArr; bt_os_layer_give_semaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_trigger_interrupt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_enable_interrupt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_disable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_platform.o(i.bt_init)
</UL>
<P><STRONG><a name="[4ac]"></a>bt_spp_state_conn_incoming</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, bt_spp.o(i.bt_spp_state_conn_incoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = bt_spp_state_conn_incoming &rArr; bt_rfcomm_connect_response &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect_response
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>

<P><STRONG><a name="[4ab]"></a>bt_spp_state_conn_pending</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, bt_spp.o(i.bt_spp_state_conn_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = bt_spp_state_conn_pending &rArr; bt_rfcomm_connect &rArr; bt_rfcomm_send_PN_message &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_cancel_callback
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_bd_address
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_deinit_channel
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>

<P><STRONG><a name="[4aa]"></a>bt_spp_state_connected</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, bt_spp.o(i.bt_spp_state_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_spp_state_connected &rArr; bt_rfcomm_disconnect &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_trigger
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_data
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_max_frame_size
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_credit
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>

<P><STRONG><a name="[4ad]"></a>bt_spp_state_disc_pending</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bt_spp.o(i.bt_spp_state_disc_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_spp_state_disc_pending &rArr; bt_app_event_callback &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>

<P><STRONG><a name="[4a9]"></a>bt_spp_state_disconnected</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bt_spp.o(i.bt_spp_state_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = bt_spp_state_disconnected &rArr; bt_spp_sdp_service_search &rArr; bt_sdpc_service_search &rArr; bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_app_event_callback
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_sdp_service_search
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_oom_trigger
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_server_id
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_get_bd_address
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_spp_connection_state_machine
</UL>

<P><STRONG><a name="[4be]"></a>calculate_total_avail_space</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nvdm_main.o(i.calculate_total_avail_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calculate_total_avail_space
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
</UL>

<P><STRONG><a name="[50c]"></a>find_free_peb</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, nvdm_main.o(i.find_free_peb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_free_peb
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_allocation
</UL>

<P><STRONG><a name="[50e]"></a>garbage_collection_peb</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, nvdm_main.o(i.garbage_collection_peb))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = garbage_collection_peb &rArr; garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_malloc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_notice
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_free
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_print_info
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_reclaim_pebs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;space_allocation
</UL>

<P><STRONG><a name="[511]"></a>garbage_reclaim_pebs</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, nvdm_main.o(i.garbage_reclaim_pebs))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = garbage_reclaim_pebs &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
</UL>

<P><STRONG><a name="[5e0]"></a>peb_header_is_validate</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nvdm_main.o(i.peb_header_is_validate))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
</UL>

<P><STRONG><a name="[5d7]"></a>peb_header_print_info</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nvdm_main.o(i.peb_header_print_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peb_header_print_info
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
</UL>

<P><STRONG><a name="[510]"></a>peb_print_info</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nvdm_main.o(i.peb_print_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peb_print_info
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection_peb
</UL>

<P><STRONG><a name="[5dc]"></a>peb_reclaim</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nvdm_main.o(i.peb_reclaim))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = peb_reclaim &rArr; peb_update_status &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_erase
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_update_status
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_version
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_magic_number
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_erase_count
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
</UL>

<P><STRONG><a name="[5c8]"></a>peb_scan</STRONG> (Thumb, 864 bytes, Stack size 48 bytes, nvdm_main.o(i.peb_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = peb_scan &rArr; relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_malloc
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_free
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_erase
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_update_status
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_header
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_version
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_magic_number
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_erase_count
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_print_info
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_header_print_info
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_header_is_validate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_init
</UL>

<P><STRONG><a name="[5de]"></a>peb_write_hdr_erase_count</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nvdm_main.o(i.peb_write_hdr_erase_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = peb_write_hdr_erase_count &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
</UL>

<P><STRONG><a name="[5dd]"></a>peb_write_hdr_magic_number</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nvdm_main.o(i.peb_write_hdr_magic_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = peb_write_hdr_magic_number &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
</UL>

<P><STRONG><a name="[5d4]"></a>peb_write_hdr_peb_reserved</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nvdm_main.o(i.peb_write_hdr_peb_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = peb_write_hdr_peb_reserved &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_activing
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_pebs
</UL>

<P><STRONG><a name="[5df]"></a>peb_write_hdr_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nvdm_main.o(i.peb_write_hdr_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = peb_write_hdr_version &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
</UL>

<P><STRONG><a name="[513]"></a>relocate_pebs</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, nvdm_main.o(i.relocate_pebs))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = relocate_pebs &rArr; date_item_migration &rArr; data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_poweroff
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_update_status
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_hdr_peb_reserved
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_reclaim
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_scan
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_reclaim_pebs
</UL>

<P><STRONG><a name="[34f]"></a>bt_hci_get_acl_credit_counter_by_connection_type</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_get_acl_credit_counter_by_connection_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_hci_get_acl_credit_counter_by_connection_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_connection_destroy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
</UL>

<P><STRONG><a name="[353]"></a>bt_hci_get_max_acl_packet_length_by_connection_type</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_hci.o(i.bt_hci_get_max_acl_packet_length_by_connection_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_hci_get_max_acl_packet_length_by_connection_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_tx_send
</UL>

<P><STRONG><a name="[76]"></a>bt_gap_clean_pending_op_cb</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, bt_gap_connection.o(i.bt_gap_clean_pending_op_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bt_gap_clean_pending_op_cb &rArr; bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_gap_connection.o(i.bt_gap_check_connection_status)
</UL>
<P><STRONG><a name="[77]"></a>bt_gap_cmp_by_address</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_gap_connection.o(i.bt_gap_cmp_by_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bt_gap_cmp_by_address &rArr; bt_memcmp &rArr; bt_os_layer_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcmp
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bt_gap_connection.o(i.bt_gap_connect)
<LI> bt_gap_connection.o(i.bt_gap_connected_evt_callback)
<LI> bt_gap_connection.o(i.bt_gap_find_connection)
</UL>
<P><STRONG><a name="[7c]"></a>bt_gap_cmp_by_handle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_gap_connection.o(i.bt_gap_cmp_by_handle))
<BR>[Address Reference Count : 1]<UL><LI> bt_gap_connection.o(i.bt_gap_find_connection_by_handle)
</UL>
<P><STRONG><a name="[7a]"></a>bt_gap_connection_supervision_check</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, bt_gap_connection.o(i.bt_gap_connection_supervision_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = bt_gap_connection_supervision_check &rArr; bt_gap_check_connection_status &rArr; bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_gap_connection.o(i.bt_gap_connection_supervision_timeout)
</UL>
<P><STRONG><a name="[78]"></a>bt_gap_connection_supervision_timeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bt_gap_connection.o(i.bt_gap_connection_supervision_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bt_gap_connection_supervision_timeout &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_travel_node
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bt_gap_connection.o(i.bt_gap_connected_evt_callback)
<LI> bt_gap_connection.o(i.bt_gap_connection_supervision_timeout)
</UL>
<P><STRONG><a name="[2f8]"></a>bt_gap_find_sco_by_handle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bt_gap_connection.o(i.bt_gap_find_sco_by_handle))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[2f0]"></a>bt_gap_handle_connection</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, bt_gap_connection.o(i.bt_gap_handle_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bt_gap_handle_connection &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_send_pending_operation
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_auth_param
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hfp_sco_callback
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_sco_by_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_check_connection_status
</UL>

<P><STRONG><a name="[2f6]"></a>bt_gap_notify_connection_fail</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bt_gap_connection.o(i.bt_gap_notify_connection_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = bt_gap_notify_connection_fail &rArr; bt_l2cap_link_status_change_notify &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_remove_link_node
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_fixed_size_by_type_internal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_link_status_change_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[2f7]"></a>bt_gap_notify_sco_status</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bt_gap_connection.o(i.bt_gap_notify_sco_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bt_gap_notify_sco_status &rArr; bt_hci_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_cmd_send
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hfp_sco_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connection_lost
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_connected_evt_callback
</UL>

<P><STRONG><a name="[a0]"></a>bt_time_backward_cmp_duration</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, bt_timer.o(i.bt_time_backward_cmp_duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bt_time_backward_cmp_duration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_timer.o(i.bt_timer_start)
</UL>
<P><STRONG><a name="[9f]"></a>bt_time_backward_cmp_id</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_timer.o(i.bt_time_backward_cmp_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_time_backward_cmp_id
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bt_timer.o(i.bt_timer_find)
<LI> bt_timer.o(i.bt_timer_cancel)
<LI> bt_timer.o(i.bt_timer_cancel_and_callback)
</UL>
<P><STRONG><a name="[47d]"></a>bt_sdpc_add_request</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, bt_sdpc.o(i.bt_sdpc_add_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_sdpc_add_request &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_linknode_insert_node
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_gap_find_connection
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_init_channel
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_free_channel
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_allocate_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_search
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_service_attribute
</UL>

<P><STRONG><a name="[97]"></a>bt_sdpc_oom_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bt_sdpc.o(i.bt_sdpc_oom_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = bt_sdpc_oom_handler &rArr; bt_sdpc_handle_current_request &rArr; bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_sdpc.o(i.bt_sdpc_handle_current_request)
</UL>
<P><STRONG><a name="[481]"></a>bt_sdpc_start_query</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, bt_sdpc.o(i.bt_sdpc_start_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = bt_sdpc_start_query &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mm_free_packet_internal
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_tx_mtu
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_32bit
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_handle_current_request
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_data_handle
</UL>

<P><STRONG><a name="[98]"></a>bt_sdpc_timeout_callback</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bt_sdpc.o(i.bt_sdpc_timeout_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = bt_sdpc_timeout_callback &rArr; bt_l2cap_disconnect &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_disconnect
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_free_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_sdpc.o(i.bt_sdpc_start_query)
</UL>
<P><STRONG><a name="[95]"></a>bt_rfcomm_oom_disconnect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bt_rfcomm.o(i.bt_rfcomm_oom_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = bt_rfcomm_oom_disconnect &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm.o(i.bt_rfcomm_disconnect)
</UL>
<P><STRONG><a name="[94]"></a>bt_rfcomm_oom_send_credit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bt_rfcomm.o(i.bt_rfcomm_oom_send_credit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = bt_rfcomm_oom_send_credit &rArr; bt_rfcomm_send_credit &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_credit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_rfcomm.o(i.bt_rfcomm_channel_state_machine)
</UL>
<P><STRONG><a name="[1ff]"></a>_bt_driver_recv</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bt_driver.o(i._bt_driver_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _bt_driver_recv &rArr; bt_driver_relay_recv &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_recv
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_recv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
</UL>

<P><STRONG><a name="[293]"></a>bt_driver_debug_dump</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bt_driver.o(i.bt_driver_debug_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_driver_debug_dump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[294]"></a>bt_driver_deregister_sleep_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_deregister_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bt_driver_deregister_sleep_handler &rArr; bt_os_layer_sleep_manager_unlock_sleep &rArr; hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_unlock_sleep
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_release_sleep_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
</UL>

<P><STRONG><a name="[290]"></a>bt_driver_disable_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt_driver.o(i.bt_driver_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_complete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller_complete
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_sleep
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_wakeup_cmd_sent_flag
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_controller_sleep_flag
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_sleep
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_close
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_handler
</UL>

<P><STRONG><a name="[202]"></a>bt_driver_disable_irq_mask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_driver.o(i.bt_driver_disable_irq_mask))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_close
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_driver_recv
</UL>

<P><STRONG><a name="[291]"></a>bt_driver_eint_deinit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_eint_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_eint_deinit &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_deinit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_close
</UL>

<P><STRONG><a name="[71]"></a>bt_driver_eint_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_eint_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bt_driver_eint_handler &rArr; bt_driver_lock_sleep &rArr; bt_os_layer_sleep_manager_lock_sleep &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_wakeup_cmd_sent_flag
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_sleep
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_pattern_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_device
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_driver.o(i.bt_driver_eint_init)
</UL>
<P><STRONG><a name="[29d]"></a>bt_driver_eint_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bt_driver.o(i.bt_driver_eint_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bt_driver_eint_init &rArr; hal_eint_init &rArr; hal_eint_set_debounce_time &rArr; hal_gpt_delay_us &rArr; gpt_start_free_run_timer &rArr; gpt_open_clock_source &rArr; hal_clock_enable &rArr; _hal_clock_enable_
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_unmask
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_register_callback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eint_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
</UL>

<P><STRONG><a name="[29c]"></a>bt_driver_enable_irq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bt_driver.o(i.bt_driver_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_recv
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_host_complete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_controller_complete
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_unlock_sleep
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_wakeup_cmd_sent_flag
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_controller_sleep_flag
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_lock_sleep
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_send_with_pending_rsp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_eint_handler
</UL>

<P><STRONG><a name="[2b5]"></a>bt_driver_enable_irq_mask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_driver.o(i.bt_driver_enable_irq_mask))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_write
</UL>

<P><STRONG><a name="[72]"></a>bt_driver_isr</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = bt_driver_isr &rArr; _bt_driver_recv &rArr; bt_driver_relay_recv &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_get_hal_gpt_time
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_notify
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_set_controller_sleep_flag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_get_wakeup_cmd_sent_flag
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_disable_irq
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_driver_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_driver.o(i.bt_driver_register_irq)
</UL>
<P><STRONG><a name="[2aa]"></a>bt_driver_isr_rx_allocate_packet</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, bt_driver.o(i.bt_driver_isr_rx_allocate_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_driver_isr_rx_allocate_packet &rArr; bt_alloc_rx_packet_with_node &rArr; bt_mm_allocate_packet_internal &rArr; bt_mm_dump_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_rx_oom_notify
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_alloc_rx_packet_with_node
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_trigger_controller_codedump
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
</UL>

<P><STRONG><a name="[2ae]"></a>bt_driver_lock_voltage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_lock_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_lock_voltage &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_voltage
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
</UL>

<P><STRONG><a name="[2c7]"></a>bt_driver_raw_dump</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bt_driver.o(i.bt_driver_raw_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_driver_raw_dump
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_recv
</UL>

<P><STRONG><a name="[2c9]"></a>bt_driver_raw_dump_begin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_raw_dump_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_driver_raw_dump_begin &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_recv
</UL>

<P><STRONG><a name="[2ca]"></a>bt_driver_raw_dump_end</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_raw_dump_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_driver_raw_dump_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_rx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_recv
</UL>

<P><STRONG><a name="[2b4]"></a>bt_driver_register_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_register_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_driver_register_irq &rArr; hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_open
</UL>

<P><STRONG><a name="[2c6]"></a>bt_driver_register_sleep_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_register_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bt_driver_register_sleep_handler &rArr; bt_os_layer_sleep_manager_set_sleep_handle &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_os_layer_sleep_manager_set_sleep_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_on
</UL>

<P><STRONG><a name="[200]"></a>bt_driver_relay_recv</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, bt_driver.o(i.bt_driver_relay_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bt_driver_relay_recv &rArr; hal_uart_send_dma &rArr; hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_dma
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_relay_serial_port_write_data
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_end
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_begin
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_driver_recv
</UL>

<P><STRONG><a name="[201]"></a>bt_driver_rx</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, bt_driver.o(i.bt_driver_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bt_driver_rx &rArr; bt_driver_isr_rx_allocate_packet &rArr; bt_alloc_rx_packet_with_node &rArr; bt_mm_allocate_packet_internal &rArr; bt_mm_dump_state &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_log
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_rx_cb_proc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_free_packet_with_node
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_end
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_begin
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_isr_rx_allocate_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bt_driver_recv
</UL>

<P><STRONG><a name="[2c3]"></a>bt_driver_unlock_voltage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_driver.o(i.bt_driver_unlock_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_unlock_voltage &rArr; bt_debug_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_vcore_voltage
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_vcore_voltage
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_power_off
</UL>

<P><STRONG><a name="[2ba]"></a>bt_driver_write</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, bt_driver.o(i.bt_driver_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_driver_write &rArr; bt_driver_raw_dump_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_end
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump_begin
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_raw_dump
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_enable_irq_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_tx
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_wakeup_pattern_send
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_driver_patch_download
</UL>

<P><STRONG><a name="[4bc]"></a>calculate_checksum</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nvdm_data.o(i.calculate_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calculate_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_data_item_checksum
</UL>

<P><STRONG><a name="[4bb]"></a>calculate_data_item_checksum</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nvdm_data.o(i.calculate_data_item_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = calculate_data_item_checksum &rArr; peb_read_data &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_checksum
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
</UL>

<P><STRONG><a name="[4c6]"></a>data_item_header_print_info</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nvdm_data.o(i.data_item_header_print_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_item_header_print_info
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_item_scan
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
</UL>

<P><STRONG><a name="[4d0]"></a>data_migration</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, nvdm_data.o(i.data_migration))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = data_migration &rArr; peb_write_data &rArr; peb_io_write &rArr; nvdm_port_flash_write &rArr; hal_flash_write &rArr; writeRawDiskData &rArr; MountDevice &rArr; retrieve_FDM_lock &rArr; GetFDMLock &rArr; Flash_ReturnReady &rArr;  Flash_ReturnReady (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_write_data
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_item_migration
</UL>

<P><STRONG><a name="[5cf]"></a>search_data_item_by_name</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, nvdm_data.o(i.search_data_item_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = search_data_item_by_name &rArr; peb_read_data &rArr; peb_io_read &rArr; nvdm_port_flash_read &rArr; nvdm_port_log_error &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_port_log_error
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_read_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_write_data_item
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvdm_read_data_item
</UL>

<P><STRONG><a name="[5da]"></a>compare_buffer</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, nvdm_io.o(i.compare_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peb_io_write
</UL>

<P><STRONG><a name="[447]"></a>bt_rfcomm_control_command_handle</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, bt_rfcomm_session.o(i.bt_rfcomm_control_command_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = bt_rfcomm_control_command_handle &rArr; bt_rfcomm_PN_response_handler &rArr; bt_rfcomm_receive_PN_message &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_MSC_command
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_channel
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_TEST_command
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RPN_command
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_RLS_command
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NSC_command
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_response_handler
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_PN_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
</UL>

<P><STRONG><a name="[456]"></a>bt_rfcomm_notify_user_and_close_channel</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, bt_rfcomm_session.o(i.bt_rfcomm_notify_user_and_close_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bt_rfcomm_notify_user_and_close_channel &rArr; bt_rfcomm_channel_stop_all_timer &rArr; bt_rfcomm_stop_timer &rArr; bt_timer_cancel &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_remove_channel
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_stop_all_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
</UL>

<P><STRONG><a name="[45c]"></a>bt_rfcomm_session_state_close</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_state_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = bt_rfcomm_session_state_close &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_conncet_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
</UL>

<P><STRONG><a name="[45d]"></a>bt_rfcomm_session_state_conn_incoming</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_state_conn_incoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = bt_rfcomm_session_state_conn_incoming &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_stop_all_timer
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_notify_user_and_close_channel
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_wait_conn_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
</UL>

<P><STRONG><a name="[45f]"></a>bt_rfcomm_session_state_conn_pending</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_state_conn_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = bt_rfcomm_session_state_conn_pending &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_PN_message
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_oom_trigger
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_stop_all_timer
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_notify_user_and_close_channel
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_wait_conn_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
</UL>

<P><STRONG><a name="[455]"></a>bt_rfcomm_session_state_machine</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = bt_rfcomm_session_state_machine &rArr; bt_rfcomm_session_state_open &rArr; bt_rfcomm_control_command_handle &rArr; bt_rfcomm_PN_response_handler &rArr; bt_rfcomm_receive_PN_message &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_packet_to_frame
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_open
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_pending
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_conn_incoming
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_close
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_l2cap_callback
</UL>

<P><STRONG><a name="[461]"></a>bt_rfcomm_session_state_open</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, bt_rfcomm_session.o(i.bt_rfcomm_session_state_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = bt_rfcomm_session_state_open &rArr; bt_rfcomm_control_command_handle &rArr; bt_rfcomm_PN_response_handler &rArr; bt_rfcomm_receive_PN_message &rArr; bt_rfcomm_send_NUIH_frame &rArr; bt_rfcomm_session_send &rArr; bt_l2cap_send &rArr; bt_l2cap_state_machine &rArr; bt_l2cap_state_config &rArr; bt_l2cap_handle_config_req &rArr; bt_l2cap_send_config_rsp &rArr; bt_l2cap_cmd_send &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_stop_timer
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_disconnect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_send_NUIH_frame
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_channel_state_machine
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_stop_all_timer
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_notify_user_and_close_channel
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_control_command_handle
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_find_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rfcomm_session_state_machine
</UL>

<P><STRONG><a name="[487]"></a>bt_sdps_build_error_rsp_packet</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bt_sdps.o(i.bt_sdps_build_error_rsp_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = bt_sdps_build_error_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_handle
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_attr_handle
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[99]"></a>bt_sdps_compare_by_channel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bt_sdps.o(i.bt_sdps_compare_by_channel))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps.o(i.bt_sdps_find_channel)
</UL>
<P><STRONG><a name="[48b]"></a>bt_sdps_db_build_attr_rsp_packet</STRONG> (Thumb, 1498 bytes, Stack size 824 bytes, bt_sdps.o(i.bt_sdps_db_build_attr_rsp_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_memcpy
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_tx_mtu
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_32bit
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_16bit
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_next_attr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_attribute_id
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>

<P><STRONG><a name="[48d]"></a>bt_sdps_db_build_record_handle_rsp_packet</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, bt_sdps.o(i.bt_sdps_db_build_record_handle_rsp_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bt_sdps_db_build_record_handle_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_debug_log
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_allocate_packet_with_node
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_get_tx_mtu
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_32bit
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_set_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
</UL>

<P><STRONG><a name="[490]"></a>bt_sdps_db_get_attr_by_id</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, bt_sdps.o(i.bt_sdps_db_get_attr_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_sdps_db_get_attr_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_next_attr
</UL>

<P><STRONG><a name="[491]"></a>bt_sdps_db_get_attr_by_range</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, bt_sdps.o(i.bt_sdps_db_get_attr_by_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bt_sdps_db_get_attr_by_range
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_next_attr
</UL>

<P><STRONG><a name="[48e]"></a>bt_sdps_db_get_curr_record</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bt_sdps.o(i.bt_sdps_db_get_curr_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_sdps_db_get_curr_record
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_get_customized_record
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
</UL>

<P><STRONG><a name="[48c]"></a>bt_sdps_db_get_next_attr</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bt_sdps.o(i.bt_sdps_db_get_next_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bt_sdps_db_get_next_attr &rArr; bt_sdps_db_get_attr_by_range
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_attr_by_range
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_attr_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
</UL>

<P><STRONG><a name="[492]"></a>bt_sdps_db_search_attr_match_packet</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, bt_sdps.o(i.bt_sdps_db_search_attr_match_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = bt_sdps_db_search_attr_match_packet &rArr; bt_sdps_db_search_attr_match_packet_ext &rArr; bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_get_customized_record
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_32bit
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_attr_handle
</UL>

<P><STRONG><a name="[493]"></a>bt_sdps_db_search_attr_match_packet_ext</STRONG> (Thumb, 336 bytes, Stack size 104 bytes, bt_sdps.o(i.bt_sdps_db_search_attr_match_packet_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = bt_sdps_db_search_attr_match_packet_ext &rArr; bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_32bit
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_attr_rsp_packet
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_type
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdpc_parse_next_value_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
</UL>

<P><STRONG><a name="[494]"></a>bt_sdps_db_ser_search_attr_match_packet</STRONG> (Thumb, 322 bytes, Stack size 288 bytes, bt_sdps.o(i.bt_sdps_db_ser_search_attr_match_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = bt_sdps_db_ser_search_attr_match_packet &rArr; bt_sdps_db_search_attr_match_packet_ext &rArr; bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_get_customized_record
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_curr_record
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_next_uuid
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_uuid_match
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_attr_handle
</UL>

<P><STRONG><a name="[496]"></a>bt_sdps_db_ser_search_match_packet</STRONG> (Thumb, 434 bytes, Stack size 256 bytes, bt_sdps.o(i.bt_sdps_db_ser_search_match_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = bt_sdps_db_ser_search_match_packet &rArr; bt_sdps_db_uuid_match &rArr; bt_sdp_uuid_cmp &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_get_customized_record
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_get_curr_record
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_build_record_handle_rsp_packet
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_next_uuid
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_uuid_match
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_handle
</UL>

<P><STRONG><a name="[495]"></a>bt_sdps_db_uuid_match</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, bt_sdps.o(i.bt_sdps_db_uuid_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = bt_sdps_db_uuid_match &rArr; bt_sdp_uuid_cmp &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_uuid_cmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_next_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
</UL>

<P><STRONG><a name="[489]"></a>bt_sdps_ser_attr_handle</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bt_sdps.o(i.bt_sdps_ser_attr_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = bt_sdps_ser_attr_handle &rArr; bt_sdps_db_search_attr_match_packet &rArr; bt_sdps_db_search_attr_match_packet_ext &rArr; bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_search_attr_match_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_data_handle
</UL>

<P><STRONG><a name="[48a]"></a>bt_sdps_ser_search_attr_handle</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, bt_sdps.o(i.bt_sdps_ser_search_attr_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = bt_sdps_ser_search_attr_handle &rArr; bt_sdps_db_ser_search_attr_match_packet &rArr; bt_sdps_db_search_attr_match_packet_ext &rArr; bt_sdps_db_build_attr_rsp_packet &rArr; bt_allocate_packet_with_node &rArr; bt_hci_tx_send &rArr; bt_hci_trigger_controller &rArr; bt_driver_wakeup_controller &rArr; bt_driver_start_wakeup_controller_timer &rArr; bt_timer_start &rArr; bt_timer_start_timer &rArr; bt_os_layer_start_timer &rArr; bt_os_layer_stop_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_verify_search_pattern
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_attr_match_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_data_handle
</UL>

<P><STRONG><a name="[488]"></a>bt_sdps_ser_search_handle</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, bt_sdps.o(i.bt_sdps_ser_search_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = bt_sdps_ser_search_handle &rArr; bt_sdps_db_ser_search_match_packet &rArr; bt_sdps_db_uuid_match &rArr; bt_sdp_uuid_cmp &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_l2cap_send
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_16bit
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_build_error_rsp_packet
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_verify_search_pattern
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_db_ser_search_match_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_data_handle
</UL>

<P><STRONG><a name="[497]"></a>bt_sdps_verify_search_pattern</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, bt_sdps.o(i.bt_sdps_verify_search_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_sdps_verify_search_pattern &rArr; bt_sdp_get_data_len &rArr; bt_sdp_get_32bit &rArr; bt_endian_order_swap &rArr; bt_memcpy &rArr; bt_os_layer_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_type
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdp_get_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_handle
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_sdps_ser_search_attr_handle
</UL>

<P><STRONG><a name="[30]"></a>bt_sdps_get_sdp_record</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_sdps_config.o(i.bt_sdps_get_sdp_record))
<BR>[Address Reference Count : 1]<UL><LI> bt_sdps_config.o(.data)
</UL>
<P><STRONG><a name="[205]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f7]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[208]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[207]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[66]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[55]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
